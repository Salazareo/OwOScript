program : statements

statements : singleStatement
           | statements statements

singleStatement : expr ;
                | assignment ; 
                | declaration ; 
                | functionDeclaration ;
                | whileLoop 
                | forLoop
                | conditional
                | returnStatement ;

expr : literal 
     | arrayLiteral
     | reference 
     | ( expr )
     | ternaryOp
     | functionCall
     | !expr           # Bool operations
	| expr < expr
	| expr > expr
	| expr >= expr
	| expr <= expr 
	| expr == expr 
	| expr != expr
	| expr && expr
	| expr || expr
	| - expr          # num operations
	| expr + expr
	| expr - expr
	| expr * expr 
	| expr / expr 

ternaryOp : expr ? expr : expr

assignment : reassign
           | initialize
           | arrayAssign
           | binOpAssign

binOpAssign : ID += expr
            | ID -= expr
            | ID /= expr
            | ID *= expr
            | ID ++
            | ID --

conditional : if else
            | if

if : nani ( expr ) enclosure
   | nani ( expr ) singleStatement

else : noU enclosure
     | noU singleStatement

whileLoop : whileU ( expr ) iStudied enclosure

forLoop : shi ( forTrio ) enclosure
        | shi ( forElement ) enclosure

forTrio : forAssign; expr; forReassign

forAssign : reassign
          | letInitialize
          | arrayAssign
          | binOpAssign

forReassign : reassign
            | arrayAssign

forElement : declaration : ID
           | constDeclaration : ID

functionDeclaration : functionHeader( argumentDeclaration ) enclosure

enclosure : { }
          | { statements }

functionHeader: functionType~honorific ID

arrayAssign : ID[ expr ] = expr

reassign: ID = expr

returnStatement: expr desu

honorific : chan
          | kun 
          | san 
          | sama

functionCall : printCall
             | ID( exprList )
             | ID()

printCall : baka( exprLst )

arrayLiteral : []
             | [ exprList ]

initialize : letInitialize
           | constInitialize

letInitialize : declaration = expr

constInitialize : constDeclaration = expr

declaration : arrayDeclaration
            | letDeclaration

argumentDeclaration : declaration
                    | declaration, argumentDeclaration
                    |                                           (no arguments)

constDeclaration : real arrayDeclaration
                 | real letDeclaration

arrayDeclaration : type harem ID

letDeclaration : type ID

exprList : expr
         | expr , exprList


literal : NUMBER
	| OWO
	| UWU

reference : letReference
          | arrayReference

letReference : ID

arrayReference : ID[expr]

functionType : type
             | yokai        #undefined/None type

type : waifu                # number(int/float) type
     | catgirl              # boolean type