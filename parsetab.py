
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEQGTGEQEQOPNEQleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTAND BAKA CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM ID ISTUDIED KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MULTID NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SHI SQUIGGLY TEQ TIMES UWU WAIFU WHILEU YOKAI program : statements statements : singleStatement\n                   | statements statements\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : \n             | numExpr\n             | boolExpr\n             | functionCall\n             | arrayExpr\n             | ternaryOp\n             | reference \n\n     ternaryOp : boolExpr QMARK expr COL expr\n    arrayExpr : arrayLiteral\n                 | letReference\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     conditional : if else\n                    | if\n     if : NANI LPAREN boolExpr RPAREN newScope enclosure popScope\n           | NANI LPAREN boolExpr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    newFn : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : ID LBRACK numExpr RBRACK EQ expr\n     functionCall : printCall\n                     | ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n     binOpAssign : ID PEQ numExpr\n                    | ID MEQ numExpr\n                    | ID TEQ numExpr\n                    | ID DEQ numExpr\n                    | ID PP\n                    | ID MM\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL boolExpr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN boolExpr : boolExpr AND boolExpr\n                 | boolExpr OR boolExpr\n                 | expr NEQ expr\n                 | numExpr LEQ numExpr\n                 | numExpr GEQ numExpr\n                 | numExpr LT numExpr\n                 | numExpr GT numExpr\n                 | expr EQOP expr\n    numExpr : numExpr PLUS numExpr\n               | numExpr MINUS numExpr\n               | numExpr TIMES numExpr\n               | numExpr DIVIDE numExprnumExpr : referenceboolExpr : referencereference : letReference\n                 | arrayReference\n    letReference : ID\n     arrayReference : ID LBRACK numExpr RBRACK boolExpr : NOT boolExprboolExpr : LPAREN boolExpr RPAREN\n     boolExpr : OWO\n                 | UWU\n    numExpr : MINUS numExpr %prec UMINUSnumExpr : LPAREN numExpr RPARENnumExpr : NUMBER fnType : YOKAI\n               | type\n    type : WAIFU\n            | CATGIRL\n    '
    
_lr_action_items = {'SEMICOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,30,32,33,34,35,36,37,38,39,40,51,52,53,54,55,56,57,58,59,76,80,81,82,83,85,86,87,89,91,93,99,100,101,105,109,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,133,138,139,141,142,143,144,145,147,155,156,163,167,168,169,170,171,172,173,174,175,178,179,180,183,191,192,193,194,195,196,197,200,201,202,206,207,208,209,210,211,212,213,216,217,218,],[-12,-12,-2,52,56,57,-7,-8,-9,-10,59,-13,-14,-15,-16,-17,-18,-22,-23,-24,-25,-56,-57,-27,-109,-105,-106,-45,-101,-20,-21,-100,-52,-53,-3,-4,-38,-12,-12,-5,-6,-12,-11,-99,-26,-37,-107,-97,-99,-101,-103,-98,-101,-12,-62,-63,-48,-70,-12,-87,-92,-54,-93,-94,-95,-96,-88,-89,-90,-91,-85,-86,-108,-104,-12,-47,-32,-58,-59,-60,-61,-49,-69,-55,-12,187,-75,-76,-77,-78,-39,-39,-12,-46,-102,-37,-84,-19,-102,-30,-31,-34,-12,-12,-12,-39,-39,-39,214,-35,-44,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'DESU':([0,2,3,4,7,8,9,10,12,13,14,15,16,17,28,30,32,33,34,35,36,37,38,51,52,54,55,56,57,59,76,80,81,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,124,125,128,129,133,138,145,156,171,172,173,174,175,178,179,180,183,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[-12,-12,-2,53,-7,-8,-9,-10,-13,-14,-15,-16,-17,-18,-27,-109,-105,-106,-45,-101,-20,-21,-100,-3,-4,-12,-12,-5,-6,-11,-99,-26,-37,-107,-97,-99,-101,-103,-98,-101,-48,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,-85,-86,-108,-104,-12,-47,-49,-12,-39,-39,-12,-46,-102,-37,-84,-19,-102,-30,-31,-34,-12,-12,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'NEQ':([0,2,3,4,7,8,9,10,12,13,14,15,16,17,25,28,30,31,32,33,34,35,36,37,38,41,51,52,54,55,56,57,58,59,68,69,70,72,73,74,75,76,77,78,80,81,82,83,85,86,87,88,89,90,91,92,93,101,103,107,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,133,135,136,138,139,145,146,153,155,156,171,172,173,174,175,178,179,180,183,187,191,192,193,194,195,196,197,200,201,202,206,207,208,209,210,211,212,213,216,217,218,],[-12,-12,-2,54,-7,-8,-9,-10,-13,-14,-15,-16,-17,-18,-12,-27,-109,-12,-105,-106,-45,-101,-20,-21,-100,-12,-3,-4,-12,-12,-5,-6,-12,-11,-12,-12,-12,-13,-14,-18,54,-21,-101,-12,-26,-37,-107,-97,-99,-101,-14,-13,-18,-12,-101,-12,-12,-48,54,-12,-12,-12,-87,-92,54,-93,-94,-95,-96,-88,-89,-90,-91,-14,-14,54,-108,-104,-14,-12,-13,-18,-47,54,-49,-12,-14,54,-12,-39,-39,-12,-46,-102,-37,-84,54,-102,-12,-30,-31,-34,-12,-12,-12,-39,-39,-39,-14,-35,54,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'EQOP':([0,2,3,4,7,8,9,10,12,13,14,15,16,17,25,28,30,31,32,33,34,35,36,37,38,41,51,52,54,55,56,57,58,59,68,69,70,72,73,74,75,76,77,78,80,81,82,83,85,86,87,88,89,90,91,92,93,101,103,107,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,133,135,136,138,139,145,146,153,155,156,171,172,173,174,175,178,179,180,183,187,191,192,193,194,195,196,197,200,201,202,206,207,208,209,210,211,212,213,216,217,218,],[-12,-12,-2,55,-7,-8,-9,-10,-13,-14,-15,-16,-17,-18,-12,-27,-109,-12,-105,-106,-45,-101,-20,-21,-100,-12,-3,-4,-12,-12,-5,-6,-12,-11,-12,-12,-12,-13,-14,-18,55,-21,-101,-12,-26,-37,-107,-97,-99,-101,-14,-13,-18,-12,-101,-12,-12,-48,55,-12,-12,-12,-87,-92,55,-93,-94,-95,-96,-88,-89,-90,-91,-14,-14,55,-108,-104,-14,-12,-13,-18,-47,55,-49,-12,-14,55,-12,-39,-39,-12,-46,-102,-37,-84,55,-102,-12,-30,-31,-34,-12,-12,-12,-39,-39,-39,-14,-35,55,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'WHILEU':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[26,26,-2,-7,-8,-9,-10,-27,26,-4,-5,-6,-11,-26,-37,26,-39,-39,26,-37,-30,-31,-34,26,26,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'SHI':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[27,27,-2,-7,-8,-9,-10,-27,27,-4,-5,-6,-11,-26,-37,27,-39,-39,27,-37,-30,-31,-34,27,27,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'MINUS':([0,2,3,7,8,9,10,12,17,25,28,29,30,31,35,37,38,41,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,74,76,77,78,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,107,108,109,116,117,118,119,120,121,122,123,128,130,133,134,135,136,140,141,142,143,144,146,156,159,171,172,173,175,178,183,187,189,191,192,193,194,195,196,197,200,201,204,206,208,209,210,211,212,213,216,217,218,],[29,29,-2,-7,-8,-9,-10,61,-97,29,-27,29,-109,29,-101,-99,-100,29,29,-4,29,29,-5,-6,29,-11,29,29,29,29,29,29,29,29,29,29,29,61,-97,-99,-101,29,-26,-37,-107,-97,29,-99,-101,61,-97,29,-101,29,29,29,29,29,29,29,29,29,29,-93,-94,-95,-96,61,61,61,61,-108,29,29,61,61,-97,61,61,61,61,61,29,29,61,-39,-39,29,-102,-37,-102,29,29,-30,-31,-34,29,29,29,-39,-39,-39,61,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'LPAREN':([0,2,3,7,8,9,10,24,25,26,27,28,29,31,35,41,44,45,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,77,78,79,80,81,84,90,91,92,93,94,95,96,97,98,107,108,109,130,133,146,156,171,172,173,177,178,187,189,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[25,25,-2,-7,-8,-9,-10,-37,25,78,-37,-27,84,90,92,25,107,108,25,-4,25,25,-5,-6,25,-11,84,84,84,84,84,84,84,84,90,90,25,127,92,90,132,-26,-37,84,90,92,25,25,84,84,84,84,84,90,25,25,84,25,25,25,-39,-39,25,-36,-37,90,84,-30,-31,-34,25,25,25,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'NUMBER':([0,2,3,7,8,9,10,25,28,29,31,41,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,171,172,173,178,187,189,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[30,30,-2,-7,-8,-9,-10,30,-27,30,30,30,30,-4,30,30,-5,-6,30,-11,30,30,30,30,30,30,30,30,30,30,30,30,-26,-37,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-39,-39,30,-37,30,30,-30,-31,-34,30,30,30,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'NOT':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[31,31,-2,-7,-8,-9,-10,31,-27,31,31,31,-4,31,31,-5,-6,31,-11,31,31,31,31,-26,-37,31,31,31,31,31,31,31,31,31,-39,-39,31,-37,31,-30,-31,-34,31,31,31,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'OWO':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[32,32,-2,-7,-8,-9,-10,32,-27,32,32,32,-4,32,32,-5,-6,32,-11,32,32,32,32,-26,-37,32,32,32,32,32,32,32,32,32,-39,-39,32,-37,32,-30,-31,-34,32,32,32,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'UWU':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[33,33,-2,-7,-8,-9,-10,33,-27,33,33,33,-4,33,33,-5,-6,33,-11,33,33,33,33,-26,-37,33,33,33,33,33,33,33,33,33,-39,-39,33,-37,33,-30,-31,-34,33,33,33,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'ID':([0,2,3,7,8,9,10,25,28,29,31,41,42,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,84,90,92,93,94,95,96,97,98,104,107,108,109,112,130,132,133,146,148,149,150,151,152,156,171,172,173,178,187,188,189,190,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,214,216,217,218,],[35,35,-2,-7,-8,-9,-10,77,-27,86,91,91,105,-112,-113,35,-4,91,91,-5,-6,91,-11,86,86,86,86,86,86,86,86,91,91,91,91,-26,-37,86,91,91,91,86,86,86,86,86,147,91,91,91,105,86,165,35,91,177,-40,-41,-42,-43,91,-39,-39,35,-37,91,203,86,205,-30,-31,-34,35,91,35,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,165,-28,-29,-71,]),'NANI':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[44,44,-2,-7,-8,-9,-10,-27,44,-4,-5,-6,-11,-26,-37,44,-39,-39,44,-37,-30,-31,-34,44,44,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'BAKA':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[45,45,-2,-7,-8,-9,-10,45,-27,45,45,45,-4,45,45,-5,-6,45,-11,45,45,45,45,-26,-37,45,45,45,45,45,45,45,45,45,-39,-39,45,-37,45,-30,-31,-34,45,45,45,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'LBRACK':([0,2,3,7,8,9,10,25,28,31,35,41,51,52,54,55,56,57,58,59,68,69,70,77,78,80,81,86,90,91,92,93,107,108,109,133,146,156,165,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[41,41,-2,-7,-8,-9,-10,41,-27,41,94,41,41,-4,41,41,-5,-6,41,-11,41,41,41,130,41,-26,-37,130,41,130,41,41,41,41,41,41,41,41,189,-39,-39,41,-37,41,-30,-31,-34,41,41,41,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'WAIFU':([0,2,3,7,8,9,10,28,50,51,52,56,57,59,80,81,127,132,133,171,172,173,178,182,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[47,47,-2,-7,-8,-9,-10,-27,47,47,-4,-5,-6,-11,-26,-37,47,47,47,-39,-39,47,-37,47,-30,-31,-34,47,47,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'CATGIRL':([0,2,3,7,8,9,10,28,50,51,52,56,57,59,80,81,127,132,133,171,172,173,178,182,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[48,48,-2,-7,-8,-9,-10,-27,48,48,-4,-5,-6,-11,-26,-37,48,48,48,-39,-39,48,-37,48,-30,-31,-34,48,48,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'YOKAI':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[49,49,-2,-7,-8,-9,-10,-27,49,-4,-5,-6,-11,-26,-37,49,-39,-39,49,-37,-30,-31,-34,49,49,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'REAL':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,132,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[50,50,-2,-7,-8,-9,-10,-27,50,-4,-5,-6,-11,-26,-37,50,50,-39,-39,50,-37,-30,-31,-34,50,50,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'$end':([1,2,3,7,8,9,10,28,51,52,56,57,59,80,171,172,191,192,193,197,200,201,206,208,209,210,211,212,213,216,217,218,],[0,-1,-2,-7,-8,-9,-10,-27,-3,-4,-5,-6,-11,-26,-39,-39,-30,-31,-34,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'RBRACE':([3,7,8,9,10,28,51,52,56,57,59,80,171,172,173,191,192,193,194,197,200,201,206,208,209,210,211,212,213,216,217,218,],[-2,-7,-8,-9,-10,-27,-3,-4,-5,-6,-11,-26,-39,-39,193,-30,-31,-34,206,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'EQ':([6,22,23,35,46,105,110,111,147,164,165,175,215,],[58,-56,-57,93,109,-70,-67,-68,-69,58,93,195,195,]),'NOU':([7,8,9,10,28,52,56,57,59,80,171,172,191,192,193,197,200,201,206,208,209,210,211,212,213,216,217,218,],[-7,-8,-9,-10,81,-4,-5,-6,-11,-26,-39,-39,-30,-31,-34,-39,-39,-39,-35,-39,-39,-33,-39,-72,-73,-28,-29,-71,]),'COMMA':([12,13,14,15,16,17,22,23,30,32,33,34,36,37,38,41,54,55,76,82,83,85,86,87,89,91,92,101,103,105,108,113,114,116,117,118,119,120,121,122,123,124,125,128,129,138,145,146,147,156,158,174,179,180,183,],[-13,-14,-15,-16,-17,-18,-56,-57,-109,-105,-106,-45,-20,-21,-100,-12,-12,-12,-99,-107,-97,-99,-101,-103,-98,-101,-12,-48,146,-70,-12,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,-85,-86,-108,-104,-47,-49,-12,-69,-12,182,-46,-84,-19,-102,]),'RBRACK':([12,13,14,15,16,17,30,32,33,34,36,37,38,41,54,55,76,82,83,85,86,87,89,91,101,102,103,113,114,116,117,118,119,120,121,122,123,124,125,128,129,138,140,145,146,156,159,174,176,179,180,183,204,],[-13,-14,-15,-16,-17,-18,-109,-105,-106,-45,-20,-21,-100,101,-12,-12,-99,-107,-97,-99,-101,-103,-98,-101,-48,145,-50,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,-85,-86,-108,-104,-47,175,-49,-12,-12,183,-46,-51,-84,-19,-102,215,]),'AND':([12,13,14,15,16,17,30,32,33,34,35,36,37,38,54,55,73,74,76,77,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,124,125,128,129,131,136,138,145,153,156,174,175,179,180,183,202,],[-13,68,-15,-16,-17,-18,-109,-105,-106,-45,-101,-20,-21,-100,-12,-12,68,-98,-99,-101,-107,-97,-99,-101,-103,-98,-101,-48,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,68,68,-108,-104,68,-98,-47,-49,68,-12,-46,-102,-84,-19,-102,68,]),'OR':([12,13,14,15,16,17,30,32,33,34,35,36,37,38,54,55,73,74,76,77,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,124,125,128,129,131,136,138,145,153,156,174,175,179,180,183,202,],[-13,69,-15,-16,-17,-18,-109,-105,-106,-45,-101,-20,-21,-100,-12,-12,69,-98,-99,-101,-107,-97,-99,-101,-103,-98,-101,-48,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,69,69,-108,-104,69,-98,-47,-49,69,-12,-46,-102,-84,-19,-102,69,]),'QMARK':([12,13,14,15,16,17,30,32,33,34,35,36,37,38,54,55,73,74,76,77,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,124,125,128,129,131,136,138,145,153,156,174,175,179,180,183,202,],[-13,70,-15,-16,-17,-18,-109,-105,-106,-45,-101,-20,-21,-100,-12,-12,70,-98,-99,-101,-107,-97,-99,-101,-103,-98,-101,-48,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,70,70,-108,-104,70,-98,-47,-49,70,-12,-46,-102,-84,-19,-102,70,]),'RPAREN':([12,13,14,15,16,17,22,23,30,32,33,34,36,37,38,54,55,72,73,74,76,77,82,83,85,86,87,89,91,92,93,99,100,101,103,105,108,113,114,116,117,118,119,120,121,122,123,124,125,127,128,129,131,134,135,136,137,138,139,141,142,143,144,145,146,147,153,154,156,157,158,161,162,174,176,179,180,182,183,195,198,203,205,207,219,220,221,222,],[-13,-14,-15,-16,-17,-18,-56,-57,-109,-105,-106,-45,-20,-21,-100,-12,-12,128,129,-97,-99,-101,-107,-97,-99,-101,-103,-98,-101,138,-12,-62,-63,-48,-50,-70,-12,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,-85,-86,-66,-108,-104,160,128,128,-97,174,-47,-32,-58,-59,-60,-61,-49,-12,-69,178,179,-12,181,-64,185,186,-46,-51,-84,-19,-66,-102,-12,-65,-82,-83,-44,-74,-79,-80,-81,]),'COL':([12,13,14,15,16,17,22,23,30,32,33,34,36,37,38,54,55,70,76,82,83,85,86,87,89,91,101,105,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,128,129,138,145,147,156,164,166,174,179,180,183,],[-13,-14,-15,-16,-17,-18,-56,-57,-109,-105,-106,-45,-20,-21,-100,-12,-12,-12,-99,-107,-97,-99,-101,-103,-98,-101,-48,-70,-67,-68,-87,-92,-93,-94,-95,-96,-88,-89,-90,-91,-85,-86,156,-108,-104,-47,-49,-69,-12,188,190,-46,-84,-19,-102,]),'PLUS':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,120,121,122,123,128,134,135,136,140,141,142,143,144,159,175,183,204,],[60,-97,-109,-101,-99,-100,60,-97,-99,-101,-107,-97,-99,-101,60,-97,-101,-93,-94,-95,-96,60,60,60,60,-108,60,60,-97,60,60,60,60,60,60,-102,-102,60,]),'TIMES':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,120,121,122,123,128,134,135,136,140,141,142,143,144,159,175,183,204,],[62,-97,-109,-101,-99,-100,62,-97,-99,-101,-107,-97,-99,-101,62,-97,-101,62,62,-95,-96,62,62,62,62,-108,62,62,-97,62,62,62,62,62,62,-102,-102,62,]),'DIVIDE':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,120,121,122,123,128,134,135,136,140,141,142,143,144,159,175,183,204,],[63,-97,-109,-101,-99,-100,63,-97,-99,-101,-107,-97,-99,-101,63,-97,-101,63,63,-95,-96,63,63,63,63,-108,63,63,-97,63,63,63,63,63,63,-102,-102,63,]),'LEQ':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[64,-97,-109,-101,-99,-100,64,-97,-99,-101,-107,-97,-99,-101,64,-97,-101,-93,-94,-95,-96,-108,64,-97,-102,-102,]),'GEQ':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[65,-97,-109,-101,-99,-100,65,-97,-99,-101,-107,-97,-99,-101,65,-97,-101,-93,-94,-95,-96,-108,65,-97,-102,-102,]),'LT':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[66,-97,-109,-101,-99,-100,66,-97,-99,-101,-107,-97,-99,-101,66,-97,-101,-93,-94,-95,-96,-108,66,-97,-102,-102,]),'GT':([12,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[67,-97,-109,-101,-99,-100,67,-97,-99,-101,-107,-97,-99,-101,67,-97,-101,-93,-94,-95,-96,-108,67,-97,-102,-102,]),'PEQ':([35,165,],[95,95,]),'MEQ':([35,165,],[96,96,]),'TEQ':([35,165,],[97,97,]),'DEQ':([35,165,],[98,98,]),'PP':([35,165,],[99,99,]),'MM':([35,165,],[100,100,]),'HAREM':([42,47,48,112,],[104,-112,-113,104,]),'SQUIGGLY':([42,43,47,48,49,],[-111,106,-112,-113,-110,]),'LBRACE':([81,133,178,181,184,185,186,196,199,],[-37,173,-37,173,-37,173,173,173,173,]),'CHAN':([106,],[149,]),'KUN':([106,],[150,]),'SAN':([106,],[151,]),'SAMA':([106,],[152,]),'ISTUDIED':([160,],[184,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,2,51,173,194,],[2,51,51,194,51,]),'singleStatement':([0,2,51,133,173,194,196,],[3,3,3,172,3,3,209,]),'expr':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[4,4,75,75,103,4,113,114,115,75,75,126,75,75,103,139,75,103,155,4,103,180,4,75,4,207,4,]),'assignment':([0,2,51,133,173,194,196,],[5,5,5,5,5,5,5,]),'declaration':([0,2,51,127,132,133,173,182,194,196,],[6,6,6,158,164,6,6,158,6,6,]),'functionDeclaration':([0,2,51,133,173,194,196,],[7,7,7,7,7,7,7,]),'whileLoop':([0,2,51,133,173,194,196,],[8,8,8,8,8,8,8,]),'forLoop':([0,2,51,133,173,194,196,],[9,9,9,9,9,9,9,]),'conditional':([0,2,51,133,173,194,196,],[10,10,10,10,10,10,10,]),'returnStatement':([0,2,51,133,173,194,196,],[11,11,11,11,11,11,11,]),'numExpr':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[12,12,72,82,88,12,12,12,12,12,116,117,118,119,120,121,122,123,88,88,12,88,134,135,12,12,140,141,142,143,144,88,12,12,159,12,12,12,12,88,204,12,12,12,]),'boolExpr':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[13,13,73,87,13,13,13,13,13,124,125,13,131,73,13,13,153,13,13,13,13,13,13,202,13,13,13,]),'functionCall':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'arrayExpr':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'ternaryOp':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'reference':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[17,17,74,83,89,17,17,17,17,17,83,83,83,83,83,83,83,83,89,89,17,89,83,136,17,17,83,83,83,83,83,89,17,17,83,17,17,17,17,89,83,17,17,17,]),'reassign':([0,2,51,132,133,173,194,196,214,],[18,18,18,167,18,18,18,18,220,]),'initialize':([0,2,51,133,173,194,196,],[19,19,19,19,19,19,19,]),'arrayAssign':([0,2,51,132,133,173,194,196,214,],[20,20,20,169,20,20,20,20,221,]),'binOpAssign':([0,2,51,132,133,173,194,196,214,],[21,21,21,170,21,21,21,21,222,]),'arrayDeclaration':([0,2,50,51,127,132,133,173,182,194,196,],[22,22,110,22,22,22,22,22,22,22,22,]),'letDeclaration':([0,2,50,51,127,132,133,173,182,194,196,],[23,23,111,23,23,23,23,23,23,23,23,]),'newFn':([0,2,51,133,173,194,196,],[24,24,24,24,24,24,24,]),'if':([0,2,51,133,173,194,196,],[28,28,28,28,28,28,28,]),'printCall':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'arrayLiteral':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'letReference':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[37,37,76,85,76,37,37,37,37,37,85,85,85,85,85,85,85,85,76,76,37,76,85,76,37,37,85,85,85,85,85,76,37,37,85,37,37,37,37,76,85,37,37,37,]),'arrayReference':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'letInitialize':([0,2,51,132,133,173,194,196,],[39,39,39,168,39,39,39,39,]),'constInitialize':([0,2,51,133,173,194,196,],[40,40,40,40,40,40,40,]),'type':([0,2,50,51,127,132,133,173,182,194,196,],[42,42,112,42,112,112,42,42,112,42,42,]),'fnType':([0,2,51,133,173,194,196,],[43,43,43,43,43,43,43,]),'constDeclaration':([0,2,51,132,133,173,194,196,],[46,46,46,166,46,46,46,46,]),'newScope':([24,27,81,178,184,],[71,79,133,196,199,]),'else':([28,],[80,]),'exprLst':([41,92,108,146,],[102,137,154,176,]),'honorific':([106,],[148,]),'argumentDeclaration':([127,182,],[157,198,]),'forTrio':([132,],[161,]),'forElement':([132,],[162,]),'forAssign':([132,],[163,]),'enclosure':([133,181,185,186,196,199,],[171,197,200,201,208,211,]),'popScope':([171,172,197,200,201,208,209,211,],[191,192,210,212,213,216,217,218,]),'forReassign':([214,],[219,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',40),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',45),
  ('statements -> statements statements','statements',2,'p_statements','parser.py',46),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',52),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',53),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',54),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',55),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',56),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',57),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',58),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',59),
  ('expr -> <empty>','expr',0,'p_expr','parser.py',65),
  ('expr -> numExpr','expr',1,'p_expr','parser.py',66),
  ('expr -> boolExpr','expr',1,'p_expr','parser.py',67),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',68),
  ('expr -> arrayExpr','expr',1,'p_expr','parser.py',69),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',70),
  ('expr -> reference','expr',1,'p_expr','parser.py',71),
  ('ternaryOp -> boolExpr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',78),
  ('arrayExpr -> arrayLiteral','arrayExpr',1,'p_arrayExpr','parser.py',87),
  ('arrayExpr -> letReference','arrayExpr',1,'p_arrayExpr','parser.py',88),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',94),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',95),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',96),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',97),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',103),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',104),
  ('if -> NANI LPAREN boolExpr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',110),
  ('if -> NANI LPAREN boolExpr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',111),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',117),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',118),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',124),
  ('functionDeclaration -> newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',7,'p_functionDeclaration','parser.py',143),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',153),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',154),
  ('newFn -> fnType SQUIGGLY honorific ID','newFn',4,'p_newFn','parser.py',160),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',167),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',175),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',182),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',190),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',191),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',192),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',193),
  ('arrayAssign -> ID LBRACK numExpr RBRACK EQ expr','arrayAssign',6,'p_arrayAssign','parser.py',199),
  ('functionCall -> printCall','functionCall',1,'p_functionCall','parser.py',214),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',215),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',216),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',235),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',236),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',247),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',248),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',257),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',258),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',265),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',278),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',290),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',291),
  ('binOpAssign -> ID PEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',298),
  ('binOpAssign -> ID MEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',299),
  ('binOpAssign -> ID TEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',300),
  ('binOpAssign -> ID DEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',301),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',302),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',303),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',336),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',337),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',338),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',350),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',351),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',359),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',368),
  ('whileLoop -> WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',375),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',382),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',383),
  ('forTrio -> forAssign SEMICOL boolExpr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',389),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',395),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',396),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',397),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',398),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',404),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',405),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',406),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',412),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',413),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',420),
  ('boolExpr -> boolExpr AND boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',427),
  ('boolExpr -> boolExpr OR boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',428),
  ('boolExpr -> expr NEQ expr','boolExpr',3,'p_boolExpr_op','parser.py',429),
  ('boolExpr -> numExpr LEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',430),
  ('boolExpr -> numExpr GEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',431),
  ('boolExpr -> numExpr LT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',432),
  ('boolExpr -> numExpr GT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',433),
  ('boolExpr -> expr EQOP expr','boolExpr',3,'p_boolExpr_op','parser.py',434),
  ('numExpr -> numExpr PLUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',455),
  ('numExpr -> numExpr MINUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',456),
  ('numExpr -> numExpr TIMES numExpr','numExpr',3,'p_numExpr_binop','parser.py',457),
  ('numExpr -> numExpr DIVIDE numExpr','numExpr',3,'p_numExpr_binop','parser.py',458),
  ('numExpr -> reference','numExpr',1,'p_numExpr_reference','parser.py',475),
  ('boolExpr -> reference','boolExpr',1,'p_boolExpr_reference','parser.py',480),
  ('reference -> letReference','reference',1,'p_reference','parser.py',485),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',486),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',492),
  ('arrayReference -> ID LBRACK numExpr RBRACK','arrayReference',4,'p_arrayReference','parser.py',509),
  ('boolExpr -> NOT boolExpr','boolExpr',2,'p_boolExprNeg','parser.py',524),
  ('boolExpr -> LPAREN boolExpr RPAREN','boolExpr',3,'p_boolExpr_group','parser.py',532),
  ('boolExpr -> OWO','boolExpr',1,'p_bool','parser.py',539),
  ('boolExpr -> UWU','boolExpr',1,'p_bool','parser.py',540),
  ('numExpr -> MINUS numExpr','numExpr',2,'p_numExpr_uminus','parser.py',546),
  ('numExpr -> LPAREN numExpr RPAREN','numExpr',3,'p_numExpr_group','parser.py',552),
  ('numExpr -> NUMBER','numExpr',1,'p_numExpr_number','parser.py',558),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',563),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',564),
  ('type -> WAIFU','type',1,'p_type','parser.py',570),
  ('type -> CATGIRL','type',1,'p_type','parser.py',571),
]
