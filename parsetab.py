
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEQGTGEQEQOPNEQleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTAND BAKA CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM ID ISTUDIED KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MULTID NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SHI SQUIGGLY TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : \n             | numExpr\n             | boolExpr\n             | functionCall\n             | arrayExpr\n             | ternaryOp\n             | reference \n\n     ternaryOp : boolExpr QMARK expr COL expr\n    arrayExpr : arrayLiteral\n                 | letReference\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     conditional : if else\n                    | if\n     if : NANI LPAREN boolExpr RPAREN newScope enclosure popScope\n           | NANI LPAREN boolExpr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    newFn : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : ID LBRACK numExpr RBRACK EQ expr\n     functionCall : printCall\n                     | ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n     binOpAssign : ID PEQ numExpr\n                    | ID MEQ numExpr\n                    | ID TEQ numExpr\n                    | ID DEQ numExpr\n                    | ID PP\n                    | ID MM\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL boolExpr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN boolExpr : boolExpr AND boolExpr\n                 | boolExpr OR boolExpr\n                 | expr NEQ expr\n                 | numExpr LEQ numExpr\n                 | numExpr GEQ numExpr\n                 | numExpr LT numExpr\n                 | numExpr GT numExpr\n                 | expr EQOP expr\n    numExpr : numExpr PLUS numExpr\n               | numExpr MINUS numExpr\n               | numExpr TIMES numExpr\n               | numExpr DIVIDE numExprnumExpr : referenceboolExpr : referencereference : letReference\n                 | arrayReference\n    letReference : ID\n     arrayReference : ID LBRACK numExpr RBRACK boolExpr : NOT boolExprboolExpr : LPAREN boolExpr RPAREN\n     boolExpr : OWO\n                 | UWU\n    numExpr : MINUS numExpr %prec UMINUSnumExpr : LPAREN numExpr RPARENnumExpr : NUMBER fnType : YOKAI\n               | type\n    type : WAIFU\n            | CATGIRL\n    empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,9,10,11,12,30,53,54,58,59,61,82,173,174,193,194,195,199,202,203,208,210,211,212,213,214,215,218,219,220,],[-116,0,-1,-2,-3,-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-41,-41,-32,-33,-36,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'SEMICOL':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,30,32,34,35,36,37,38,39,40,41,42,53,54,55,56,57,58,59,60,61,78,82,83,84,85,87,88,89,91,93,95,101,102,103,107,111,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,135,140,141,143,144,145,146,147,149,157,158,165,169,170,171,172,173,174,175,176,177,180,181,182,185,193,194,195,196,197,198,199,202,203,204,208,209,210,211,212,213,214,215,218,219,220,],[-14,-14,-5,54,58,59,-9,-10,-11,-12,61,-15,-16,-17,-18,-19,-20,-24,-25,-26,-27,-58,-59,-29,-111,-107,-108,-47,-103,-22,-23,-102,-54,-55,-4,-6,-40,-14,-14,-7,-8,-14,-13,-101,-28,-39,-109,-99,-101,-103,-105,-100,-103,-14,-64,-65,-50,-72,-14,-89,-94,-56,-95,-96,-97,-98,-90,-91,-92,-93,-87,-88,-110,-106,-14,-49,-34,-60,-61,-62,-63,-51,-71,-57,-14,189,-77,-78,-79,-80,-41,-41,-14,-48,-104,-39,-86,-21,-104,-32,-33,-36,-14,-14,-14,-41,-41,-41,216,-37,-46,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'DESU':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,30,32,34,35,36,37,38,39,40,53,54,56,57,58,59,61,78,82,83,84,85,87,88,89,91,93,103,115,116,118,119,120,121,122,123,124,125,126,127,130,131,135,140,147,158,173,174,175,176,177,180,181,182,185,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[-14,-14,-5,55,-9,-10,-11,-12,-15,-16,-17,-18,-19,-20,-29,-111,-107,-108,-47,-103,-22,-23,-102,-4,-6,-14,-14,-7,-8,-13,-101,-28,-39,-109,-99,-101,-103,-105,-100,-103,-50,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,-87,-88,-110,-106,-14,-49,-51,-14,-41,-41,-14,-48,-104,-39,-86,-21,-104,-32,-33,-36,-14,-14,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'NEQ':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,27,30,32,33,34,35,36,37,38,39,40,43,53,54,56,57,58,59,60,61,70,71,72,74,75,76,77,78,79,80,82,83,84,85,87,88,89,90,91,92,93,94,95,103,105,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,133,135,137,138,140,141,147,148,155,157,158,173,174,175,176,177,180,181,182,185,189,193,194,195,196,197,198,199,202,203,204,208,209,210,211,212,213,214,215,218,219,220,],[-14,-14,-5,56,-9,-10,-11,-12,-15,-16,-17,-18,-19,-20,-14,-29,-111,-14,-107,-108,-47,-103,-22,-23,-102,-14,-4,-6,-14,-14,-7,-8,-14,-13,-14,-14,-14,-15,-16,-20,56,-23,-103,-14,-28,-39,-109,-99,-101,-103,-16,-15,-20,-14,-103,-14,-14,-50,56,-14,-14,-14,-89,-94,56,-95,-96,-97,-98,-90,-91,-92,-93,-16,-16,56,-110,-106,-16,-14,-15,-20,-49,56,-51,-14,-16,56,-14,-41,-41,-14,-48,-104,-39,-86,56,-104,-14,-32,-33,-36,-14,-14,-14,-41,-41,-41,-16,-37,56,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'EQOP':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,27,30,32,33,34,35,36,37,38,39,40,43,53,54,56,57,58,59,60,61,70,71,72,74,75,76,77,78,79,80,82,83,84,85,87,88,89,90,91,92,93,94,95,103,105,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,133,135,137,138,140,141,147,148,155,157,158,173,174,175,176,177,180,181,182,185,189,193,194,195,196,197,198,199,202,203,204,208,209,210,211,212,213,214,215,218,219,220,],[-14,-14,-5,57,-9,-10,-11,-12,-15,-16,-17,-18,-19,-20,-14,-29,-111,-14,-107,-108,-47,-103,-22,-23,-102,-14,-4,-6,-14,-14,-7,-8,-14,-13,-14,-14,-14,-15,-16,-20,57,-23,-103,-14,-28,-39,-109,-99,-101,-103,-16,-15,-20,-14,-103,-14,-14,-50,57,-14,-14,-14,-89,-94,57,-95,-96,-97,-98,-90,-91,-92,-93,-16,-16,57,-110,-106,-16,-14,-15,-20,-49,57,-51,-14,-16,57,-14,-41,-41,-14,-48,-104,-39,-86,57,-104,-14,-32,-33,-36,-14,-14,-14,-41,-41,-41,-16,-37,57,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'WHILEU':([0,3,5,9,10,11,12,30,53,54,58,59,61,82,83,135,173,174,175,180,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[28,28,-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-39,28,-41,-41,28,-39,-32,-33,-36,28,28,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'SHI':([0,3,5,9,10,11,12,30,53,54,58,59,61,82,83,135,173,174,175,180,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[29,29,-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-39,29,-41,-41,29,-39,-32,-33,-36,29,29,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'MINUS':([0,3,5,9,10,11,12,14,19,27,30,31,32,33,37,39,40,43,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,76,78,79,80,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,109,110,111,118,119,120,121,122,123,124,125,130,132,135,136,137,138,142,143,144,145,146,148,158,161,173,174,175,177,180,185,189,191,193,194,195,196,197,198,199,202,203,206,208,210,211,212,213,214,215,218,219,220,],[31,31,-5,-9,-10,-11,-12,63,-99,31,-29,31,-111,31,-103,-101,-102,31,-4,-6,31,31,-7,-8,31,-13,31,31,31,31,31,31,31,31,31,31,31,63,-99,-101,-103,31,-28,-39,-109,-99,31,-101,-103,63,-99,31,-103,31,31,31,31,31,31,31,31,31,31,-95,-96,-97,-98,63,63,63,63,-110,31,31,63,63,-99,63,63,63,63,63,31,31,63,-41,-41,31,-104,-39,-104,31,31,-32,-33,-36,31,31,31,-41,-41,-41,63,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'LPAREN':([0,3,5,9,10,11,12,26,27,28,29,30,31,33,37,43,46,47,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,79,80,81,82,83,86,92,93,94,95,96,97,98,99,100,109,110,111,132,135,148,158,173,174,175,179,180,189,191,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[27,27,-5,-9,-10,-11,-12,-39,27,80,-39,-29,86,92,94,27,109,110,-4,-6,27,27,-7,-8,27,-13,86,86,86,86,86,86,86,86,92,92,27,129,94,92,134,-28,-39,86,92,94,27,27,86,86,86,86,86,92,27,27,86,27,27,27,-41,-41,27,-38,-39,92,86,-32,-33,-36,27,27,27,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'NUMBER':([0,3,5,9,10,11,12,27,30,31,33,43,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,82,83,86,92,94,95,96,97,98,99,100,109,110,111,132,135,148,158,173,174,175,180,189,191,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[32,32,-5,-9,-10,-11,-12,32,-29,32,32,32,-4,-6,32,32,-7,-8,32,-13,32,32,32,32,32,32,32,32,32,32,32,32,-28,-39,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-41,-41,32,-39,32,32,-32,-33,-36,32,32,32,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'NOT':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,70,71,72,80,82,83,92,94,95,109,110,111,135,148,158,173,174,175,180,189,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[33,33,-5,-9,-10,-11,-12,33,-29,33,33,-4,-6,33,33,-7,-8,33,-13,33,33,33,33,-28,-39,33,33,33,33,33,33,33,33,33,-41,-41,33,-39,33,-32,-33,-36,33,33,33,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'OWO':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,70,71,72,80,82,83,92,94,95,109,110,111,135,148,158,173,174,175,180,189,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[34,34,-5,-9,-10,-11,-12,34,-29,34,34,-4,-6,34,34,-7,-8,34,-13,34,34,34,34,-28,-39,34,34,34,34,34,34,34,34,34,-41,-41,34,-39,34,-32,-33,-36,34,34,34,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'UWU':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,70,71,72,80,82,83,92,94,95,109,110,111,135,148,158,173,174,175,180,189,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[35,35,-5,-9,-10,-11,-12,35,-29,35,35,-4,-6,35,35,-7,-8,35,-13,35,35,35,35,-28,-39,35,35,35,35,35,35,35,35,35,-41,-41,35,-39,35,-32,-33,-36,35,35,35,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'ID':([0,3,5,9,10,11,12,27,30,31,33,43,44,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,82,83,86,92,94,95,96,97,98,99,100,106,109,110,111,114,132,134,135,148,150,151,152,153,154,158,173,174,175,180,189,190,191,192,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,216,218,219,220,],[37,37,-5,-9,-10,-11,-12,79,-29,88,93,93,107,-114,-115,-4,-6,93,93,-7,-8,93,-13,88,88,88,88,88,88,88,88,93,93,93,93,-28,-39,88,93,93,93,88,88,88,88,88,149,93,93,93,107,88,167,37,93,179,-42,-43,-44,-45,93,-41,-41,37,-39,93,205,88,207,-32,-33,-36,37,93,37,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,167,-30,-31,-73,]),'NANI':([0,3,5,9,10,11,12,30,53,54,58,59,61,82,83,135,173,174,175,180,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[46,46,-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-39,46,-41,-41,46,-39,-32,-33,-36,46,46,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'BAKA':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,70,71,72,80,82,83,92,94,95,109,110,111,135,148,158,173,174,175,180,189,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[47,47,-5,-9,-10,-11,-12,47,-29,47,47,-4,-6,47,47,-7,-8,47,-13,47,47,47,47,-28,-39,47,47,47,47,47,47,47,47,47,-41,-41,47,-39,47,-32,-33,-36,47,47,47,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'LBRACK':([0,3,5,9,10,11,12,27,30,33,37,43,53,54,56,57,58,59,60,61,70,71,72,79,80,82,83,88,92,93,94,95,109,110,111,135,148,158,167,173,174,175,180,189,193,194,195,196,197,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[43,43,-5,-9,-10,-11,-12,43,-29,43,96,43,-4,-6,43,43,-7,-8,43,-13,43,43,43,132,43,-28,-39,132,43,132,43,43,43,43,43,43,43,43,191,-41,-41,43,-39,43,-32,-33,-36,43,43,43,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'WAIFU':([0,3,5,9,10,11,12,30,52,53,54,58,59,61,82,83,129,134,135,173,174,175,180,184,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[49,49,-5,-9,-10,-11,-12,-29,49,-4,-6,-7,-8,-13,-28,-39,49,49,49,-41,-41,49,-39,49,-32,-33,-36,49,49,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'CATGIRL':([0,3,5,9,10,11,12,30,52,53,54,58,59,61,82,83,129,134,135,173,174,175,180,184,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[50,50,-5,-9,-10,-11,-12,-29,50,-4,-6,-7,-8,-13,-28,-39,50,50,50,-41,-41,50,-39,50,-32,-33,-36,50,50,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'YOKAI':([0,3,5,9,10,11,12,30,53,54,58,59,61,82,83,135,173,174,175,180,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[51,51,-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-39,51,-41,-41,51,-39,-32,-33,-36,51,51,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'REAL':([0,3,5,9,10,11,12,30,53,54,58,59,61,82,83,134,135,173,174,175,180,193,194,195,196,198,199,202,203,208,210,211,212,213,214,215,218,219,220,],[52,52,-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-39,52,52,-41,-41,52,-39,-32,-33,-36,52,52,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'RBRACE':([5,9,10,11,12,30,53,54,58,59,61,82,173,174,175,193,194,195,196,199,202,203,208,210,211,212,213,214,215,218,219,220,],[-5,-9,-10,-11,-12,-29,-4,-6,-7,-8,-13,-28,-41,-41,195,-32,-33,-36,208,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'EQ':([8,24,25,37,48,107,112,113,149,166,167,177,217,],[60,-58,-59,95,111,-72,-69,-70,-71,60,95,197,197,]),'NOU':([9,10,11,12,30,54,58,59,61,82,173,174,193,194,195,199,202,203,208,210,211,212,213,214,215,218,219,220,],[-9,-10,-11,-12,83,-6,-7,-8,-13,-28,-41,-41,-32,-33,-36,-41,-41,-41,-37,-41,-41,-35,-41,-74,-75,-30,-31,-73,]),'COMMA':([14,15,16,17,18,19,24,25,32,34,35,36,38,39,40,43,56,57,78,84,85,87,88,89,91,93,94,103,105,107,110,115,116,118,119,120,121,122,123,124,125,126,127,130,131,140,147,148,149,158,160,176,181,182,185,],[-15,-16,-17,-18,-19,-20,-58,-59,-111,-107,-108,-47,-22,-23,-102,-14,-14,-14,-101,-109,-99,-101,-103,-105,-100,-103,-14,-50,148,-72,-14,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,-87,-88,-110,-106,-49,-51,-14,-71,-14,184,-48,-86,-21,-104,]),'RBRACK':([14,15,16,17,18,19,32,34,35,36,38,39,40,43,56,57,78,84,85,87,88,89,91,93,103,104,105,115,116,118,119,120,121,122,123,124,125,126,127,130,131,140,142,147,148,158,161,176,178,181,182,185,206,],[-15,-16,-17,-18,-19,-20,-111,-107,-108,-47,-22,-23,-102,103,-14,-14,-101,-109,-99,-101,-103,-105,-100,-103,-50,147,-52,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,-87,-88,-110,-106,-49,177,-51,-14,-14,185,-48,-53,-86,-21,-104,217,]),'AND':([14,15,16,17,18,19,32,34,35,36,37,38,39,40,56,57,75,76,78,79,84,85,87,88,89,91,93,103,115,116,118,119,120,121,122,123,124,125,126,127,130,131,133,138,140,147,155,158,176,177,181,182,185,204,],[-15,70,-17,-18,-19,-20,-111,-107,-108,-47,-103,-22,-23,-102,-14,-14,70,-100,-101,-103,-109,-99,-101,-103,-105,-100,-103,-50,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,70,70,-110,-106,70,-100,-49,-51,70,-14,-48,-104,-86,-21,-104,70,]),'OR':([14,15,16,17,18,19,32,34,35,36,37,38,39,40,56,57,75,76,78,79,84,85,87,88,89,91,93,103,115,116,118,119,120,121,122,123,124,125,126,127,130,131,133,138,140,147,155,158,176,177,181,182,185,204,],[-15,71,-17,-18,-19,-20,-111,-107,-108,-47,-103,-22,-23,-102,-14,-14,71,-100,-101,-103,-109,-99,-101,-103,-105,-100,-103,-50,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,71,71,-110,-106,71,-100,-49,-51,71,-14,-48,-104,-86,-21,-104,71,]),'QMARK':([14,15,16,17,18,19,32,34,35,36,37,38,39,40,56,57,75,76,78,79,84,85,87,88,89,91,93,103,115,116,118,119,120,121,122,123,124,125,126,127,130,131,133,138,140,147,155,158,176,177,181,182,185,204,],[-15,72,-17,-18,-19,-20,-111,-107,-108,-47,-103,-22,-23,-102,-14,-14,72,-100,-101,-103,-109,-99,-101,-103,-105,-100,-103,-50,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,72,72,-110,-106,72,-100,-49,-51,72,-14,-48,-104,-86,-21,-104,72,]),'RPAREN':([14,15,16,17,18,19,24,25,32,34,35,36,38,39,40,56,57,74,75,76,78,79,84,85,87,88,89,91,93,94,95,101,102,103,105,107,110,115,116,118,119,120,121,122,123,124,125,126,127,129,130,131,133,136,137,138,139,140,141,143,144,145,146,147,148,149,155,156,158,159,160,163,164,176,178,181,182,184,185,197,200,205,207,209,221,222,223,224,],[-15,-16,-17,-18,-19,-20,-58,-59,-111,-107,-108,-47,-22,-23,-102,-14,-14,130,131,-99,-101,-103,-109,-99,-101,-103,-105,-100,-103,140,-14,-64,-65,-50,-52,-72,-14,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,-87,-88,-68,-110,-106,162,130,130,-99,176,-49,-34,-60,-61,-62,-63,-51,-14,-71,180,181,-14,183,-66,187,188,-48,-53,-86,-21,-68,-104,-14,-67,-84,-85,-46,-76,-81,-82,-83,]),'COL':([14,15,16,17,18,19,24,25,32,34,35,36,38,39,40,56,57,72,78,84,85,87,88,89,91,93,103,107,112,113,115,116,118,119,120,121,122,123,124,125,126,127,128,130,131,140,147,149,158,166,168,176,181,182,185,],[-15,-16,-17,-18,-19,-20,-58,-59,-111,-107,-108,-47,-22,-23,-102,-14,-14,-14,-101,-109,-99,-101,-103,-105,-100,-103,-50,-72,-69,-70,-89,-94,-95,-96,-97,-98,-90,-91,-92,-93,-87,-88,158,-110,-106,-49,-51,-71,-14,190,192,-48,-86,-21,-104,]),'PLUS':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,122,123,124,125,130,136,137,138,142,143,144,145,146,161,177,185,206,],[62,-99,-111,-103,-101,-102,62,-99,-101,-103,-109,-99,-101,-103,62,-99,-103,-95,-96,-97,-98,62,62,62,62,-110,62,62,-99,62,62,62,62,62,62,-104,-104,62,]),'TIMES':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,122,123,124,125,130,136,137,138,142,143,144,145,146,161,177,185,206,],[64,-99,-111,-103,-101,-102,64,-99,-101,-103,-109,-99,-101,-103,64,-99,-103,64,64,-97,-98,64,64,64,64,-110,64,64,-99,64,64,64,64,64,64,-104,-104,64,]),'DIVIDE':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,122,123,124,125,130,136,137,138,142,143,144,145,146,161,177,185,206,],[65,-99,-111,-103,-101,-102,65,-99,-101,-103,-109,-99,-101,-103,65,-99,-103,65,65,-97,-98,65,65,65,65,-110,65,65,-99,65,65,65,65,65,65,-104,-104,65,]),'LEQ':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,130,137,138,177,185,],[66,-99,-111,-103,-101,-102,66,-99,-101,-103,-109,-99,-101,-103,66,-99,-103,-95,-96,-97,-98,-110,66,-99,-104,-104,]),'GEQ':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,130,137,138,177,185,],[67,-99,-111,-103,-101,-102,67,-99,-101,-103,-109,-99,-101,-103,67,-99,-103,-95,-96,-97,-98,-110,67,-99,-104,-104,]),'LT':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,130,137,138,177,185,],[68,-99,-111,-103,-101,-102,68,-99,-101,-103,-109,-99,-101,-103,68,-99,-103,-95,-96,-97,-98,-110,68,-99,-104,-104,]),'GT':([14,19,32,37,39,40,74,76,78,79,84,85,87,88,90,91,93,118,119,120,121,130,137,138,177,185,],[69,-99,-111,-103,-101,-102,69,-99,-101,-103,-109,-99,-101,-103,69,-99,-103,-95,-96,-97,-98,-110,69,-99,-104,-104,]),'PEQ':([37,167,],[97,97,]),'MEQ':([37,167,],[98,98,]),'TEQ':([37,167,],[99,99,]),'DEQ':([37,167,],[100,100,]),'PP':([37,167,],[101,101,]),'MM':([37,167,],[102,102,]),'HAREM':([44,49,50,114,],[106,-114,-115,106,]),'SQUIGGLY':([44,45,49,50,51,],[-113,108,-114,-115,-112,]),'LBRACE':([83,135,180,183,186,187,188,198,201,],[-39,175,-39,175,-39,175,175,175,175,]),'CHAN':([108,],[151,]),'KUN':([108,],[152,]),'SAN':([108,],[153,]),'SAMA':([108,],[154,]),'ISTUDIED':([162,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,175,],[3,196,]),'empty':([0,],[4,]),'singleStatement':([0,3,135,175,196,198,],[5,53,174,5,53,211,]),'expr':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[6,6,77,77,105,115,116,117,77,77,128,77,77,105,141,77,105,157,6,105,182,6,77,6,209,6,]),'assignment':([0,3,135,175,196,198,],[7,7,7,7,7,7,]),'declaration':([0,3,129,134,135,175,184,196,198,],[8,8,160,166,8,8,160,8,8,]),'functionDeclaration':([0,3,135,175,196,198,],[9,9,9,9,9,9,]),'whileLoop':([0,3,135,175,196,198,],[10,10,10,10,10,10,]),'forLoop':([0,3,135,175,196,198,],[11,11,11,11,11,11,]),'conditional':([0,3,135,175,196,198,],[12,12,12,12,12,12,]),'returnStatement':([0,3,135,175,196,198,],[13,13,13,13,13,13,]),'numExpr':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,80,86,92,94,95,96,97,98,99,100,109,110,111,132,135,148,158,175,189,191,196,197,198,],[14,14,74,84,90,14,14,14,14,118,119,120,121,122,123,124,125,90,90,14,90,136,137,14,14,142,143,144,145,146,90,14,14,161,14,14,14,14,90,206,14,14,14,]),'boolExpr':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[15,15,75,89,15,15,15,15,126,127,15,133,75,15,15,155,15,15,15,15,15,15,204,15,15,15,]),'functionCall':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'arrayExpr':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ternaryOp':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'reference':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,80,86,92,94,95,96,97,98,99,100,109,110,111,132,135,148,158,175,189,191,196,197,198,],[19,19,76,85,91,19,19,19,19,85,85,85,85,85,85,85,85,91,91,19,91,85,138,19,19,85,85,85,85,85,91,19,19,85,19,19,19,19,91,85,19,19,19,]),'reassign':([0,3,134,135,175,196,198,216,],[20,20,169,20,20,20,20,222,]),'initialize':([0,3,135,175,196,198,],[21,21,21,21,21,21,]),'arrayAssign':([0,3,134,135,175,196,198,216,],[22,22,171,22,22,22,22,223,]),'binOpAssign':([0,3,134,135,175,196,198,216,],[23,23,172,23,23,23,23,224,]),'arrayDeclaration':([0,3,52,129,134,135,175,184,196,198,],[24,24,112,24,24,24,24,24,24,24,]),'letDeclaration':([0,3,52,129,134,135,175,184,196,198,],[25,25,113,25,25,25,25,25,25,25,]),'newFn':([0,3,135,175,196,198,],[26,26,26,26,26,26,]),'if':([0,3,135,175,196,198,],[30,30,30,30,30,30,]),'printCall':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'arrayLiteral':([0,3,27,33,43,56,57,60,70,71,72,80,92,94,95,109,110,111,135,148,158,175,189,196,197,198,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'letReference':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,80,86,92,94,95,96,97,98,99,100,109,110,111,132,135,148,158,175,189,191,196,197,198,],[39,39,78,87,78,39,39,39,39,87,87,87,87,87,87,87,87,78,78,39,78,87,78,39,39,87,87,87,87,87,78,39,39,87,39,39,39,39,78,87,39,39,39,]),'arrayReference':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,80,86,92,94,95,96,97,98,99,100,109,110,111,132,135,148,158,175,189,191,196,197,198,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'letInitialize':([0,3,134,135,175,196,198,],[41,41,170,41,41,41,41,]),'constInitialize':([0,3,135,175,196,198,],[42,42,42,42,42,42,]),'type':([0,3,52,129,134,135,175,184,196,198,],[44,44,114,114,114,44,44,114,44,44,]),'fnType':([0,3,135,175,196,198,],[45,45,45,45,45,45,]),'constDeclaration':([0,3,134,135,175,196,198,],[48,48,168,48,48,48,48,]),'newScope':([26,29,83,180,186,],[73,81,135,198,201,]),'else':([30,],[82,]),'exprLst':([43,94,110,148,],[104,139,156,178,]),'honorific':([108,],[150,]),'argumentDeclaration':([129,184,],[159,200,]),'forTrio':([134,],[163,]),'forElement':([134,],[164,]),'forAssign':([134,],[165,]),'enclosure':([135,183,187,188,198,201,],[173,199,202,203,210,213,]),'popScope':([173,174,199,202,203,210,211,213,],[193,194,212,214,215,218,219,220,]),'forReassign':([216,],[221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',40),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',44),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',45),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',50),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',51),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',57),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',58),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',59),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',60),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',61),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',62),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',63),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',64),
  ('expr -> <empty>','expr',0,'p_expr','parser.py',70),
  ('expr -> numExpr','expr',1,'p_expr','parser.py',71),
  ('expr -> boolExpr','expr',1,'p_expr','parser.py',72),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',73),
  ('expr -> arrayExpr','expr',1,'p_expr','parser.py',74),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',75),
  ('expr -> reference','expr',1,'p_expr','parser.py',76),
  ('ternaryOp -> boolExpr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',83),
  ('arrayExpr -> arrayLiteral','arrayExpr',1,'p_arrayExpr','parser.py',92),
  ('arrayExpr -> letReference','arrayExpr',1,'p_arrayExpr','parser.py',93),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',99),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',100),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',101),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',102),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',108),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',109),
  ('if -> NANI LPAREN boolExpr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',115),
  ('if -> NANI LPAREN boolExpr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',116),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',122),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',123),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',129),
  ('functionDeclaration -> newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',7,'p_functionDeclaration','parser.py',148),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',158),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',159),
  ('newFn -> fnType SQUIGGLY honorific ID','newFn',4,'p_newFn','parser.py',165),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',172),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',180),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',187),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',195),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',196),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',197),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',198),
  ('arrayAssign -> ID LBRACK numExpr RBRACK EQ expr','arrayAssign',6,'p_arrayAssign','parser.py',204),
  ('functionCall -> printCall','functionCall',1,'p_functionCall','parser.py',219),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',220),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',221),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',240),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',241),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',252),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',253),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',262),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',263),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',269),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',282),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',294),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',295),
  ('binOpAssign -> ID PEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',302),
  ('binOpAssign -> ID MEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',303),
  ('binOpAssign -> ID TEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',304),
  ('binOpAssign -> ID DEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',305),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',306),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',307),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',331),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',332),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',333),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',345),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',346),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',354),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',363),
  ('whileLoop -> WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',370),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',377),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',378),
  ('forTrio -> forAssign SEMICOL boolExpr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',384),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',390),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',391),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',392),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',393),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',399),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',400),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',401),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',407),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',408),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',415),
  ('boolExpr -> boolExpr AND boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',422),
  ('boolExpr -> boolExpr OR boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',423),
  ('boolExpr -> expr NEQ expr','boolExpr',3,'p_boolExpr_op','parser.py',424),
  ('boolExpr -> numExpr LEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',425),
  ('boolExpr -> numExpr GEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',426),
  ('boolExpr -> numExpr LT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',427),
  ('boolExpr -> numExpr GT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',428),
  ('boolExpr -> expr EQOP expr','boolExpr',3,'p_boolExpr_op','parser.py',429),
  ('numExpr -> numExpr PLUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',450),
  ('numExpr -> numExpr MINUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',451),
  ('numExpr -> numExpr TIMES numExpr','numExpr',3,'p_numExpr_binop','parser.py',452),
  ('numExpr -> numExpr DIVIDE numExpr','numExpr',3,'p_numExpr_binop','parser.py',453),
  ('numExpr -> reference','numExpr',1,'p_numExpr_reference','parser.py',474),
  ('boolExpr -> reference','boolExpr',1,'p_boolExpr_reference','parser.py',479),
  ('reference -> letReference','reference',1,'p_reference','parser.py',484),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',485),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',491),
  ('arrayReference -> ID LBRACK numExpr RBRACK','arrayReference',4,'p_arrayReference','parser.py',508),
  ('boolExpr -> NOT boolExpr','boolExpr',2,'p_boolExprNeg','parser.py',523),
  ('boolExpr -> LPAREN boolExpr RPAREN','boolExpr',3,'p_boolExpr_group','parser.py',531),
  ('boolExpr -> OWO','boolExpr',1,'p_bool','parser.py',538),
  ('boolExpr -> UWU','boolExpr',1,'p_bool','parser.py',539),
  ('numExpr -> MINUS numExpr','numExpr',2,'p_numExpr_uminus','parser.py',545),
  ('numExpr -> LPAREN numExpr RPAREN','numExpr',3,'p_numExpr_group','parser.py',551),
  ('numExpr -> NUMBER','numExpr',1,'p_numExpr_number','parser.py',557),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',562),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',563),
  ('type -> WAIFU','type',1,'p_type','parser.py',569),
  ('type -> CATGIRL','type',1,'p_type','parser.py',570),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',575),
]
