
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTLEQGTGEQEQOPNEQleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTAND BAKA CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM ID ISTUDIED KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MOD MULTID NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS POW PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SHI SQUIGGLY TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : numExpr\n             | boolExpr\n             | functionCall\n             | arrayExpr\n             | ternaryOp\n             | reference \n\n     ternaryOp : boolExpr QMARK expr COL expr\n    arrayExpr : arrayLiteral\n                 | letReference\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     conditional : if else\n                    | if\n     if : NANI LPAREN boolExpr RPAREN newScope enclosure popScope\n           | NANI LPAREN boolExpr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    newFn : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : ID LBRACK numExpr RBRACK EQ expr\n     functionCall : printCall\n                     | ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n     binOpAssign : ID PEQ numExpr\n                    | ID MEQ numExpr\n                    | ID TEQ numExpr\n                    | ID DEQ numExpr\n                    | ID PP\n                    | ID MM\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL boolExpr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN boolExpr : boolExpr AND boolExpr\n                 | boolExpr OR boolExpr\n                 | expr NEQ expr\n                 | numExpr LEQ numExpr\n                 | numExpr GEQ numExpr\n                 | numExpr LT numExpr\n                 | numExpr GT numExpr\n                 | expr EQOP expr\n    numExpr : numExpr PLUS numExpr\n               | numExpr MINUS numExpr\n               | numExpr TIMES numExpr\n               | numExpr DIVIDE numExpr\n               | numExpr MOD numExpr\n               | numExpr POW numExprnumExpr : referenceboolExpr : referencereference : letReference\n                 | arrayReference\n    letReference : ID\n     arrayReference : ID LBRACK numExpr RBRACK boolExpr : NOT boolExprboolExpr : LPAREN boolExpr RPAREN\n     boolExpr : OWO\n                 | UWU\n    numExpr : MINUS numExpr %prec UMINUSnumExpr : LPAREN numExpr RPARENnumExpr : NUMBER fnType : YOKAI\n               | type\n    type : WAIFU\n            | CATGIRL\n    empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,9,10,11,12,30,53,54,58,59,61,84,177,178,197,198,199,203,206,207,212,214,215,216,217,218,219,222,223,224,],[-117,0,-1,-2,-3,-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-40,-40,-31,-32,-35,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'WHILEU':([0,3,5,9,10,11,12,30,53,54,58,59,61,84,85,139,177,178,179,184,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[28,28,-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-38,28,-40,-40,28,-38,-31,-32,-35,28,28,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'SHI':([0,3,5,9,10,11,12,30,53,54,58,59,61,84,85,139,177,178,179,184,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[29,29,-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-38,29,-40,-40,29,-38,-31,-32,-35,29,29,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'MINUS':([0,3,5,9,10,11,12,14,19,27,30,31,32,33,37,39,40,43,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,80,81,82,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,111,112,113,120,121,122,123,124,125,126,127,128,129,134,136,139,140,141,142,146,147,148,149,150,152,162,165,177,178,179,181,184,189,193,195,197,198,199,200,201,202,203,206,207,210,212,214,215,216,217,218,219,222,223,224,],[31,31,-5,-9,-10,-11,-12,63,-100,31,-28,31,-112,31,-104,-102,-103,31,-4,-6,31,31,-7,-8,31,-13,31,31,31,31,31,31,31,31,31,31,31,31,31,63,-100,-102,-104,31,-27,-38,-110,-100,31,-102,-104,63,-100,31,-104,31,31,31,31,31,31,31,31,31,31,-94,-95,-96,-97,63,63,63,63,63,63,-111,31,31,63,63,-100,63,63,63,63,63,31,31,63,-40,-40,31,-105,-38,-105,31,31,-31,-32,-35,31,31,31,-40,-40,-40,63,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'LPAREN':([0,3,5,9,10,11,12,26,27,28,29,30,31,33,37,43,46,47,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,88,94,95,96,97,98,99,100,101,102,111,112,113,136,139,152,162,177,178,179,183,184,193,195,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[27,27,-5,-9,-10,-11,-12,-38,27,82,-38,-28,88,94,96,27,111,112,-4,-6,27,27,-7,-8,27,-13,88,88,88,88,88,88,88,88,88,88,94,94,27,133,96,94,138,-27,-38,88,94,96,27,27,88,88,88,88,88,94,27,27,88,27,27,27,-40,-40,27,-37,-38,94,88,-31,-32,-35,27,27,27,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'NUMBER':([0,3,5,9,10,11,12,27,30,31,33,43,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,84,85,88,94,96,97,98,99,100,101,102,111,112,113,136,139,152,162,177,178,179,184,193,195,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[32,32,-5,-9,-10,-11,-12,32,-28,32,32,32,-4,-6,32,32,-7,-8,32,-13,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-27,-38,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-40,-40,32,-38,32,32,-31,-32,-35,32,32,32,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'NOT':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,72,73,74,82,84,85,94,96,97,111,112,113,139,152,162,177,178,179,184,193,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[33,33,-5,-9,-10,-11,-12,33,-28,33,33,-4,-6,33,33,-7,-8,33,-13,33,33,33,33,-27,-38,33,33,33,33,33,33,33,33,33,-40,-40,33,-38,33,-31,-32,-35,33,33,33,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'OWO':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,72,73,74,82,84,85,94,96,97,111,112,113,139,152,162,177,178,179,184,193,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[34,34,-5,-9,-10,-11,-12,34,-28,34,34,-4,-6,34,34,-7,-8,34,-13,34,34,34,34,-27,-38,34,34,34,34,34,34,34,34,34,-40,-40,34,-38,34,-31,-32,-35,34,34,34,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'UWU':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,72,73,74,82,84,85,94,96,97,111,112,113,139,152,162,177,178,179,184,193,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[35,35,-5,-9,-10,-11,-12,35,-28,35,35,-4,-6,35,35,-7,-8,35,-13,35,35,35,35,-27,-38,35,35,35,35,35,35,35,35,35,-40,-40,35,-38,35,-31,-32,-35,35,35,35,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'ID':([0,3,5,9,10,11,12,27,30,31,33,43,44,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,84,85,88,94,96,97,98,99,100,101,102,108,111,112,113,116,136,138,139,152,154,155,156,157,158,162,177,178,179,184,193,194,195,196,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,220,222,223,224,],[37,37,-5,-9,-10,-11,-12,81,-28,90,95,95,109,-115,-116,-4,-6,95,95,-7,-8,95,-13,90,90,90,90,90,90,90,90,90,90,95,95,95,95,-27,-38,90,95,95,95,90,90,90,90,90,153,95,95,95,109,90,171,37,95,183,-41,-42,-43,-44,95,-40,-40,37,-38,95,209,90,211,-31,-32,-35,37,95,37,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,171,-29,-30,-72,]),'NANI':([0,3,5,9,10,11,12,30,53,54,58,59,61,84,85,139,177,178,179,184,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[46,46,-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-38,46,-40,-40,46,-38,-31,-32,-35,46,46,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'BAKA':([0,3,5,9,10,11,12,27,30,33,43,53,54,56,57,58,59,60,61,72,73,74,82,84,85,94,96,97,111,112,113,139,152,162,177,178,179,184,193,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[47,47,-5,-9,-10,-11,-12,47,-28,47,47,-4,-6,47,47,-7,-8,47,-13,47,47,47,47,-27,-38,47,47,47,47,47,47,47,47,47,-40,-40,47,-38,47,-31,-32,-35,47,47,47,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'LBRACK':([0,3,5,9,10,11,12,27,30,33,37,43,53,54,56,57,58,59,60,61,72,73,74,81,82,84,85,90,94,95,96,97,111,112,113,139,152,162,171,177,178,179,184,193,197,198,199,200,201,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[43,43,-5,-9,-10,-11,-12,43,-28,43,98,43,-4,-6,43,43,-7,-8,43,-13,43,43,43,136,43,-27,-38,136,43,136,43,43,43,43,43,43,43,43,195,-40,-40,43,-38,43,-31,-32,-35,43,43,43,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'WAIFU':([0,3,5,9,10,11,12,30,52,53,54,58,59,61,84,85,133,138,139,177,178,179,184,188,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[49,49,-5,-9,-10,-11,-12,-28,49,-4,-6,-7,-8,-13,-27,-38,49,49,49,-40,-40,49,-38,49,-31,-32,-35,49,49,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'CATGIRL':([0,3,5,9,10,11,12,30,52,53,54,58,59,61,84,85,133,138,139,177,178,179,184,188,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[50,50,-5,-9,-10,-11,-12,-28,50,-4,-6,-7,-8,-13,-27,-38,50,50,50,-40,-40,50,-38,50,-31,-32,-35,50,50,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'YOKAI':([0,3,5,9,10,11,12,30,53,54,58,59,61,84,85,139,177,178,179,184,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[51,51,-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-38,51,-40,-40,51,-38,-31,-32,-35,51,51,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'REAL':([0,3,5,9,10,11,12,30,53,54,58,59,61,84,85,138,139,177,178,179,184,197,198,199,200,202,203,206,207,212,214,215,216,217,218,219,222,223,224,],[52,52,-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-38,52,52,-40,-40,52,-38,-31,-32,-35,52,52,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'RBRACE':([5,9,10,11,12,30,53,54,58,59,61,84,177,178,179,197,198,199,200,203,206,207,212,214,215,216,217,218,219,222,223,224,],[-5,-9,-10,-11,-12,-28,-4,-6,-7,-8,-13,-27,-40,-40,199,-31,-32,-35,212,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'SEMICOL':([6,7,8,13,14,15,16,17,18,19,20,21,22,23,24,25,32,34,35,36,37,38,39,40,41,42,55,80,86,87,89,90,91,93,95,103,104,105,109,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,144,145,147,148,149,150,151,153,161,169,173,174,175,176,180,181,185,186,189,208,213,],[54,58,59,61,-14,-15,-16,-17,-18,-19,-23,-24,-25,-26,-57,-58,-112,-108,-109,-46,-104,-21,-22,-103,-53,-54,-39,-102,-110,-100,-102,-104,-106,-101,-104,-63,-64,-49,-71,-88,-93,-55,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-86,-87,-111,-107,-48,-33,-59,-60,-61,-62,-50,-70,-56,193,-76,-77,-78,-79,-47,-105,-85,-20,-105,220,-45,]),'DESU':([6,14,15,16,17,18,19,32,34,35,36,37,38,39,40,80,86,87,89,90,91,93,95,105,117,118,120,121,122,123,124,125,126,127,128,129,130,131,134,135,144,151,180,181,185,186,189,],[55,-14,-15,-16,-17,-18,-19,-112,-108,-109,-46,-104,-21,-22,-103,-102,-110,-100,-102,-104,-106,-101,-104,-49,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-86,-87,-111,-107,-48,-50,-47,-105,-85,-20,-105,]),'NEQ':([6,14,15,16,17,18,19,32,34,35,36,37,38,39,40,76,77,78,79,80,81,86,87,89,90,91,92,93,95,105,107,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,137,141,142,144,145,151,159,161,180,181,185,186,189,208,213,],[56,-14,-15,-16,-17,-18,-19,-112,-108,-109,-46,-104,-21,-22,-103,-14,-15,-19,56,-22,-104,-110,-100,-102,-104,-15,-14,-19,-104,-49,56,-88,-93,56,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-15,-15,56,-111,-107,-15,-14,-19,-48,56,-50,-15,56,-47,-105,-85,56,-105,-15,56,]),'EQOP':([6,14,15,16,17,18,19,32,34,35,36,37,38,39,40,76,77,78,79,80,81,86,87,89,90,91,92,93,95,105,107,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,137,141,142,144,145,151,159,161,180,181,185,186,189,208,213,],[57,-14,-15,-16,-17,-18,-19,-112,-108,-109,-46,-104,-21,-22,-103,-14,-15,-19,57,-22,-104,-110,-100,-102,-104,-15,-14,-19,-104,-49,57,-88,-93,57,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-15,-15,57,-111,-107,-15,-14,-19,-48,57,-50,-15,57,-47,-105,-85,57,-105,-15,57,]),'EQ':([8,24,25,37,48,109,114,115,153,170,171,181,221,],[60,-57,-58,97,113,-71,-68,-69,-70,60,97,201,201,]),'NOU':([9,10,11,12,30,54,58,59,61,84,177,178,197,198,199,203,206,207,212,214,215,216,217,218,219,222,223,224,],[-9,-10,-11,-12,85,-6,-7,-8,-13,-27,-40,-40,-31,-32,-35,-40,-40,-40,-36,-40,-40,-34,-40,-73,-74,-29,-30,-72,]),'COMMA':([14,15,16,17,18,19,24,25,32,34,35,36,38,39,40,80,86,87,89,90,91,93,95,105,107,109,117,118,120,121,122,123,124,125,126,127,128,129,130,131,134,135,144,151,153,164,180,185,186,189,],[-14,-15,-16,-17,-18,-19,-57,-58,-112,-108,-109,-46,-21,-22,-103,-102,-110,-100,-102,-104,-106,-101,-104,-49,152,-71,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-86,-87,-111,-107,-48,-50,-70,188,-47,-85,-20,-105,]),'RBRACK':([14,15,16,17,18,19,32,34,35,36,38,39,40,43,80,86,87,89,90,91,93,95,105,106,107,117,118,120,121,122,123,124,125,126,127,128,129,130,131,134,135,144,146,151,165,180,182,185,186,189,210,],[-14,-15,-16,-17,-18,-19,-112,-108,-109,-46,-21,-22,-103,105,-102,-110,-100,-102,-104,-106,-101,-104,-49,151,-51,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-86,-87,-111,-107,-48,181,-50,189,-47,-52,-85,-20,-105,221,]),'AND':([14,15,16,17,18,19,32,34,35,36,37,38,39,40,77,78,80,81,86,87,89,90,91,93,95,105,117,118,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,142,144,151,159,180,181,185,186,189,208,],[-14,72,-16,-17,-18,-19,-112,-108,-109,-46,-104,-21,-22,-103,72,-101,-102,-104,-110,-100,-102,-104,-106,-101,-104,-49,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,72,72,-111,-107,72,-101,-48,-50,72,-47,-105,-85,-20,-105,72,]),'OR':([14,15,16,17,18,19,32,34,35,36,37,38,39,40,77,78,80,81,86,87,89,90,91,93,95,105,117,118,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,142,144,151,159,180,181,185,186,189,208,],[-14,73,-16,-17,-18,-19,-112,-108,-109,-46,-104,-21,-22,-103,73,-101,-102,-104,-110,-100,-102,-104,-106,-101,-104,-49,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,73,73,-111,-107,73,-101,-48,-50,73,-47,-105,-85,-20,-105,73,]),'QMARK':([14,15,16,17,18,19,32,34,35,36,37,38,39,40,77,78,80,81,86,87,89,90,91,93,95,105,117,118,120,121,122,123,124,125,126,127,128,129,130,131,134,135,137,142,144,151,159,180,181,185,186,189,208,],[-14,74,-16,-17,-18,-19,-112,-108,-109,-46,-104,-21,-22,-103,74,-101,-102,-104,-110,-100,-102,-104,-106,-101,-104,-49,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,74,74,-111,-107,74,-101,-48,-50,74,-47,-105,-85,-20,-105,74,]),'RPAREN':([14,15,16,17,18,19,24,25,32,34,35,36,38,39,40,76,77,78,80,81,86,87,89,90,91,93,95,96,103,104,105,107,109,117,118,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,137,140,141,142,143,144,145,147,148,149,150,151,153,159,160,163,164,167,168,180,182,185,186,188,189,204,209,211,213,225,226,227,228,],[-14,-15,-16,-17,-18,-19,-57,-58,-112,-108,-109,-46,-21,-22,-103,134,135,-100,-102,-104,-110,-100,-102,-104,-106,-101,-104,144,-63,-64,-49,-51,-71,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-86,-87,-67,-111,-107,166,134,134,-100,180,-48,-33,-59,-60,-61,-62,-50,-70,184,185,187,-65,191,192,-47,-52,-85,-20,-67,-105,-66,-83,-84,-45,-75,-80,-81,-82,]),'COL':([14,15,16,17,18,19,24,25,32,34,35,36,38,39,40,80,86,87,89,90,91,93,95,105,109,114,115,117,118,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,144,151,153,170,172,180,185,186,189,],[-14,-15,-16,-17,-18,-19,-57,-58,-112,-108,-109,-46,-21,-22,-103,-102,-110,-100,-102,-104,-106,-101,-104,-49,-71,-68,-69,-88,-93,-94,-95,-96,-97,-98,-99,-89,-90,-91,-92,-86,-87,162,-111,-107,-48,-50,-70,194,196,-47,-85,-20,-105,]),'PLUS':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,126,127,128,129,134,140,141,142,146,147,148,149,150,165,181,189,210,],[62,-100,-112,-104,-102,-103,62,-100,-102,-104,-110,-100,-102,-104,62,-100,-104,-94,-95,-96,-97,62,62,62,62,62,62,-111,62,62,-100,62,62,62,62,62,62,-105,-105,62,]),'TIMES':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,126,127,128,129,134,140,141,142,146,147,148,149,150,165,181,189,210,],[64,-100,-112,-104,-102,-103,64,-100,-102,-104,-110,-100,-102,-104,64,-100,-104,64,64,-96,-97,64,64,64,64,64,64,-111,64,64,-100,64,64,64,64,64,64,-105,-105,64,]),'DIVIDE':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,126,127,128,129,134,140,141,142,146,147,148,149,150,165,181,189,210,],[65,-100,-112,-104,-102,-103,65,-100,-102,-104,-110,-100,-102,-104,65,-100,-104,65,65,-96,-97,65,65,65,65,65,65,-111,65,65,-100,65,65,65,65,65,65,-105,-105,65,]),'MOD':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,126,127,128,129,134,140,141,142,146,147,148,149,150,165,181,189,210,],[66,-100,-112,-104,-102,-103,66,-100,-102,-104,-110,-100,-102,-104,66,-100,-104,-94,-95,-96,-97,66,66,66,66,66,66,-111,66,66,-100,66,66,66,66,66,66,-105,-105,66,]),'POW':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,126,127,128,129,134,140,141,142,146,147,148,149,150,165,181,189,210,],[67,-100,-112,-104,-102,-103,67,-100,-102,-104,-110,-100,-102,-104,67,-100,-104,-94,-95,-96,-97,67,67,67,67,67,67,-111,67,67,-100,67,67,67,67,67,67,-105,-105,67,]),'LEQ':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,134,141,142,181,189,],[68,-100,-112,-104,-102,-103,68,-100,-102,-104,-110,-100,-102,-104,68,-100,-104,-94,-95,-96,-97,-98,-99,-111,68,-100,-105,-105,]),'GEQ':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,134,141,142,181,189,],[69,-100,-112,-104,-102,-103,69,-100,-102,-104,-110,-100,-102,-104,69,-100,-104,-94,-95,-96,-97,-98,-99,-111,69,-100,-105,-105,]),'LT':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,134,141,142,181,189,],[70,-100,-112,-104,-102,-103,70,-100,-102,-104,-110,-100,-102,-104,70,-100,-104,-94,-95,-96,-97,-98,-99,-111,70,-100,-105,-105,]),'GT':([14,19,32,37,39,40,76,78,80,81,86,87,89,90,92,93,95,120,121,122,123,124,125,134,141,142,181,189,],[71,-100,-112,-104,-102,-103,71,-100,-102,-104,-110,-100,-102,-104,71,-100,-104,-94,-95,-96,-97,-98,-99,-111,71,-100,-105,-105,]),'PEQ':([37,171,],[99,99,]),'MEQ':([37,171,],[100,100,]),'TEQ':([37,171,],[101,101,]),'DEQ':([37,171,],[102,102,]),'PP':([37,171,],[103,103,]),'MM':([37,171,],[104,104,]),'HAREM':([44,49,50,116,],[108,-115,-116,108,]),'SQUIGGLY':([44,45,49,50,51,],[-114,110,-115,-116,-113,]),'LBRACE':([85,139,184,187,190,191,192,202,205,],[-38,179,-38,179,-38,179,179,179,179,]),'CHAN':([110,],[155,]),'KUN':([110,],[156,]),'SAN':([110,],[157,]),'SAMA':([110,],[158,]),'ISTUDIED':([166,],[190,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,179,],[3,200,]),'empty':([0,],[4,]),'singleStatement':([0,3,139,179,200,202,],[5,53,178,5,53,215,]),'expr':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[6,6,79,79,107,117,118,119,79,79,132,79,79,107,145,79,107,161,6,107,186,6,79,6,213,6,]),'assignment':([0,3,139,179,200,202,],[7,7,7,7,7,7,]),'declaration':([0,3,133,138,139,179,188,200,202,],[8,8,164,170,8,8,164,8,8,]),'functionDeclaration':([0,3,139,179,200,202,],[9,9,9,9,9,9,]),'whileLoop':([0,3,139,179,200,202,],[10,10,10,10,10,10,]),'forLoop':([0,3,139,179,200,202,],[11,11,11,11,11,11,]),'conditional':([0,3,139,179,200,202,],[12,12,12,12,12,12,]),'returnStatement':([0,3,139,179,200,202,],[13,13,13,13,13,13,]),'numExpr':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,82,88,94,96,97,98,99,100,101,102,111,112,113,136,139,152,162,179,193,195,200,201,202,],[14,14,76,86,92,14,14,14,14,120,121,122,123,124,125,126,127,128,129,92,92,14,92,140,141,14,14,146,147,148,149,150,92,14,14,165,14,14,14,14,92,210,14,14,14,]),'boolExpr':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[15,15,77,91,15,15,15,15,130,131,15,137,77,15,15,159,15,15,15,15,15,15,208,15,15,15,]),'functionCall':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'arrayExpr':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ternaryOp':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'reference':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,82,88,94,96,97,98,99,100,101,102,111,112,113,136,139,152,162,179,193,195,200,201,202,],[19,19,78,87,93,19,19,19,19,87,87,87,87,87,87,87,87,87,87,93,93,19,93,87,142,19,19,87,87,87,87,87,93,19,19,87,19,19,19,19,93,87,19,19,19,]),'reassign':([0,3,138,139,179,200,202,220,],[20,20,173,20,20,20,20,226,]),'initialize':([0,3,139,179,200,202,],[21,21,21,21,21,21,]),'arrayAssign':([0,3,138,139,179,200,202,220,],[22,22,175,22,22,22,22,227,]),'binOpAssign':([0,3,138,139,179,200,202,220,],[23,23,176,23,23,23,23,228,]),'arrayDeclaration':([0,3,52,133,138,139,179,188,200,202,],[24,24,114,24,24,24,24,24,24,24,]),'letDeclaration':([0,3,52,133,138,139,179,188,200,202,],[25,25,115,25,25,25,25,25,25,25,]),'newFn':([0,3,139,179,200,202,],[26,26,26,26,26,26,]),'if':([0,3,139,179,200,202,],[30,30,30,30,30,30,]),'printCall':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'arrayLiteral':([0,3,27,33,43,56,57,60,72,73,74,82,94,96,97,111,112,113,139,152,162,179,193,200,201,202,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'letReference':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,82,88,94,96,97,98,99,100,101,102,111,112,113,136,139,152,162,179,193,195,200,201,202,],[39,39,80,89,80,39,39,39,39,89,89,89,89,89,89,89,89,89,89,80,80,39,80,89,80,39,39,89,89,89,89,89,80,39,39,89,39,39,39,39,80,89,39,39,39,]),'arrayReference':([0,3,27,31,33,43,56,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,82,88,94,96,97,98,99,100,101,102,111,112,113,136,139,152,162,179,193,195,200,201,202,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'letInitialize':([0,3,138,139,179,200,202,],[41,41,174,41,41,41,41,]),'constInitialize':([0,3,139,179,200,202,],[42,42,42,42,42,42,]),'type':([0,3,52,133,138,139,179,188,200,202,],[44,44,116,116,116,44,44,116,44,44,]),'fnType':([0,3,139,179,200,202,],[45,45,45,45,45,45,]),'constDeclaration':([0,3,138,139,179,200,202,],[48,48,172,48,48,48,48,]),'newScope':([26,29,85,184,190,],[75,83,139,202,205,]),'else':([30,],[84,]),'exprLst':([43,96,112,152,],[106,143,160,182,]),'honorific':([110,],[154,]),'argumentDeclaration':([133,188,],[163,204,]),'forTrio':([138,],[167,]),'forElement':([138,],[168,]),'forAssign':([138,],[169,]),'enclosure':([139,187,191,192,202,205,],[177,203,206,207,214,217,]),'popScope':([177,178,203,206,207,214,215,217,],[197,198,216,218,219,222,223,224,]),'forReassign':([220,],[225,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',40),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',45),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',46),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',52),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',53),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',59),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',60),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',61),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',62),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',63),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',64),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',65),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',66),
  ('expr -> numExpr','expr',1,'p_expr','parser.py',72),
  ('expr -> boolExpr','expr',1,'p_expr','parser.py',73),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',74),
  ('expr -> arrayExpr','expr',1,'p_expr','parser.py',75),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',76),
  ('expr -> reference','expr',1,'p_expr','parser.py',77),
  ('ternaryOp -> boolExpr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',84),
  ('arrayExpr -> arrayLiteral','arrayExpr',1,'p_arrayExpr','parser.py',93),
  ('arrayExpr -> letReference','arrayExpr',1,'p_arrayExpr','parser.py',94),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',100),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',101),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',102),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',103),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',109),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',110),
  ('if -> NANI LPAREN boolExpr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',116),
  ('if -> NANI LPAREN boolExpr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',117),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',123),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',124),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',130),
  ('functionDeclaration -> newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',7,'p_functionDeclaration','parser.py',149),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',159),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',160),
  ('newFn -> fnType SQUIGGLY honorific ID','newFn',4,'p_newFn','parser.py',166),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',173),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',181),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',188),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',196),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',197),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',198),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',199),
  ('arrayAssign -> ID LBRACK numExpr RBRACK EQ expr','arrayAssign',6,'p_arrayAssign','parser.py',205),
  ('functionCall -> printCall','functionCall',1,'p_functionCall','parser.py',220),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',221),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',222),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',241),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',242),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',253),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',254),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',263),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',264),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',270),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',283),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',295),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',296),
  ('binOpAssign -> ID PEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',303),
  ('binOpAssign -> ID MEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',304),
  ('binOpAssign -> ID TEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',305),
  ('binOpAssign -> ID DEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',306),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',307),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',308),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',332),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',333),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',334),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',346),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',347),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',355),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',364),
  ('whileLoop -> WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',371),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',378),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',379),
  ('forTrio -> forAssign SEMICOL boolExpr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',385),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',391),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',392),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',393),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',394),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',400),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',401),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',402),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',408),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',409),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',416),
  ('boolExpr -> boolExpr AND boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',423),
  ('boolExpr -> boolExpr OR boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',424),
  ('boolExpr -> expr NEQ expr','boolExpr',3,'p_boolExpr_op','parser.py',425),
  ('boolExpr -> numExpr LEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',426),
  ('boolExpr -> numExpr GEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',427),
  ('boolExpr -> numExpr LT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',428),
  ('boolExpr -> numExpr GT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',429),
  ('boolExpr -> expr EQOP expr','boolExpr',3,'p_boolExpr_op','parser.py',430),
  ('numExpr -> numExpr PLUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',451),
  ('numExpr -> numExpr MINUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',452),
  ('numExpr -> numExpr TIMES numExpr','numExpr',3,'p_numExpr_binop','parser.py',453),
  ('numExpr -> numExpr DIVIDE numExpr','numExpr',3,'p_numExpr_binop','parser.py',454),
  ('numExpr -> numExpr MOD numExpr','numExpr',3,'p_numExpr_binop','parser.py',455),
  ('numExpr -> numExpr POW numExpr','numExpr',3,'p_numExpr_binop','parser.py',456),
  ('numExpr -> reference','numExpr',1,'p_numExpr_reference','parser.py',483),
  ('boolExpr -> reference','boolExpr',1,'p_boolExpr_reference','parser.py',488),
  ('reference -> letReference','reference',1,'p_reference','parser.py',493),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',494),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',500),
  ('arrayReference -> ID LBRACK numExpr RBRACK','arrayReference',4,'p_arrayReference','parser.py',517),
  ('boolExpr -> NOT boolExpr','boolExpr',2,'p_boolExprNeg','parser.py',532),
  ('boolExpr -> LPAREN boolExpr RPAREN','boolExpr',3,'p_boolExpr_group','parser.py',540),
  ('boolExpr -> OWO','boolExpr',1,'p_bool','parser.py',547),
  ('boolExpr -> UWU','boolExpr',1,'p_bool','parser.py',548),
  ('numExpr -> MINUS numExpr','numExpr',2,'p_numExpr_uminus','parser.py',554),
  ('numExpr -> LPAREN numExpr RPAREN','numExpr',3,'p_numExpr_group','parser.py',560),
  ('numExpr -> NUMBER','numExpr',1,'p_numExpr_number','parser.py',566),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',571),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',572),
  ('type -> WAIFU','type',1,'p_type','parser.py',578),
  ('type -> CATGIRL','type',1,'p_type','parser.py',579),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',585),
]
