
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftQMARKCOLleftANDORleftNEQLEQGEQLTGTEQOPleftPLUSMINUSleftTIMESDIVIDEMODleftPOWrightUMINUSNOTleftLPARENRPARENAND BAKA CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM ID ISTUDIED KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MOD MULTID NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS POW PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SHI SQUIGGLY TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : literal\n             | arrayLiteral\n             | reference\n             | functionCall\n             | ternaryOp\n\n     expr : LPAREN expr RPAREN\n     expr : expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIVIDE expr\n             | expr MOD expr\n             | expr POW expr\n             | expr NEQ expr\n             | expr LEQ expr\n             | expr GEQ expr\n             | expr LT expr\n             | expr GT expr\n             | expr EQOP expr\n     expr : expr AND expr\n             | expr OR expr\n    expr : NOT exprexpr : MINUS expr %prec UMINUS ternaryOp : expr QMARK expr COL expr\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     conditional : if else\n                    | if\n     if : NANI LPAREN expr RPAREN newScope enclosure popScope\n           | NANI LPAREN expr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    newFn : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : ID LBRACK expr RBRACK EQ expr\n     functionCall : printCall\n                     | ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n     binOpAssign : ID PEQ expr\n                    | ID MEQ expr\n                    | ID TEQ expr\n                    | ID DEQ expr\n                    | ID PP\n                    | ID MM\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL expr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPARENreference : letReference\n                 | arrayReference\n    letReference : ID\n     arrayReference : ID LBRACK expr RBRACK literal : NUMBER literal : OWO\n                | UWU\n     fnType : YOKAI\n               | type\n    type : WAIFU\n            | CATGIRL\n    empty : '
    
_lr_action_items = {'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,161,],[3,182,]),'empty':([0,],[4,]),'singleStatement':([0,3,124,161,182,184,],[5,51,160,5,51,197,]),'expr':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[6,6,73,75,76,84,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,84,129,130,131,132,133,134,141,84,143,145,6,84,168,6,190,192,6,195,6,]),'assignment':([0,3,124,161,182,184,],[7,7,7,7,7,7,]),'declaration':([0,3,121,123,124,161,171,182,184,],[8,8,147,152,8,8,147,8,8,]),'functionDeclaration':([0,3,124,161,182,184,],[9,9,9,9,9,9,]),'whileLoop':([0,3,124,161,182,184,],[10,10,10,10,10,10,]),'forLoop':([0,3,124,161,182,184,],[11,11,11,11,11,11,]),'conditional':([0,3,124,161,182,184,],[12,12,12,12,12,12,]),'returnStatement':([0,3,124,161,182,184,],[13,13,13,13,13,13,]),'literal':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'arrayLiteral':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'reference':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'functionCall':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ternaryOp':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'reassign':([0,3,123,124,161,182,184,202,],[22,22,155,22,22,22,22,208,]),'initialize':([0,3,124,161,182,184,],[23,23,23,23,23,23,]),'arrayAssign':([0,3,123,124,161,182,184,202,],[24,24,157,24,24,24,24,209,]),'binOpAssign':([0,3,123,124,161,182,184,202,],[25,25,158,25,25,25,25,210,]),'arrayDeclaration':([0,3,50,121,123,124,161,171,182,184,],[26,26,100,26,26,26,26,26,26,26,]),'letDeclaration':([0,3,50,121,123,124,161,171,182,184,],[27,27,101,27,27,27,27,27,27,27,]),'newFn':([0,3,124,161,182,184,],[28,28,28,28,28,28,]),'if':([0,3,124,161,182,184,],[31,31,31,31,31,31,]),'letReference':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'arrayReference':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'printCall':([0,3,19,20,21,35,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,71,78,85,86,87,88,89,90,91,97,98,99,120,124,126,144,161,175,177,182,183,184,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'letInitialize':([0,3,123,124,161,182,184,],[40,40,156,40,40,40,40,]),'constInitialize':([0,3,124,161,182,184,],[41,41,41,41,41,41,]),'type':([0,3,50,121,123,124,161,171,182,184,],[42,42,102,102,102,42,42,102,42,42,]),'fnType':([0,3,124,161,182,184,],[43,43,43,43,43,43,]),'constDeclaration':([0,3,123,124,161,182,184,],[46,46,154,46,46,46,46,]),'newScope':([28,30,81,166,172,],[77,79,124,184,187,]),'else':([31,],[80,]),'exprLst':([35,85,98,126,],[83,127,142,162,]),'honorific':([96,],[136,]),'argumentDeclaration':([121,171,],[146,186,]),'forTrio':([123,],[149,]),'forElement':([123,],[150,]),'forAssign':([123,],[151,]),'enclosure':([124,170,173,174,184,187,],[159,185,188,189,196,199,]),'popScope':([159,160,185,188,189,196,197,199,],[179,180,198,200,201,204,205,206,]),'forReassign':([202,],[207,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',44),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',49),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',50),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',56),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',57),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',63),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',64),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',65),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',66),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',67),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',68),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',69),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',70),
  ('expr -> literal','expr',1,'p_expr','parser.py',76),
  ('expr -> arrayLiteral','expr',1,'p_expr','parser.py',77),
  ('expr -> reference','expr',1,'p_expr','parser.py',78),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',79),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',80),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_paren_expr','parser.py',87),
  ('expr -> expr PLUS expr','expr',3,'p_boolExpr','parser.py',96),
  ('expr -> expr MINUS expr','expr',3,'p_boolExpr','parser.py',97),
  ('expr -> expr TIMES expr','expr',3,'p_boolExpr','parser.py',98),
  ('expr -> expr DIVIDE expr','expr',3,'p_boolExpr','parser.py',99),
  ('expr -> expr MOD expr','expr',3,'p_boolExpr','parser.py',100),
  ('expr -> expr POW expr','expr',3,'p_boolExpr','parser.py',101),
  ('expr -> expr NEQ expr','expr',3,'p_boolExpr','parser.py',102),
  ('expr -> expr LEQ expr','expr',3,'p_boolExpr','parser.py',103),
  ('expr -> expr GEQ expr','expr',3,'p_boolExpr','parser.py',104),
  ('expr -> expr LT expr','expr',3,'p_boolExpr','parser.py',105),
  ('expr -> expr GT expr','expr',3,'p_boolExpr','parser.py',106),
  ('expr -> expr EQOP expr','expr',3,'p_boolExpr','parser.py',107),
  ('expr -> expr AND expr','expr',3,'p_boolExpr_op','parser.py',150),
  ('expr -> expr OR expr','expr',3,'p_boolExpr_op','parser.py',151),
  ('expr -> NOT expr','expr',2,'p_boolExprNeg','parser.py',166),
  ('expr -> MINUS expr','expr',2,'p_numExpr_uminus','parser.py',173),
  ('ternaryOp -> expr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',179),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',188),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',189),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',190),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',191),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',197),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',198),
  ('if -> NANI LPAREN expr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',204),
  ('if -> NANI LPAREN expr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',205),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',211),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',212),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',218),
  ('functionDeclaration -> newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',7,'p_functionDeclaration','parser.py',237),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',247),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',248),
  ('newFn -> fnType SQUIGGLY honorific ID','newFn',4,'p_newFn','parser.py',254),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',261),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',269),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',276),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',284),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',285),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',286),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',287),
  ('arrayAssign -> ID LBRACK expr RBRACK EQ expr','arrayAssign',6,'p_arrayAssign','parser.py',293),
  ('functionCall -> printCall','functionCall',1,'p_functionCall','parser.py',308),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',309),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',310),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',329),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',330),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',341),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',342),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',351),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',352),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',358),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',371),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',383),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',384),
  ('binOpAssign -> ID PEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',391),
  ('binOpAssign -> ID MEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',392),
  ('binOpAssign -> ID TEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',393),
  ('binOpAssign -> ID DEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',394),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',395),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',396),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',420),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',421),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',422),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',434),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',435),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',443),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',452),
  ('whileLoop -> WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',459),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',466),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',467),
  ('forTrio -> forAssign SEMICOL expr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',473),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',479),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',480),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',481),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',482),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',488),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',489),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',490),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',496),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',497),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',504),
  ('reference -> letReference','reference',1,'p_reference','parser.py',511),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',512),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',518),
  ('arrayReference -> ID LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',535),
  ('literal -> NUMBER','literal',1,'p_numExpr_number','parser.py',550),
  ('literal -> OWO','literal',1,'p_bool','parser.py',555),
  ('literal -> UWU','literal',1,'p_bool','parser.py',556),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',562),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',563),
  ('type -> WAIFU','type',1,'p_type','parser.py',569),
  ('type -> CATGIRL','type',1,'p_type','parser.py',570),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',576),
]
