
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftQMARKCOLleftANDORleftNEQLEQGEQLTGTEQOPleftPLUSMINUSleftTIMESDIVIDEMODleftPOWrightUMINUSNOTleftLPARENRPARENleftLBRACKRBRACKAND BAKA CATBOY CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM HUSBANDO ID ISTUDIED KOUHAI KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MOD NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS POW PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SENPAI SHI SQUIGGLY STRING TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : literal\n             | arrayLiteral\n             | reference\n             | functionCall\n             | ternaryOp\n     expr : LPAREN expr RPAREN\n     expr : expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIVIDE expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LT expr\n             | expr GT expr\n             | expr LEQ expr\n             | expr GEQ expr\n     expr : expr EQOP expr\n             | expr NEQ expr\n     expr : expr AND expr\n             | expr OR expr\n    expr : NOT exprexpr : MINUS expr %prec UMINUS ternaryOp : expr QMARK expr COL expr\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     binOpAssign : ID PEQ expr\n                    | ID MEQ expr\n                    | ID TEQ expr\n                    | ID DEQ expr\n                    | ID PP\n                    | ID MM\n     conditional : if else\n                    | if\n     if : NANI LPAREN expr RPAREN newScope enclosure popScope\n           | NANI LPAREN expr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : fnHeader newScope LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    fnHeader : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : ID LBRACK expr RBRACK EQ expr\n     functionCall : printCall  functionCall : ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL expr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN reference : letReference\n     letReference : ID\n     reference : expr LBRACK expr RBRACK literal : NUMBERliteral : STRING literal : OWO\n                | UWU\n     fnType : YOKAI\n               | type\n     type : WAIFU\n             | HUSBANDO\n             | CATBOY\n             | CATGIRL\n             | SENPAI\n             | KOUHAI\n     empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,9,10,11,12,31,55,56,74,75,77,85,164,165,182,183,184,188,191,192,196,198,199,200,201,202,203,205,206,207,],[-115,0,-1,-2,-3,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-60,-60,-51,-52,-55,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'LPAREN':([0,3,5,9,10,11,12,19,20,21,28,29,30,31,36,39,44,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,79,82,83,84,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,170,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[19,19,-5,-9,-10,-11,-12,19,19,19,-58,83,-58,-48,19,90,102,103,-4,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-7,-8,19,-13,90,126,19,128,-47,-58,19,19,19,19,19,19,19,19,19,19,19,19,19,-60,-60,19,-57,-58,19,-51,-52,-55,19,19,19,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'NOT':([0,3,5,9,10,11,12,19,20,21,31,36,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[21,21,-5,-9,-10,-11,-12,21,21,21,-48,21,-4,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-7,-8,21,-13,21,-47,-58,21,21,21,21,21,21,21,21,21,21,21,21,21,-60,-60,21,-58,21,-51,-52,-55,21,21,21,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'MINUS':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,20,21,31,32,33,34,35,36,37,38,39,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,83,85,86,87,89,90,91,92,93,94,95,96,102,103,104,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,129,130,131,133,134,135,136,137,138,139,146,148,149,150,164,165,166,168,171,172,173,179,182,183,184,185,186,187,188,191,192,193,196,197,198,199,200,201,202,203,205,206,207,],[20,20,-5,58,-9,-10,-11,-12,-14,-15,-16,-17,-18,20,20,20,-48,-103,-104,-105,-106,20,-100,-66,-101,-4,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-7,-8,20,-13,58,-101,-35,-34,20,-47,-58,-69,58,20,20,20,20,20,20,20,20,20,20,-20,-21,-22,-23,-24,-25,58,58,58,58,58,58,58,58,58,58,58,-19,58,20,-70,20,-68,58,58,58,58,58,58,58,58,-102,20,-60,-60,20,-67,-58,-99,58,20,-51,-52,-55,20,20,20,-60,-60,-60,58,-56,58,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'WHILEU':([0,3,5,9,10,11,12,31,55,56,74,75,77,85,86,129,164,165,166,171,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[29,29,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,29,-60,-60,29,-58,-51,-52,-55,29,29,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'SHI':([0,3,5,9,10,11,12,31,55,56,74,75,77,85,86,129,164,165,166,171,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[30,30,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,30,-60,-60,30,-58,-51,-52,-55,30,30,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'NUMBER':([0,3,5,9,10,11,12,19,20,21,31,36,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[32,32,-5,-9,-10,-11,-12,32,32,32,-48,32,-4,-6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-7,-8,32,-13,32,-47,-58,32,32,32,32,32,32,32,32,32,32,32,32,32,-60,-60,32,-58,32,-51,-52,-55,32,32,32,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'STRING':([0,3,5,9,10,11,12,19,20,21,31,36,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[33,33,-5,-9,-10,-11,-12,33,33,33,-48,33,-4,-6,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-7,-8,33,-13,33,-47,-58,33,33,33,33,33,33,33,33,33,33,33,33,33,-60,-60,33,-58,33,-51,-52,-55,33,33,33,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'OWO':([0,3,5,9,10,11,12,19,20,21,31,36,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[34,34,-5,-9,-10,-11,-12,34,34,34,-48,34,-4,-6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-7,-8,34,-13,34,-47,-58,34,34,34,34,34,34,34,34,34,34,34,34,34,-60,-60,34,-58,34,-51,-52,-55,34,34,34,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'UWU':([0,3,5,9,10,11,12,19,20,21,31,36,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[35,35,-5,-9,-10,-11,-12,35,35,35,-48,35,-4,-6,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-7,-8,35,-13,35,-47,-58,35,35,35,35,35,35,35,35,35,35,35,35,35,-60,-60,35,-58,35,-51,-52,-55,35,35,35,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'LBRACK':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,20,21,31,32,33,34,35,36,37,38,39,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,83,85,86,87,89,90,91,92,93,94,95,96,102,103,104,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,129,130,131,133,134,135,136,137,138,139,146,148,149,150,158,164,165,166,168,171,172,173,179,182,183,184,185,186,187,188,191,192,193,196,197,198,199,200,201,202,203,205,206,207,],[36,36,-5,72,-9,-10,-11,-12,-14,-15,-16,-17,-18,36,36,36,-48,-103,-104,-105,-106,36,-100,-66,92,-4,-6,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-7,-8,36,-13,72,-101,72,72,36,-47,-58,-69,72,36,36,36,36,36,36,36,36,36,36,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-19,72,36,-70,36,-68,72,72,72,72,72,72,72,72,-102,36,92,-60,-60,36,-67,-58,-99,72,36,-51,-52,-55,36,36,36,-60,-60,-60,72,-56,72,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'ID':([0,3,5,9,10,11,12,19,20,21,31,36,42,47,48,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,99,102,103,104,107,128,129,131,141,142,143,144,145,150,164,165,166,171,179,180,181,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,204,205,206,207,],[39,39,-5,-9,-10,-11,-12,79,79,79,-48,79,100,-109,-110,-111,-112,-113,-114,-4,-6,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-7,-8,79,-13,79,-47,-58,79,79,79,79,79,79,79,140,79,79,79,100,158,39,79,170,-61,-62,-63,-64,79,-60,-60,39,-58,79,194,195,-51,-52,-55,39,79,39,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,158,-49,-50,-86,]),'NANI':([0,3,5,9,10,11,12,31,55,56,74,75,77,85,86,129,164,165,166,171,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[44,44,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,44,-60,-60,44,-58,-51,-52,-55,44,44,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'BAKA':([0,3,5,9,10,11,12,19,20,21,31,36,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83,85,86,90,91,92,93,94,95,96,102,103,104,129,131,150,164,165,166,171,179,182,183,184,185,186,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[45,45,-5,-9,-10,-11,-12,45,45,45,-48,45,-4,-6,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-7,-8,45,-13,45,-47,-58,45,45,45,45,45,45,45,45,45,45,45,45,45,-60,-60,45,-58,45,-51,-52,-55,45,45,45,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'WAIFU':([0,3,5,9,10,11,12,31,54,55,56,74,75,77,85,86,126,128,129,164,165,166,171,175,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[47,47,-5,-9,-10,-11,-12,-48,47,-4,-6,-7,-8,-13,-47,-58,47,47,47,-60,-60,47,-58,47,-51,-52,-55,47,47,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'HUSBANDO':([0,3,5,9,10,11,12,31,54,55,56,74,75,77,85,86,126,128,129,164,165,166,171,175,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[48,48,-5,-9,-10,-11,-12,-48,48,-4,-6,-7,-8,-13,-47,-58,48,48,48,-60,-60,48,-58,48,-51,-52,-55,48,48,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'CATBOY':([0,3,5,9,10,11,12,31,54,55,56,74,75,77,85,86,126,128,129,164,165,166,171,175,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[49,49,-5,-9,-10,-11,-12,-48,49,-4,-6,-7,-8,-13,-47,-58,49,49,49,-60,-60,49,-58,49,-51,-52,-55,49,49,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'CATGIRL':([0,3,5,9,10,11,12,31,54,55,56,74,75,77,85,86,126,128,129,164,165,166,171,175,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[50,50,-5,-9,-10,-11,-12,-48,50,-4,-6,-7,-8,-13,-47,-58,50,50,50,-60,-60,50,-58,50,-51,-52,-55,50,50,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'SENPAI':([0,3,5,9,10,11,12,31,54,55,56,74,75,77,85,86,126,128,129,164,165,166,171,175,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[51,51,-5,-9,-10,-11,-12,-48,51,-4,-6,-7,-8,-13,-47,-58,51,51,51,-60,-60,51,-58,51,-51,-52,-55,51,51,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'KOUHAI':([0,3,5,9,10,11,12,31,54,55,56,74,75,77,85,86,126,128,129,164,165,166,171,175,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[52,52,-5,-9,-10,-11,-12,-48,52,-4,-6,-7,-8,-13,-47,-58,52,52,52,-60,-60,52,-58,52,-51,-52,-55,52,52,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'YOKAI':([0,3,5,9,10,11,12,31,55,56,74,75,77,85,86,129,164,165,166,171,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[53,53,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,53,-60,-60,53,-58,-51,-52,-55,53,53,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'REAL':([0,3,5,9,10,11,12,31,55,56,74,75,77,85,86,128,129,164,165,166,171,182,183,184,185,187,188,191,192,196,198,199,200,201,202,203,205,206,207,],[54,54,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,54,54,-60,-60,54,-58,-51,-52,-55,54,54,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'RBRACE':([5,9,10,11,12,31,55,56,74,75,77,85,164,165,166,182,183,184,185,188,191,192,196,198,199,200,201,202,203,205,206,207,],[-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-60,-60,184,-51,-52,-55,196,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'SEMICOL':([6,7,8,13,14,15,16,17,18,22,23,24,25,26,27,32,33,34,35,37,38,39,40,41,71,79,80,81,87,97,98,100,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,130,133,134,136,137,138,139,140,148,149,156,160,161,162,163,168,172,173,193,197,],[56,74,75,77,-14,-15,-16,-17,-18,-37,-38,-39,-40,-77,-78,-103,-104,-105,-106,-100,-66,-101,-73,-74,-59,-101,-35,-34,-69,-45,-46,-85,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-75,-19,-70,-68,-53,-41,-42,-43,-44,-84,-76,-102,179,-90,-91,-92,-93,-67,-99,-36,204,-65,]),'PLUS':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[57,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,57,-101,-35,-34,-69,57,-20,-21,-22,-23,-24,-25,57,57,57,57,57,57,57,57,57,57,57,-19,57,-70,-68,57,57,57,57,57,57,57,57,-102,-67,-99,57,57,57,]),'TIMES':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[59,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,59,-101,-35,-34,-69,59,59,59,-22,-23,-24,-25,59,59,59,59,59,59,59,59,59,59,59,-19,59,-70,-68,59,59,59,59,59,59,59,59,-102,-67,-99,59,59,59,]),'DIVIDE':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[60,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,60,-101,-35,-34,-69,60,60,60,-22,-23,-24,-25,60,60,60,60,60,60,60,60,60,60,60,-19,60,-70,-68,60,60,60,60,60,60,60,60,-102,-67,-99,60,60,60,]),'MOD':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[61,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,61,-101,-35,-34,-69,61,61,61,-22,-23,-24,-25,61,61,61,61,61,61,61,61,61,61,61,-19,61,-70,-68,61,61,61,61,61,61,61,61,-102,-67,-99,61,61,61,]),'POW':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[62,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,62,-101,-35,-34,-69,62,62,62,62,62,62,-25,62,62,62,62,62,62,62,62,62,62,62,-19,62,-70,-68,62,62,62,62,62,62,62,62,-102,-67,-99,62,62,62,]),'LT':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[63,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,63,-101,-35,-34,-69,63,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,63,63,63,63,63,-19,63,-70,-68,63,63,63,63,63,63,63,63,-102,-67,-99,63,63,63,]),'GT':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[64,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,64,-101,-35,-34,-69,64,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,64,64,64,64,64,-19,64,-70,-68,64,64,64,64,64,64,64,64,-102,-67,-99,64,64,64,]),'LEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[65,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,65,-101,-35,-34,-69,65,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,65,65,65,65,65,-19,65,-70,-68,65,65,65,65,65,65,65,65,-102,-67,-99,65,65,65,]),'GEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[66,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,66,-101,-35,-34,-69,66,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,66,66,66,66,66,-19,66,-70,-68,66,66,66,66,66,66,66,66,-102,-67,-99,66,66,66,]),'EQOP':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[67,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,67,-101,-35,-34,-69,67,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,67,67,67,67,67,-19,67,-70,-68,67,67,67,67,67,67,67,67,-102,-67,-99,67,67,67,]),'NEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[68,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,68,-101,-35,-34,-69,68,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,68,68,68,68,68,-19,68,-70,-68,68,68,68,68,68,68,68,68,-102,-67,-99,68,68,68,]),'AND':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[69,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,69,-101,-35,-34,-69,69,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,69,69,69,-19,69,-70,-68,69,69,69,69,69,69,69,69,-102,-67,-99,69,69,69,]),'OR':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[70,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,70,-101,-35,-34,-69,70,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,70,70,70,-19,70,-70,-68,70,70,70,70,70,70,70,70,-102,-67,-99,70,70,70,]),'DESU':([6,14,15,16,17,18,32,33,34,35,37,38,39,79,80,81,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,130,133,149,168,172,173,],[71,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,-101,-35,-34,-69,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-70,-68,-102,-67,-99,-36,]),'QMARK':([6,14,15,16,17,18,32,33,34,35,37,38,39,78,79,80,81,87,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,130,133,134,135,136,137,138,139,146,148,149,168,172,173,193,197,],[73,-14,-15,-16,-17,-18,-103,-104,-105,-106,-100,-66,-101,73,-101,-35,-34,-69,73,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,73,73,73,-19,73,-70,-68,73,73,73,73,73,73,73,73,-102,-67,-99,-36,73,73,]),'EQ':([8,26,27,39,46,100,105,106,140,157,158,169,],[76,-77,-78,91,104,-85,-82,-83,-84,76,91,186,]),'NOU':([9,10,11,12,31,56,74,75,77,85,164,165,182,183,184,188,191,192,196,198,199,200,201,202,203,205,206,207,],[-9,-10,-11,-12,86,-6,-7,-8,-13,-47,-60,-60,-51,-52,-55,-60,-60,-60,-56,-60,-60,-54,-60,-87,-88,-49,-50,-86,]),'RPAREN':([14,15,16,17,18,26,27,32,33,34,35,37,38,78,79,80,81,87,89,90,97,98,100,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,126,127,130,132,133,134,136,137,138,139,140,146,147,149,151,152,154,155,167,168,172,173,175,189,194,195,197,208,209,210,211,],[-14,-15,-16,-17,-18,-77,-78,-103,-104,-105,-106,-100,-66,125,-101,-35,-34,-69,-71,133,-45,-46,-85,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-81,153,-70,168,-68,-53,-41,-42,-43,-44,-84,171,172,-102,174,-79,177,178,-72,-67,-99,-36,-81,-80,-97,-98,-65,-89,-94,-95,-96,]),'COMMA':([14,15,16,17,18,26,27,32,33,34,35,37,38,79,80,81,87,89,100,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,130,133,140,149,152,168,172,173,],[-14,-15,-16,-17,-18,-77,-78,-103,-104,-105,-106,-100,-66,-101,-35,-34,-69,131,-85,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-70,-68,-84,-102,175,-67,-99,-36,]),'RBRACK':([14,15,16,17,18,32,33,34,35,36,37,38,79,80,81,87,88,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,130,133,135,149,167,168,172,173,],[-14,-15,-16,-17,-18,-103,-104,-105,-106,87,-100,-66,-101,-35,-34,-69,130,-71,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,149,-19,-70,-68,169,-102,-72,-67,-99,-36,]),'COL':([14,15,16,17,18,26,27,32,33,34,35,37,38,79,80,81,87,100,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,125,130,133,140,149,157,159,168,172,173,],[-14,-15,-16,-17,-18,-77,-78,-103,-104,-105,-106,-100,-66,-101,-35,-34,-69,-85,-82,-83,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,150,-19,-70,-68,-84,-102,180,181,-67,-99,-36,]),'PEQ':([39,158,],[93,93,]),'MEQ':([39,158,],[94,94,]),'TEQ':([39,158,],[95,95,]),'DEQ':([39,158,],[96,96,]),'PP':([39,158,],[97,97,]),'MM':([39,158,],[98,98,]),'HAREM':([42,47,48,49,50,51,52,107,],[99,-109,-110,-111,-112,-113,-114,99,]),'SQUIGGLY':([42,43,47,48,49,50,51,52,53,],[-108,101,-109,-110,-111,-112,-113,-114,-107,]),'LBRACE':([86,129,171,174,176,177,178,187,190,],[-58,166,-58,166,-58,166,166,166,166,]),'CHAN':([101,],[142,]),'KUN':([101,],[143,]),'SAN':([101,],[144,]),'SAMA':([101,],[145,]),'ISTUDIED':([153,],[176,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,166,],[3,185,]),'empty':([0,],[4,]),'singleStatement':([0,3,129,166,185,187,],[5,55,165,5,55,199,]),'expr':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[6,6,78,80,81,89,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,89,134,135,136,137,138,139,146,89,148,6,89,173,6,193,6,197,6,]),'assignment':([0,3,129,166,185,187,],[7,7,7,7,7,7,]),'declaration':([0,3,126,128,129,166,175,185,187,],[8,8,152,157,8,8,152,8,8,]),'functionDeclaration':([0,3,129,166,185,187,],[9,9,9,9,9,9,]),'whileLoop':([0,3,129,166,185,187,],[10,10,10,10,10,10,]),'forLoop':([0,3,129,166,185,187,],[11,11,11,11,11,11,]),'conditional':([0,3,129,166,185,187,],[12,12,12,12,12,12,]),'returnStatement':([0,3,129,166,185,187,],[13,13,13,13,13,13,]),'literal':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'arrayLiteral':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'reference':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'functionCall':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ternaryOp':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'reassign':([0,3,128,129,166,185,187,204,],[22,22,160,22,22,22,22,209,]),'initialize':([0,3,129,166,185,187,],[23,23,23,23,23,23,]),'arrayAssign':([0,3,128,129,166,185,187,204,],[24,24,162,24,24,24,24,210,]),'binOpAssign':([0,3,128,129,166,185,187,204,],[25,25,163,25,25,25,25,211,]),'arrayDeclaration':([0,3,54,126,128,129,166,175,185,187,],[26,26,105,26,26,26,26,26,26,26,]),'letDeclaration':([0,3,54,126,128,129,166,175,185,187,],[27,27,106,27,27,27,27,27,27,27,]),'fnHeader':([0,3,129,166,185,187,],[28,28,28,28,28,28,]),'if':([0,3,129,166,185,187,],[31,31,31,31,31,31,]),'letReference':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'printCall':([0,3,19,20,21,36,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,76,83,90,91,92,93,94,95,96,102,103,104,129,131,150,166,179,185,186,187,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'letInitialize':([0,3,128,129,166,185,187,],[40,40,161,40,40,40,40,]),'constInitialize':([0,3,129,166,185,187,],[41,41,41,41,41,41,]),'type':([0,3,54,126,128,129,166,175,185,187,],[42,42,107,107,107,42,42,107,42,42,]),'fnType':([0,3,129,166,185,187,],[43,43,43,43,43,43,]),'constDeclaration':([0,3,128,129,166,185,187,],[46,46,159,46,46,46,46,]),'newScope':([28,30,86,171,176,],[82,84,129,187,190,]),'else':([31,],[85,]),'exprLst':([36,90,103,131,],[88,132,147,167,]),'honorific':([101,],[141,]),'argumentDeclaration':([126,175,],[151,189,]),'forTrio':([128,],[154,]),'forElement':([128,],[155,]),'forAssign':([128,],[156,]),'enclosure':([129,174,177,178,187,190,],[164,188,191,192,198,201,]),'popScope':([164,165,188,191,192,198,199,201,],[182,183,200,202,203,205,206,207,]),'forReassign':([204,],[208,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',69),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',74),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',75),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',81),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',82),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',88),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',89),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',90),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',91),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',92),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',93),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',94),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',95),
  ('expr -> literal','expr',1,'p_expr','parser.py',101),
  ('expr -> arrayLiteral','expr',1,'p_expr','parser.py',102),
  ('expr -> reference','expr',1,'p_expr','parser.py',103),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',104),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',105),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_paren_expr','parser.py',111),
  ('expr -> expr PLUS expr','expr',3,'p_boolExpr','parser.py',121),
  ('expr -> expr MINUS expr','expr',3,'p_boolExpr','parser.py',122),
  ('expr -> expr TIMES expr','expr',3,'p_boolExpr','parser.py',123),
  ('expr -> expr DIVIDE expr','expr',3,'p_boolExpr','parser.py',124),
  ('expr -> expr MOD expr','expr',3,'p_boolExpr','parser.py',125),
  ('expr -> expr POW expr','expr',3,'p_boolExpr','parser.py',126),
  ('expr -> expr LT expr','expr',3,'p_boolExpr','parser.py',127),
  ('expr -> expr GT expr','expr',3,'p_boolExpr','parser.py',128),
  ('expr -> expr LEQ expr','expr',3,'p_boolExpr','parser.py',129),
  ('expr -> expr GEQ expr','expr',3,'p_boolExpr','parser.py',130),
  ('expr -> expr EQOP expr','expr',3,'p_equality_op','parser.py',187),
  ('expr -> expr NEQ expr','expr',3,'p_equality_op','parser.py',188),
  ('expr -> expr AND expr','expr',3,'p_boolExpr_op','parser.py',206),
  ('expr -> expr OR expr','expr',3,'p_boolExpr_op','parser.py',207),
  ('expr -> NOT expr','expr',2,'p_boolExprNeg','parser.py',227),
  ('expr -> MINUS expr','expr',2,'p_numExpr_uminus','parser.py',237),
  ('ternaryOp -> expr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',247),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',262),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',263),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',264),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',265),
  ('binOpAssign -> ID PEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',271),
  ('binOpAssign -> ID MEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',272),
  ('binOpAssign -> ID TEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',273),
  ('binOpAssign -> ID DEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',274),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',275),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',276),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',305),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',306),
  ('if -> NANI LPAREN expr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',312),
  ('if -> NANI LPAREN expr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',313),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',321),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',322),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',328),
  ('functionDeclaration -> fnHeader newScope LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',7,'p_functionDeclaration','parser.py',344),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',354),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',355),
  ('fnHeader -> fnType SQUIGGLY honorific ID','fnHeader',4,'p_functionHeader','parser.py',361),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',368),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',376),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',384),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',392),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',393),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',394),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',395),
  ('arrayAssign -> ID LBRACK expr RBRACK EQ expr','arrayAssign',6,'p_arrayAssign','parser.py',401),
  ('functionCall -> printCall','functionCall',1,'p_printCall','parser.py',421),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',426),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',427),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',445),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',446),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',469),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',470),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',479),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',480),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',486),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',501),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',517),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',518),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',525),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',526),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',527),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',539),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',540),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',549),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',560),
  ('whileLoop -> WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',568),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',578),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',579),
  ('forTrio -> forAssign SEMICOL expr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',585),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',593),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',594),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',595),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',596),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',602),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',603),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',604),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',610),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',611),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',618),
  ('reference -> letReference','reference',1,'p_reference','parser.py',627),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',633),
  ('reference -> expr LBRACK expr RBRACK','reference',4,'p_arrayReference','parser.py',661),
  ('literal -> NUMBER','literal',1,'p_numExpr_number','parser.py',685),
  ('literal -> STRING','literal',1,'p_strExpr','parser.py',691),
  ('literal -> OWO','literal',1,'p_bool','parser.py',697),
  ('literal -> UWU','literal',1,'p_bool','parser.py',698),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',709),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',710),
  ('type -> WAIFU','type',1,'p_type','parser.py',717),
  ('type -> HUSBANDO','type',1,'p_type','parser.py',718),
  ('type -> CATBOY','type',1,'p_type','parser.py',719),
  ('type -> CATGIRL','type',1,'p_type','parser.py',720),
  ('type -> SENPAI','type',1,'p_type','parser.py',721),
  ('type -> KOUHAI','type',1,'p_type','parser.py',722),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',728),
]
