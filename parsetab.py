
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftQMARKCOLleftANDORleftNEQLEQGEQLTGTEQOPleftPLUSMINUSleftTIMESDIVIDEMODleftPOWrightUMINUSNOTleftLPARENRPARENleftIDLBRACKRBRACKAND BAKA CATBOY CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM HUSBANDO ID ISTUDIED KOUHAI KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MOD NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS POW PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SENPAI SHI SQUIGGLY STRING TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : literal\n             | arrayLiteral\n             | reference\n             | functionCall\n             | ternaryOp\n     expr : LPAREN expr RPAREN\n     expr : expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIVIDE expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LT expr\n             | expr GT expr\n             | expr LEQ expr\n             | expr GEQ expr\n     expr : expr EQOP expr\n             | expr NEQ expr\n     expr : expr AND expr\n             | expr OR expr\n    expr : NOT exprexpr : MINUS expr %prec UMINUS ternaryOp : expr QMARK expr COL expr\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     binOpAssign : ID PEQ expr\n                    | ID MEQ expr\n                    | ID TEQ expr\n                    | ID DEQ expr\n                    | ID PP\n                    | ID MM\n     conditional : if else\n                    | if\n     if : NANI LPAREN expr RPAREN newScope enclosure popScope\n           | NANI LPAREN expr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : fnHeader LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    fnHeader : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n                        | empty DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : arrayReference EQ expr\n     functionCall : printCall  functionCall : ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : arrayDeclarationHelper IDarrayDeclarationHelper : type HAREM\n                              | arrayDeclarationHelper HAREMletDeclaration : type IDwhileLoop : WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL expr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL expr\n                   | constDeclaration COL expr\n    printCall : BAKA LPAREN exprLst RPAREN reference : letReference\n                  | arrayReference\n     letReference : ID\n     arrayReference : expr LBRACK expr RBRACK \n                       | ID LBRACK expr RBRACK\n    literal : NUMBERliteral : STRING literal : OWO\n                | UWU\n     fnType : YOKAI\n               | type\n               | arrayDeclarationHelper\n     type : WAIFU\n             | HUSBANDO\n             | CATBOY\n             | CATGIRL\n             | SENPAI\n             | KOUHAI\n     empty : '
    
_lr_action_items = {'DESU':([0,3,4,5,6,9,10,11,12,14,15,16,17,18,31,32,33,34,35,37,38,39,40,57,58,60,78,79,81,83,84,85,86,90,91,92,117,118,119,120,121,122,123,124,125,126,127,128,129,130,134,139,140,144,160,176,177,178,180,181,183,184,185,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[-121,-121,59,-5,75,-9,-10,-11,-12,-14,-15,-16,-17,-18,-48,-108,-109,-110,-111,-103,-104,-67,-105,-4,59,-6,-7,-8,-13,-104,-105,-35,-34,-47,-58,-70,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-121,-71,-69,-106,-61,-61,-121,-68,-107,-58,-102,-36,-61,-51,-52,-55,-121,-121,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'$end':([0,1,2,3,4,5,9,10,11,12,31,57,60,78,79,81,90,176,177,186,194,195,196,199,201,202,206,207,208,209,210,211,213,214,215,],[-121,0,-1,-2,-3,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-61,-61,-61,-51,-52,-55,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'LPAREN':([0,3,5,9,10,11,12,19,20,21,28,29,30,31,36,40,46,47,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,84,88,89,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,174,176,177,178,182,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[19,19,-5,-9,-10,-11,-12,19,19,19,87,88,-58,-48,19,96,110,111,-4,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-7,-8,19,-13,96,19,138,-47,-58,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,96,-61,-61,19,-57,-58,-61,19,19,19,-51,-52,-55,19,19,-54,-61,-61,-56,-61,-61,-61,-90,-91,19,-49,-50,-89,]),'NOT':([0,3,5,9,10,11,12,19,20,21,31,36,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[21,21,-5,-9,-10,-11,-12,21,21,21,-48,21,-4,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-7,-8,21,-13,21,-47,-58,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-61,-61,21,-58,-61,21,21,21,-51,-52,-55,21,21,-54,-61,-61,-56,-61,-61,-61,-90,-91,21,-49,-50,-89,]),'MINUS':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,20,21,31,32,33,34,35,36,37,38,39,40,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,88,90,91,92,94,95,96,97,98,99,100,101,104,110,111,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,144,145,146,147,148,149,150,156,158,159,160,167,174,175,176,177,178,180,181,183,184,185,186,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,],[20,20,-5,62,-9,-10,-11,-12,-14,-15,-16,-17,-18,20,20,20,-48,-108,-109,-110,-111,20,-103,-104,-67,-105,-4,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-7,-8,20,-13,62,-104,-105,-35,-34,20,-47,-58,-70,62,20,20,20,20,20,20,20,20,20,20,20,-20,-21,-22,-23,-24,-25,62,62,62,62,62,62,62,62,62,62,62,-19,62,20,20,-71,20,62,-69,62,62,62,62,62,62,62,62,20,-106,62,-105,-104,-61,-61,20,-68,-107,-58,-102,62,-61,20,20,20,-51,-52,-55,20,20,-54,-61,-61,62,62,62,-56,-61,-61,-61,-90,-91,20,-49,-50,-89,]),'WHILEU':([0,3,5,9,10,11,12,31,57,60,78,79,81,90,91,139,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[29,29,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,29,-61,-61,29,-58,-61,-51,-52,-55,29,29,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'SHI':([0,3,5,9,10,11,12,31,57,60,78,79,81,90,91,139,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[30,30,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,30,-61,-61,30,-58,-61,-51,-52,-55,30,30,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'NUMBER':([0,3,5,9,10,11,12,19,20,21,31,36,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[32,32,-5,-9,-10,-11,-12,32,32,32,-48,32,-4,-6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-7,-8,32,-13,32,-47,-58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-61,-61,32,-58,-61,32,32,32,-51,-52,-55,32,32,-54,-61,-61,-56,-61,-61,-61,-90,-91,32,-49,-50,-89,]),'STRING':([0,3,5,9,10,11,12,19,20,21,31,36,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[33,33,-5,-9,-10,-11,-12,33,33,33,-48,33,-4,-6,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-7,-8,33,-13,33,-47,-58,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-61,-61,33,-58,-61,33,33,33,-51,-52,-55,33,33,-54,-61,-61,-56,-61,-61,-61,-90,-91,33,-49,-50,-89,]),'OWO':([0,3,5,9,10,11,12,19,20,21,31,36,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[34,34,-5,-9,-10,-11,-12,34,34,34,-48,34,-4,-6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-7,-8,34,-13,34,-47,-58,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-61,-61,34,-58,-61,34,34,34,-51,-52,-55,34,34,-54,-61,-61,-56,-61,-61,-61,-90,-91,34,-49,-50,-89,]),'UWU':([0,3,5,9,10,11,12,19,20,21,31,36,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[35,35,-5,-9,-10,-11,-12,35,35,35,-48,35,-4,-6,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-7,-8,35,-13,35,-47,-58,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-61,-61,35,-58,-61,35,35,35,-51,-52,-55,35,35,-54,-61,-61,-56,-61,-61,-61,-90,-91,35,-49,-50,-89,]),'LBRACK':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,20,21,31,32,33,34,35,36,37,38,39,40,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,88,90,91,92,94,95,96,97,98,99,100,101,104,110,111,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,139,140,141,142,144,145,146,147,148,149,150,156,158,159,160,167,174,175,176,177,178,180,181,183,184,185,186,191,192,193,194,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,],[36,36,-5,77,-9,-10,-11,-12,-14,-15,-16,-17,-18,36,36,36,-48,-108,-109,-110,-111,36,-103,-104,-67,-105,-4,-6,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-7,-8,36,-13,77,-104,-105,77,77,36,-47,-58,-70,77,36,36,36,36,36,36,36,36,36,36,36,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-19,77,36,36,-71,36,77,-69,77,77,77,77,77,77,77,77,36,-106,77,-105,-104,-61,-61,36,-68,-107,-58,-102,77,-61,36,36,36,-51,-52,-55,36,36,-54,-61,-61,77,77,77,-56,-61,-61,-61,-90,-91,36,-49,-50,-89,]),'ID':([0,3,5,9,10,11,12,19,20,21,31,36,43,44,49,50,51,52,53,54,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,106,108,110,111,112,115,116,138,139,141,151,152,153,154,155,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[40,40,-5,-9,-10,-11,-12,84,84,84,-48,84,105,107,-115,-116,-117,-118,-119,-120,-4,-6,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-7,-8,84,-13,84,-47,-58,84,84,84,84,84,84,84,84,-87,-86,84,84,84,105,107,174,40,84,182,-62,-63,-64,-65,84,-61,-61,40,-58,-61,84,84,84,-51,-52,-55,40,40,-54,-61,-61,-56,-61,-61,-61,-90,-91,174,-49,-50,-89,]),'NANI':([0,3,5,9,10,11,12,31,57,60,78,79,81,90,91,139,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[46,46,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,46,-61,-61,46,-58,-61,-51,-52,-55,46,46,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'BAKA':([0,3,5,9,10,11,12,19,20,21,31,36,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,88,90,91,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,176,177,178,183,186,191,192,193,194,195,196,197,198,199,201,202,206,207,208,209,210,211,212,213,214,215,],[47,47,-5,-9,-10,-11,-12,47,47,47,-48,47,-4,-6,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-7,-8,47,-13,47,-47,-58,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-61,-61,47,-58,-61,47,47,47,-51,-52,-55,47,47,-54,-61,-61,-56,-61,-61,-61,-90,-91,47,-49,-50,-89,]),'WAIFU':([0,3,5,9,10,11,12,31,56,57,60,78,79,81,87,90,91,138,139,162,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[49,49,-5,-9,-10,-11,-12,-48,49,-4,-6,-7,-8,-13,49,-47,-58,49,49,49,-61,-61,49,-58,-61,-51,-52,-55,49,49,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'HUSBANDO':([0,3,5,9,10,11,12,31,56,57,60,78,79,81,87,90,91,138,139,162,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[50,50,-5,-9,-10,-11,-12,-48,50,-4,-6,-7,-8,-13,50,-47,-58,50,50,50,-61,-61,50,-58,-61,-51,-52,-55,50,50,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'CATBOY':([0,3,5,9,10,11,12,31,56,57,60,78,79,81,87,90,91,138,139,162,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[51,51,-5,-9,-10,-11,-12,-48,51,-4,-6,-7,-8,-13,51,-47,-58,51,51,51,-61,-61,51,-58,-61,-51,-52,-55,51,51,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'CATGIRL':([0,3,5,9,10,11,12,31,56,57,60,78,79,81,87,90,91,138,139,162,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[52,52,-5,-9,-10,-11,-12,-48,52,-4,-6,-7,-8,-13,52,-47,-58,52,52,52,-61,-61,52,-58,-61,-51,-52,-55,52,52,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'SENPAI':([0,3,5,9,10,11,12,31,56,57,60,78,79,81,87,90,91,138,139,162,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[53,53,-5,-9,-10,-11,-12,-48,53,-4,-6,-7,-8,-13,53,-47,-58,53,53,53,-61,-61,53,-58,-61,-51,-52,-55,53,53,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'KOUHAI':([0,3,5,9,10,11,12,31,56,57,60,78,79,81,87,90,91,138,139,162,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[54,54,-5,-9,-10,-11,-12,-48,54,-4,-6,-7,-8,-13,54,-47,-58,54,54,54,-61,-61,54,-58,-61,-51,-52,-55,54,54,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'YOKAI':([0,3,5,9,10,11,12,31,57,60,78,79,81,90,91,139,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[55,55,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,55,-61,-61,55,-58,-61,-51,-52,-55,55,55,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'REAL':([0,3,5,9,10,11,12,31,57,60,78,79,81,90,91,138,139,176,177,178,183,186,194,195,196,197,198,199,201,202,206,207,208,209,210,211,213,214,215,],[56,56,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,56,56,-61,-61,56,-58,-61,-51,-52,-55,56,56,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'RBRACE':([5,9,10,11,12,31,57,60,78,79,81,90,176,177,178,186,194,195,196,197,199,201,202,206,207,208,209,210,211,213,214,215,],[-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-61,-61,196,-61,-51,-52,-55,206,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'SEMICOL':([6,7,8,13,14,15,16,17,18,22,23,24,25,26,27,32,33,34,35,37,38,39,40,41,42,59,75,83,84,85,86,92,102,103,105,107,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,140,142,144,145,146,147,148,149,158,160,166,170,171,172,173,180,181,184,185,203,],[60,78,79,81,-14,-15,-16,-17,-18,-37,-38,-39,-40,-78,-79,-108,-109,-110,-111,-103,-104,-67,-105,-74,-75,-60,-59,-104,-105,-35,-34,-70,-45,-46,-85,-88,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-76,-19,-71,-66,-69,-53,-41,-42,-43,-44,-77,-106,191,-93,-94,-95,-96,-68,-107,-102,-36,212,]),'PLUS':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[61,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,61,-104,-105,-35,-34,-70,61,-20,-21,-22,-23,-24,-25,61,61,61,61,61,61,61,61,61,61,61,-19,61,-71,61,-69,61,61,61,61,61,61,61,61,-106,61,-105,-104,-68,-107,-102,61,61,61,61,]),'TIMES':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[63,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,63,-104,-105,-35,-34,-70,63,63,63,-22,-23,-24,-25,63,63,63,63,63,63,63,63,63,63,63,-19,63,-71,63,-69,63,63,63,63,63,63,63,63,-106,63,-105,-104,-68,-107,-102,63,63,63,63,]),'DIVIDE':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[64,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,64,-104,-105,-35,-34,-70,64,64,64,-22,-23,-24,-25,64,64,64,64,64,64,64,64,64,64,64,-19,64,-71,64,-69,64,64,64,64,64,64,64,64,-106,64,-105,-104,-68,-107,-102,64,64,64,64,]),'MOD':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[65,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,65,-104,-105,-35,-34,-70,65,65,65,-22,-23,-24,-25,65,65,65,65,65,65,65,65,65,65,65,-19,65,-71,65,-69,65,65,65,65,65,65,65,65,-106,65,-105,-104,-68,-107,-102,65,65,65,65,]),'POW':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[66,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,66,-104,-105,-35,-34,-70,66,66,66,66,66,66,-25,66,66,66,66,66,66,66,66,66,66,66,-19,66,-71,66,-69,66,66,66,66,66,66,66,66,-106,66,-105,-104,-68,-107,-102,66,66,66,66,]),'LT':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[67,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,67,-104,-105,-35,-34,-70,67,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,67,67,67,67,67,-19,67,-71,67,-69,67,67,67,67,67,67,67,67,-106,67,-105,-104,-68,-107,-102,67,67,67,67,]),'GT':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[68,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,68,-104,-105,-35,-34,-70,68,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,68,68,68,68,68,-19,68,-71,68,-69,68,68,68,68,68,68,68,68,-106,68,-105,-104,-68,-107,-102,68,68,68,68,]),'LEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[69,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,69,-104,-105,-35,-34,-70,69,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,69,69,69,69,69,-19,69,-71,69,-69,69,69,69,69,69,69,69,69,-106,69,-105,-104,-68,-107,-102,69,69,69,69,]),'GEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[70,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,70,-104,-105,-35,-34,-70,70,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,70,70,70,70,70,-19,70,-71,70,-69,70,70,70,70,70,70,70,70,-106,70,-105,-104,-68,-107,-102,70,70,70,70,]),'EQOP':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[71,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,71,-104,-105,-35,-34,-70,71,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,71,71,71,71,71,-19,71,-71,71,-69,71,71,71,71,71,71,71,71,-106,71,-105,-104,-68,-107,-102,71,71,71,71,]),'NEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[72,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,72,-104,-105,-35,-34,-70,72,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,72,72,72,72,72,-19,72,-71,72,-69,72,72,72,72,72,72,72,72,-106,72,-105,-104,-68,-107,-102,72,72,72,72,]),'AND':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[73,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,73,-104,-105,-35,-34,-70,73,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,73,73,73,-19,73,-71,73,-69,73,73,73,73,73,73,73,73,-106,73,-105,-104,-68,-107,-102,73,73,73,73,]),'OR':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[74,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,74,-104,-105,-35,-34,-70,74,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,74,74,74,-19,74,-71,74,-69,74,74,74,74,74,74,74,74,-106,74,-105,-104,-68,-107,-102,74,74,74,74,]),'QMARK':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,82,83,84,85,86,92,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,140,142,144,145,146,147,148,149,150,156,158,160,167,174,175,180,181,184,185,203,204,205,],[76,-14,-15,-16,-17,-18,-108,-109,-110,-111,-103,-104,-67,-105,76,-104,-105,-35,-34,-70,76,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,76,76,76,-19,76,-71,76,-69,76,76,76,76,76,76,76,76,-106,76,-105,-104,-68,-107,-102,-36,76,76,76,]),'EQ':([8,26,27,38,40,48,105,107,113,114,160,168,174,175,181,],[80,-78,-79,95,97,112,-85,-88,-83,-84,-106,80,97,95,-107,]),'NOU':([9,10,11,12,31,60,78,79,81,90,176,177,186,194,195,196,199,201,202,206,207,208,209,210,211,213,214,215,],[-9,-10,-11,-12,91,-6,-7,-8,-13,-47,-61,-61,-61,-51,-52,-55,-54,-61,-61,-56,-61,-61,-61,-90,-91,-49,-50,-89,]),'RPAREN':([14,15,16,17,18,26,27,32,33,34,35,37,39,82,83,84,85,86,87,92,94,96,102,103,105,107,117,118,119,120,121,122,123,124,125,126,127,128,129,130,134,135,136,137,140,142,143,144,145,146,147,148,149,156,157,160,162,164,165,179,180,181,184,185,187,204,205,216,217,218,219,],[-14,-15,-16,-17,-18,-78,-79,-108,-109,-110,-111,-103,-67,134,-104,-105,-35,-34,-82,-70,-72,144,-45,-46,-85,-88,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,161,-80,163,-71,-66,180,-69,-53,-41,-42,-43,-44,183,184,-106,-82,189,190,-73,-68,-107,-102,-36,-81,-100,-101,-92,-97,-98,-99,]),'COMMA':([14,15,16,17,18,26,27,32,33,34,35,37,39,83,84,85,86,92,94,105,107,117,118,119,120,121,122,123,124,125,126,127,128,129,130,134,136,140,144,160,180,181,184,185,],[-14,-15,-16,-17,-18,-78,-79,-108,-109,-110,-111,-103,-67,-104,-105,-35,-34,-70,141,-85,-88,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,162,-71,-69,-106,-68,-107,-102,-36,]),'RBRACK':([14,15,16,17,18,32,33,34,35,36,37,39,83,84,85,86,92,93,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,140,144,150,160,179,180,181,184,185,],[-14,-15,-16,-17,-18,-108,-109,-110,-111,92,-103,-67,-104,-105,-35,-34,-70,140,-72,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,160,-19,-71,-69,181,-106,-73,-68,-107,-102,-36,]),'COL':([14,15,16,17,18,26,27,32,33,34,35,37,39,83,84,85,86,92,105,107,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,140,144,160,168,169,180,181,184,185,],[-14,-15,-16,-17,-18,-78,-79,-108,-109,-110,-111,-103,-67,-104,-105,-35,-34,-70,-85,-88,-83,-84,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,159,-19,-71,-69,-106,192,193,-68,-107,-102,-36,]),'PEQ':([40,174,],[98,98,]),'MEQ':([40,174,],[99,99,]),'TEQ':([40,174,],[100,100,]),'DEQ':([40,174,],[101,101,]),'PP':([40,174,],[102,102,]),'MM':([40,174,],[103,103,]),'HAREM':([43,44,49,50,51,52,53,54,106,108,115,116,],[106,108,-115,-116,-117,-118,-119,-120,-87,-86,106,108,]),'SQUIGGLY':([43,44,45,49,50,51,52,53,54,55,106,108,],[-114,-113,109,-115,-116,-117,-118,-119,-120,-112,-87,-86,]),'LBRACE':([91,139,161,183,188,189,190,198,200,],[-58,178,178,-58,-58,178,178,178,178,]),'CHAN':([109,],[152,]),'KUN':([109,],[153,]),'SAN':([109,],[154,]),'SAMA':([109,],[155,]),'ISTUDIED':([163,],[188,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,178,],[3,197,]),'empty':([0,3,139,178,197,198,],[4,58,58,58,58,58,]),'singleStatement':([0,3,139,178,197,198,],[5,57,177,5,57,208,]),'expr':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[6,6,82,85,86,94,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,137,142,94,145,146,147,148,149,150,156,94,158,167,6,94,185,6,203,204,205,6,6,167,]),'assignment':([0,3,139,178,197,198,],[7,7,7,7,7,7,]),'declaration':([0,3,87,138,139,162,178,197,198,],[8,8,136,168,8,136,8,8,8,]),'functionDeclaration':([0,3,139,178,197,198,],[9,9,9,9,9,9,]),'whileLoop':([0,3,139,178,197,198,],[10,10,10,10,10,10,]),'forLoop':([0,3,139,178,197,198,],[11,11,11,11,11,11,]),'conditional':([0,3,139,178,197,198,],[12,12,12,12,12,12,]),'returnStatement':([0,3,139,178,197,198,],[13,13,13,13,13,13,]),'literal':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'arrayLiteral':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'reference':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'functionCall':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ternaryOp':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'reassign':([0,3,138,139,178,197,198,212,],[22,22,170,22,22,22,22,217,]),'initialize':([0,3,139,178,197,198,],[23,23,23,23,23,23,]),'arrayAssign':([0,3,138,139,178,197,198,212,],[24,24,172,24,24,24,24,218,]),'binOpAssign':([0,3,138,139,178,197,198,212,],[25,25,173,25,25,25,25,219,]),'arrayDeclaration':([0,3,56,87,138,139,162,178,197,198,],[26,26,113,26,26,26,26,26,26,26,]),'letDeclaration':([0,3,56,87,138,139,162,178,197,198,],[27,27,114,27,27,27,27,27,27,27,]),'fnHeader':([0,3,139,178,197,198,],[28,28,28,28,28,28,]),'if':([0,3,139,178,197,198,],[31,31,31,31,31,31,]),'letReference':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'arrayReference':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[38,38,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,175,38,83,83,38,83,83,83,38,38,175,]),'printCall':([0,3,19,20,21,36,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,88,95,96,97,98,99,100,101,104,110,111,112,138,139,141,159,178,191,192,193,197,198,212,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'letInitialize':([0,3,138,139,178,197,198,],[41,41,171,41,41,41,41,]),'constInitialize':([0,3,139,178,197,198,],[42,42,42,42,42,42,]),'arrayDeclarationHelper':([0,3,56,87,138,139,162,178,197,198,],[43,43,115,115,115,43,115,43,43,43,]),'type':([0,3,56,87,138,139,162,178,197,198,],[44,44,116,116,116,44,116,44,44,44,]),'fnType':([0,3,139,178,197,198,],[45,45,45,45,45,45,]),'constDeclaration':([0,3,138,139,178,197,198,],[48,48,169,48,48,48,48,]),'newScope':([30,91,183,188,],[89,139,198,200,]),'else':([31,],[90,]),'exprLst':([36,96,111,141,],[93,143,157,179,]),'argumentDeclaration':([87,162,],[135,187,]),'honorific':([109,],[151,]),'forTrio':([138,],[164,]),'forElement':([138,],[165,]),'forAssign':([138,],[166,]),'enclosure':([139,161,189,190,198,200,],[176,186,201,202,207,209,]),'popScope':([176,177,186,201,202,207,208,209,],[194,195,199,210,211,213,214,215,]),'forReassign':([212,],[216,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',82),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',87),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',88),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',94),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',95),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',101),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',102),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',103),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',104),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',105),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',106),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',107),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',108),
  ('expr -> literal','expr',1,'p_expr','parser.py',114),
  ('expr -> arrayLiteral','expr',1,'p_expr','parser.py',115),
  ('expr -> reference','expr',1,'p_expr','parser.py',116),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',117),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',118),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_paren_expr','parser.py',124),
  ('expr -> expr PLUS expr','expr',3,'p_boolExpr','parser.py',133),
  ('expr -> expr MINUS expr','expr',3,'p_boolExpr','parser.py',134),
  ('expr -> expr TIMES expr','expr',3,'p_boolExpr','parser.py',135),
  ('expr -> expr DIVIDE expr','expr',3,'p_boolExpr','parser.py',136),
  ('expr -> expr MOD expr','expr',3,'p_boolExpr','parser.py',137),
  ('expr -> expr POW expr','expr',3,'p_boolExpr','parser.py',138),
  ('expr -> expr LT expr','expr',3,'p_boolExpr','parser.py',139),
  ('expr -> expr GT expr','expr',3,'p_boolExpr','parser.py',140),
  ('expr -> expr LEQ expr','expr',3,'p_boolExpr','parser.py',141),
  ('expr -> expr GEQ expr','expr',3,'p_boolExpr','parser.py',142),
  ('expr -> expr EQOP expr','expr',3,'p_equality_op','parser.py',202),
  ('expr -> expr NEQ expr','expr',3,'p_equality_op','parser.py',203),
  ('expr -> expr AND expr','expr',3,'p_boolExpr_op','parser.py',221),
  ('expr -> expr OR expr','expr',3,'p_boolExpr_op','parser.py',222),
  ('expr -> NOT expr','expr',2,'p_boolExprNeg','parser.py',242),
  ('expr -> MINUS expr','expr',2,'p_numExpr_uminus','parser.py',252),
  ('ternaryOp -> expr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',262),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',279),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',280),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',281),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',282),
  ('binOpAssign -> ID PEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',288),
  ('binOpAssign -> ID MEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',289),
  ('binOpAssign -> ID TEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',290),
  ('binOpAssign -> ID DEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',291),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',292),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',293),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',324),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',325),
  ('if -> NANI LPAREN expr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',331),
  ('if -> NANI LPAREN expr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',332),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',340),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',341),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',347),
  ('functionDeclaration -> fnHeader LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',6,'p_functionDeclaration','parser.py',366),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',376),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',377),
  ('fnHeader -> fnType SQUIGGLY honorific ID','fnHeader',4,'p_functionHeader','parser.py',383),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',398),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',406),
  ('returnStatement -> empty DESU','returnStatement',2,'p_returnStatement','parser.py',407),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',424),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',432),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',433),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',434),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',435),
  ('arrayAssign -> arrayReference EQ expr','arrayAssign',3,'p_arrayAssign','parser.py',441),
  ('functionCall -> printCall','functionCall',1,'p_printCall','parser.py',463),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',468),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',469),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',498),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',499),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',522),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',523),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',532),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',533),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',539),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',555),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',570),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',571),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',578),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',579),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',580),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',593),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',594),
  ('arrayDeclaration -> arrayDeclarationHelper ID','arrayDeclaration',2,'p_arrayDeclaration','parser.py',604),
  ('arrayDeclarationHelper -> type HAREM','arrayDeclarationHelper',2,'p_arrayDeclarationHelper','parser.py',613),
  ('arrayDeclarationHelper -> arrayDeclarationHelper HAREM','arrayDeclarationHelper',2,'p_arrayDeclarationHelper','parser.py',614),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',620),
  ('whileLoop -> WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',628),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',638),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',639),
  ('forTrio -> forAssign SEMICOL expr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',645),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',653),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',654),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',655),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',656),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',662),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',663),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',664),
  ('forElement -> declaration COL expr','forElement',3,'p_forElement','parser.py',671),
  ('forElement -> constDeclaration COL expr','forElement',3,'p_forElement','parser.py',672),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',686),
  ('reference -> letReference','reference',1,'p_reference','parser.py',694),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',695),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',701),
  ('arrayReference -> expr LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',722),
  ('arrayReference -> ID LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',723),
  ('literal -> NUMBER','literal',1,'p_numExpr_number','parser.py',773),
  ('literal -> STRING','literal',1,'p_strExpr','parser.py',779),
  ('literal -> OWO','literal',1,'p_bool','parser.py',785),
  ('literal -> UWU','literal',1,'p_bool','parser.py',786),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',796),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',797),
  ('fnType -> arrayDeclarationHelper','fnType',1,'p_fnType','parser.py',798),
  ('type -> WAIFU','type',1,'p_type','parser.py',810),
  ('type -> HUSBANDO','type',1,'p_type','parser.py',811),
  ('type -> CATBOY','type',1,'p_type','parser.py',812),
  ('type -> CATGIRL','type',1,'p_type','parser.py',813),
  ('type -> SENPAI','type',1,'p_type','parser.py',814),
  ('type -> KOUHAI','type',1,'p_type','parser.py',815),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',821),
]
