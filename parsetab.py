
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftQMARKCOLleftANDORleftNEQLEQGEQLTGTEQOPleftPLUSMINUSleftTIMESDIVIDEMODleftPOWrightUMINUSNOTleftLPARENRPARENleftIDLBRACKRBRACKAND BAKA CATBOY CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM HUSBANDO ID ISTUDIED KOUHAI KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MOD NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS POW PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SENPAI SHI SQUIGGLY STRING TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | standAloneFuncCall SEMICOL\n                        | returnStatement SEMICOL\n     expr : literal\n             | arrayLiteral\n             | reference\n             | functionCall\n             | ternaryOp\n     expr : LPAREN expr RPAREN\n     expr : expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIVIDE expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LT expr\n             | expr GT expr\n             | expr LEQ expr\n             | expr GEQ expr\n     expr : expr EQOP expr\n             | expr NEQ expr\n     expr : expr AND expr\n             | expr OR expr\n    expr : NOT exprexpr : MINUS expr %prec UMINUS ternaryOp : expr QMARK expr COL expr\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     binOpAssign : ID PEQ expr\n                    | ID MEQ expr\n                    | ID TEQ expr\n                    | ID DEQ expr\n                    | ID PP\n                    | ID MM\n     conditional : if else\n                    | if\n     if : NANI LPAREN expr RPAREN newScope enclosure popScope\n           | NANI LPAREN expr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : fnHeader LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    fnHeader : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n                        | empty DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : arrayReference EQ expr\n    standAloneFuncCall : ID LPAREN exprLst RPAREN\n                          | ID LPAREN RPAREN functionCall : printCall  functionCall : ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL expr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN reference : letReference\n                  | arrayReference\n     letReference : ID\n     arrayReference : expr LBRACK expr RBRACK \n                       | ID LBRACK expr RBRACK\n    literal : NUMBERliteral : STRING literal : OWO\n                | UWU\n     fnType : YOKAI\n               | type\n               | type HAREM\n     type : WAIFU\n             | HUSBANDO\n             | CATBOY\n             | CATGIRL\n             | SENPAI\n             | KOUHAI\n     empty : '
    
_lr_action_items = {'DESU':([0,3,4,5,6,9,10,11,12,15,16,17,18,19,32,33,34,35,36,37,39,40,41,57,58,60,78,79,81,82,84,85,86,87,91,92,102,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,138,140,147,161,163,179,180,181,182,183,186,187,188,189,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[-122,-122,59,-5,75,-9,-10,-11,-12,-15,-16,-17,-18,-19,-49,-106,-109,-110,-111,-112,-104,-105,-70,-4,59,-6,-7,-8,-13,-14,-105,-106,-36,-35,-48,-59,-73,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-20,-122,-72,-74,-107,-72,-62,-62,-122,-71,-108,-59,-103,-37,-71,-62,-52,-53,-56,-122,-122,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'$end':([0,1,2,3,4,5,9,10,11,12,32,57,60,78,79,81,82,91,179,180,190,198,199,200,203,205,206,210,211,212,213,214,215,217,218,219,],[-122,0,-1,-2,-3,-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-62,-62,-62,-52,-53,-56,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'LPAREN':([0,3,5,9,10,11,12,20,21,22,29,30,31,32,33,38,46,47,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,85,89,90,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,172,179,180,181,185,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[20,20,-5,-9,-10,-11,-12,20,20,20,88,89,-59,-49,93,20,109,110,-4,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-7,-8,20,-13,-14,133,20,137,-48,-59,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,133,-62,-62,20,-58,-59,-62,20,-52,-53,-56,20,20,-55,-62,-62,-57,-62,-62,-62,-91,-92,20,-50,-51,-90,]),'NOT':([0,3,5,9,10,11,12,20,21,22,32,38,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,179,180,181,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[22,22,-5,-9,-10,-11,-12,22,22,22,-49,22,-4,-6,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-7,-8,22,-13,-14,22,-48,-59,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-62,-62,22,-59,-62,22,-52,-53,-56,22,22,-55,-62,-62,-57,-62,-62,-62,-91,-92,22,-50,-51,-90,]),'MINUS':([0,3,5,6,9,10,11,12,15,16,17,18,19,20,21,22,32,33,34,35,36,37,38,39,40,41,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,93,94,95,96,97,98,101,102,104,105,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,138,140,141,142,143,144,145,146,147,148,149,156,158,160,161,163,170,172,178,179,180,181,182,183,186,187,188,189,190,195,198,199,200,201,202,203,205,206,207,210,211,212,213,214,215,216,217,218,219,],[21,21,-5,62,-9,-10,-11,-12,-15,-16,-17,-18,-19,21,21,21,-49,-106,-109,-110,-111,-112,21,-104,-105,-70,-4,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-7,-8,21,-13,-14,62,-105,-106,-36,-35,21,-48,-59,21,21,21,21,21,21,21,-73,62,21,21,21,21,-21,-22,-23,-24,-25,-26,62,62,62,62,62,62,62,62,62,62,62,-20,21,62,21,21,-72,62,62,62,62,62,62,-74,21,62,62,62,21,-107,-72,62,-106,-105,-62,-62,21,-71,-108,-59,-103,62,-71,-62,21,-52,-53,-56,21,21,-55,-62,-62,62,-57,-62,-62,-62,-91,-92,21,-50,-51,-90,]),'WHILEU':([0,3,5,9,10,11,12,32,57,60,78,79,81,82,91,92,138,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[30,30,-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-59,30,-62,-62,30,-59,-62,-52,-53,-56,30,30,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'SHI':([0,3,5,9,10,11,12,32,57,60,78,79,81,82,91,92,138,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[31,31,-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-59,31,-62,-62,31,-59,-62,-52,-53,-56,31,31,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'ID':([0,3,5,9,10,11,12,20,21,22,32,38,44,49,50,51,52,53,54,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,106,109,110,111,114,133,137,138,148,151,152,153,154,155,159,160,179,180,181,186,190,195,196,197,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[33,33,-5,-9,-10,-11,-12,85,85,85,-49,85,107,-116,-117,-118,-119,-120,-121,-4,-6,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-7,-8,85,-13,-14,85,-48,-59,85,85,85,85,85,85,85,85,150,85,85,85,107,85,172,33,85,185,-63,-64,-65,-66,150,85,-62,-62,33,-59,-62,85,208,209,-52,-53,-56,33,33,-55,-62,-62,-57,-62,-62,-62,-91,-92,172,-50,-51,-90,]),'NUMBER':([0,3,5,9,10,11,12,20,21,22,32,38,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,179,180,181,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[34,34,-5,-9,-10,-11,-12,34,34,34,-49,34,-4,-6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-7,-8,34,-13,-14,34,-48,-59,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-62,-62,34,-59,-62,34,-52,-53,-56,34,34,-55,-62,-62,-57,-62,-62,-62,-91,-92,34,-50,-51,-90,]),'STRING':([0,3,5,9,10,11,12,20,21,22,32,38,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,179,180,181,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[35,35,-5,-9,-10,-11,-12,35,35,35,-49,35,-4,-6,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-7,-8,35,-13,-14,35,-48,-59,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-62,-62,35,-59,-62,35,-52,-53,-56,35,35,-55,-62,-62,-57,-62,-62,-62,-91,-92,35,-50,-51,-90,]),'OWO':([0,3,5,9,10,11,12,20,21,22,32,38,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,179,180,181,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[36,36,-5,-9,-10,-11,-12,36,36,36,-49,36,-4,-6,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-7,-8,36,-13,-14,36,-48,-59,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-62,-62,36,-59,-62,36,-52,-53,-56,36,36,-55,-62,-62,-57,-62,-62,-62,-91,-92,36,-50,-51,-90,]),'UWU':([0,3,5,9,10,11,12,20,21,22,32,38,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,179,180,181,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[37,37,-5,-9,-10,-11,-12,37,37,37,-49,37,-4,-6,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-7,-8,37,-13,-14,37,-48,-59,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-62,-62,37,-59,-62,37,-52,-53,-56,37,37,-55,-62,-62,-57,-62,-62,-62,-91,-92,37,-50,-51,-90,]),'LBRACK':([0,3,5,6,9,10,11,12,15,16,17,18,19,20,21,22,32,33,34,35,36,37,38,39,40,41,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,93,94,95,96,97,98,101,102,104,105,109,110,111,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,137,138,140,141,142,143,144,145,146,147,148,149,156,158,160,161,163,170,172,178,179,180,181,182,183,186,187,188,189,190,195,198,199,200,201,202,203,205,206,207,210,211,212,213,214,215,216,217,218,219,],[38,38,-5,77,-9,-10,-11,-12,-15,-16,-17,-18,-19,38,38,38,-49,-106,-109,-110,-111,-112,38,-104,-105,-70,-4,-6,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-7,-8,38,-13,-14,77,-105,-106,77,77,38,-48,-59,38,38,38,38,38,38,38,-73,77,38,38,38,38,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-20,38,77,38,38,-72,77,77,77,77,77,77,-74,38,77,77,77,38,-107,-72,77,-106,-105,-62,-62,38,-71,-108,-59,-103,77,-71,-62,38,-52,-53,-56,38,38,-55,-62,-62,77,-57,-62,-62,-62,-91,-92,38,-50,-51,-90,]),'NANI':([0,3,5,9,10,11,12,32,57,60,78,79,81,82,91,92,138,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[46,46,-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-59,46,-62,-62,46,-59,-62,-52,-53,-56,46,46,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'BAKA':([0,3,5,9,10,11,12,20,21,22,32,38,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,89,91,92,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,179,180,181,186,190,195,198,199,200,201,202,203,205,206,210,211,212,213,214,215,216,217,218,219,],[47,47,-5,-9,-10,-11,-12,47,47,47,-49,47,-4,-6,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-7,-8,47,-13,-14,47,-48,-59,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-62,-62,47,-59,-62,47,-52,-53,-56,47,47,-55,-62,-62,-57,-62,-62,-62,-91,-92,47,-50,-51,-90,]),'WAIFU':([0,3,5,9,10,11,12,32,56,57,60,78,79,81,82,88,91,92,137,138,165,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[49,49,-5,-9,-10,-11,-12,-49,49,-4,-6,-7,-8,-13,-14,49,-48,-59,49,49,49,-62,-62,49,-59,-62,-52,-53,-56,49,49,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'HUSBANDO':([0,3,5,9,10,11,12,32,56,57,60,78,79,81,82,88,91,92,137,138,165,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[50,50,-5,-9,-10,-11,-12,-49,50,-4,-6,-7,-8,-13,-14,50,-48,-59,50,50,50,-62,-62,50,-59,-62,-52,-53,-56,50,50,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'CATBOY':([0,3,5,9,10,11,12,32,56,57,60,78,79,81,82,88,91,92,137,138,165,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[51,51,-5,-9,-10,-11,-12,-49,51,-4,-6,-7,-8,-13,-14,51,-48,-59,51,51,51,-62,-62,51,-59,-62,-52,-53,-56,51,51,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'CATGIRL':([0,3,5,9,10,11,12,32,56,57,60,78,79,81,82,88,91,92,137,138,165,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[52,52,-5,-9,-10,-11,-12,-49,52,-4,-6,-7,-8,-13,-14,52,-48,-59,52,52,52,-62,-62,52,-59,-62,-52,-53,-56,52,52,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'SENPAI':([0,3,5,9,10,11,12,32,56,57,60,78,79,81,82,88,91,92,137,138,165,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[53,53,-5,-9,-10,-11,-12,-49,53,-4,-6,-7,-8,-13,-14,53,-48,-59,53,53,53,-62,-62,53,-59,-62,-52,-53,-56,53,53,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'KOUHAI':([0,3,5,9,10,11,12,32,56,57,60,78,79,81,82,88,91,92,137,138,165,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[54,54,-5,-9,-10,-11,-12,-49,54,-4,-6,-7,-8,-13,-14,54,-48,-59,54,54,54,-62,-62,54,-59,-62,-52,-53,-56,54,54,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'YOKAI':([0,3,5,9,10,11,12,32,57,60,78,79,81,82,91,92,138,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[55,55,-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-59,55,-62,-62,55,-59,-62,-52,-53,-56,55,55,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'REAL':([0,3,5,9,10,11,12,32,57,60,78,79,81,82,91,92,137,138,179,180,181,186,190,198,199,200,201,202,203,205,206,210,211,212,213,214,215,217,218,219,],[56,56,-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-59,56,56,-62,-62,56,-59,-62,-52,-53,-56,56,56,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'RBRACE':([5,9,10,11,12,32,57,60,78,79,81,82,91,179,180,181,190,198,199,200,201,203,205,206,210,211,212,213,214,215,217,218,219,],[-5,-9,-10,-11,-12,-49,-4,-6,-7,-8,-13,-14,-48,-62,-62,200,-62,-52,-53,-56,210,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'SEMICOL':([6,7,8,13,14,15,16,17,18,19,23,24,25,26,27,28,33,34,35,36,37,39,40,41,42,43,59,75,84,85,86,87,99,100,102,107,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,132,140,141,142,143,144,145,147,149,150,158,161,163,169,174,175,176,177,182,183,187,188,189,207,],[60,78,79,81,82,-15,-16,-17,-18,-19,-38,-39,-40,-41,-81,-82,-106,-109,-110,-111,-112,-104,-105,-70,-77,-78,-61,-60,-105,-106,-36,-35,-46,-47,-73,-89,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-79,-20,-69,-54,-42,-43,-44,-45,-74,-67,-88,-80,-107,-72,195,-94,-95,-96,-97,-68,-108,-103,-37,-71,216,]),'PLUS':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[61,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,61,-105,-106,-36,-35,-73,61,-21,-22,-23,-24,-25,-26,61,61,61,61,61,61,61,61,61,61,61,-20,61,-72,61,61,61,61,61,61,-74,61,61,61,-107,-72,61,-106,-105,-71,-108,-103,61,-71,61,]),'TIMES':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[63,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,63,-105,-106,-36,-35,-73,63,63,63,-23,-24,-25,-26,63,63,63,63,63,63,63,63,63,63,63,-20,63,-72,63,63,63,63,63,63,-74,63,63,63,-107,-72,63,-106,-105,-71,-108,-103,63,-71,63,]),'DIVIDE':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[64,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,64,-105,-106,-36,-35,-73,64,64,64,-23,-24,-25,-26,64,64,64,64,64,64,64,64,64,64,64,-20,64,-72,64,64,64,64,64,64,-74,64,64,64,-107,-72,64,-106,-105,-71,-108,-103,64,-71,64,]),'MOD':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[65,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,65,-105,-106,-36,-35,-73,65,65,65,-23,-24,-25,-26,65,65,65,65,65,65,65,65,65,65,65,-20,65,-72,65,65,65,65,65,65,-74,65,65,65,-107,-72,65,-106,-105,-71,-108,-103,65,-71,65,]),'POW':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[66,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,66,-105,-106,-36,-35,-73,66,66,66,66,66,66,-26,66,66,66,66,66,66,66,66,66,66,66,-20,66,-72,66,66,66,66,66,66,-74,66,66,66,-107,-72,66,-106,-105,-71,-108,-103,66,-71,66,]),'LT':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[67,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,67,-105,-106,-36,-35,-73,67,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,67,67,67,67,67,-20,67,-72,67,67,67,67,67,67,-74,67,67,67,-107,-72,67,-106,-105,-71,-108,-103,67,-71,67,]),'GT':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[68,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,68,-105,-106,-36,-35,-73,68,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,68,68,68,68,68,-20,68,-72,68,68,68,68,68,68,-74,68,68,68,-107,-72,68,-106,-105,-71,-108,-103,68,-71,68,]),'LEQ':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[69,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,69,-105,-106,-36,-35,-73,69,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,69,69,69,69,69,-20,69,-72,69,69,69,69,69,69,-74,69,69,69,-107,-72,69,-106,-105,-71,-108,-103,69,-71,69,]),'GEQ':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[70,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,70,-105,-106,-36,-35,-73,70,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,70,70,70,70,70,-20,70,-72,70,70,70,70,70,70,-74,70,70,70,-107,-72,70,-106,-105,-71,-108,-103,70,-71,70,]),'EQOP':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[71,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,71,-105,-106,-36,-35,-73,71,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,71,71,71,71,71,-20,71,-72,71,71,71,71,71,71,-74,71,71,71,-107,-72,71,-106,-105,-71,-108,-103,71,-71,71,]),'NEQ':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[72,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,72,-105,-106,-36,-35,-73,72,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,72,72,72,72,72,-20,72,-72,72,72,72,72,72,72,-74,72,72,72,-107,-72,72,-106,-105,-71,-108,-103,72,-71,72,]),'AND':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[73,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,73,-105,-106,-36,-35,-73,73,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,73,73,73,-20,73,-72,73,73,73,73,73,73,-74,73,73,73,-107,-72,73,-106,-105,-71,-108,-103,73,-71,73,]),'OR':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[74,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,74,-105,-106,-36,-35,-73,74,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,74,74,74,-20,74,-72,74,74,74,74,74,74,-74,74,74,74,-107,-72,74,-106,-105,-71,-108,-103,74,-71,74,]),'QMARK':([6,15,16,17,18,19,33,34,35,36,37,39,40,41,83,84,85,86,87,102,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,136,140,141,142,143,144,145,146,147,149,156,158,161,163,170,172,178,182,183,187,188,189,207,],[76,-15,-16,-17,-18,-19,-106,-109,-110,-111,-112,-104,-105,-70,76,-105,-106,-36,-35,-73,76,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,76,76,76,-20,76,-72,76,76,76,76,76,76,-74,76,76,76,-107,-72,76,-106,-105,-71,-108,-103,-37,-71,76,]),'EQ':([8,27,28,33,40,48,107,112,113,150,161,171,172,178,183,],[80,-81,-82,94,105,111,-89,-86,-87,-88,-107,80,94,105,-108,]),'NOU':([9,10,11,12,32,60,78,79,81,82,91,179,180,190,198,199,200,203,205,206,210,211,212,213,214,215,217,218,219,],[-9,-10,-11,-12,92,-6,-7,-8,-13,-14,-48,-62,-62,-62,-52,-53,-56,-55,-62,-62,-57,-62,-62,-62,-91,-92,-50,-51,-90,]),'RPAREN':([15,16,17,18,19,27,28,34,35,36,37,39,41,83,84,85,86,87,88,93,99,100,102,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,134,135,136,139,141,142,143,144,145,147,149,150,156,157,161,162,163,165,167,168,183,184,187,188,189,191,208,209,220,221,222,223,],[-15,-16,-17,-18,-19,-81,-82,-109,-110,-111,-112,-104,-70,132,-105,-106,-36,-35,-85,140,-46,-47,-73,-75,-89,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-20,163,164,-83,166,182,-54,-42,-43,-44,-45,-74,-67,-88,186,187,-107,189,-72,-85,193,194,-108,-76,-103,-37,-71,-84,-101,-102,-93,-98,-99,-100,]),'COMMA':([15,16,17,18,19,27,28,34,35,36,37,39,41,84,85,86,87,102,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,135,147,150,161,163,183,187,188,189,],[-15,-16,-17,-18,-19,-81,-82,-109,-110,-111,-112,-104,-70,-105,-106,-36,-35,-73,148,-89,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-20,165,-74,-88,-107,-72,-108,-103,-37,-71,]),'RBRACK':([15,16,17,18,19,34,35,36,37,38,39,41,84,85,86,87,102,103,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,146,147,161,163,183,184,187,188,189,],[-15,-16,-17,-18,-19,-109,-110,-111,-112,102,-104,-70,-105,-106,-36,-35,-73,147,-75,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,161,-20,183,-74,-107,-72,-108,-76,-103,-37,-71,]),'COL':([15,16,17,18,19,27,28,34,35,36,37,39,41,84,85,86,87,102,107,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,147,150,161,163,171,173,183,187,188,189,],[-15,-16,-17,-18,-19,-81,-82,-109,-110,-111,-112,-104,-70,-105,-106,-36,-35,-73,-89,-86,-87,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,160,-20,-74,-88,-107,-72,196,197,-108,-103,-37,-71,]),'PEQ':([33,172,],[95,95,]),'MEQ':([33,172,],[96,96,]),'TEQ':([33,172,],[97,97,]),'DEQ':([33,172,],[98,98,]),'PP':([33,172,],[99,99,]),'MM':([33,172,],[100,100,]),'HAREM':([44,49,50,51,52,53,54,114,],[106,-116,-117,-118,-119,-120,-121,159,]),'SQUIGGLY':([44,45,49,50,51,52,53,54,55,106,],[-114,108,-116,-117,-118,-119,-120,-121,-113,-115,]),'LBRACE':([92,138,164,186,192,193,194,202,204,],[-59,181,181,-59,-59,181,181,181,181,]),'CHAN':([108,],[152,]),'KUN':([108,],[153,]),'SAN':([108,],[154,]),'SAMA':([108,],[155,]),'ISTUDIED':([166,],[192,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,181,],[3,201,]),'empty':([0,3,138,181,201,202,],[4,58,58,58,58,58,]),'singleStatement':([0,3,138,181,201,202,],[5,57,180,5,57,212,]),'expr':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[6,6,83,86,87,104,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,104,141,142,143,144,145,146,149,156,104,158,104,170,6,104,188,6,207,6,6,170,]),'assignment':([0,3,138,181,201,202,],[7,7,7,7,7,7,]),'declaration':([0,3,88,137,138,165,181,201,202,],[8,8,135,171,8,135,8,8,8,]),'functionDeclaration':([0,3,138,181,201,202,],[9,9,9,9,9,9,]),'whileLoop':([0,3,138,181,201,202,],[10,10,10,10,10,10,]),'forLoop':([0,3,138,181,201,202,],[11,11,11,11,11,11,]),'conditional':([0,3,138,181,201,202,],[12,12,12,12,12,12,]),'standAloneFuncCall':([0,3,138,181,201,202,],[13,13,13,13,13,13,]),'returnStatement':([0,3,138,181,201,202,],[14,14,14,14,14,14,]),'literal':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'arrayLiteral':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'reference':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'functionCall':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ternaryOp':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'reassign':([0,3,137,138,181,201,202,216,],[23,23,174,23,23,23,23,221,]),'initialize':([0,3,138,181,201,202,],[24,24,24,24,24,24,]),'arrayAssign':([0,3,137,138,181,201,202,216,],[25,25,176,25,25,25,25,222,]),'binOpAssign':([0,3,137,138,181,201,202,216,],[26,26,177,26,26,26,26,223,]),'arrayDeclaration':([0,3,56,88,137,138,165,181,201,202,],[27,27,112,27,27,27,27,27,27,27,]),'letDeclaration':([0,3,56,88,137,138,165,181,201,202,],[28,28,113,28,28,28,28,28,28,28,]),'fnHeader':([0,3,138,181,201,202,],[29,29,29,29,29,29,]),'if':([0,3,138,181,201,202,],[32,32,32,32,32,32,]),'letReference':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'arrayReference':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[40,40,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,178,40,84,84,40,84,40,40,178,]),'printCall':([0,3,20,21,22,38,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,89,93,94,95,96,97,98,101,105,109,110,111,133,137,138,148,160,181,195,201,202,216,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'letInitialize':([0,3,137,138,181,201,202,],[42,42,175,42,42,42,42,]),'constInitialize':([0,3,138,181,201,202,],[43,43,43,43,43,43,]),'type':([0,3,56,88,137,138,165,181,201,202,],[44,44,114,114,114,44,114,44,44,44,]),'fnType':([0,3,138,181,201,202,],[45,45,45,45,45,45,]),'constDeclaration':([0,3,137,138,181,201,202,],[48,48,173,48,48,48,48,]),'newScope':([31,92,186,192,],[90,138,202,204,]),'else':([32,],[91,]),'exprLst':([38,93,110,133,148,],[103,139,157,162,184,]),'argumentDeclaration':([88,165,],[134,191,]),'honorific':([108,],[151,]),'forTrio':([137,],[167,]),'forElement':([137,],[168,]),'forAssign':([137,],[169,]),'enclosure':([138,164,193,194,202,204,],[179,190,205,206,211,213,]),'popScope':([179,180,190,205,206,211,212,213,],[198,199,203,214,215,217,218,219,]),'forReassign':([216,],[220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',83),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',88),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',89),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',95),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',96),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',102),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',103),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',104),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',105),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',106),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',107),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',108),
  ('singleStatement -> standAloneFuncCall SEMICOL','singleStatement',2,'p_singleStatement','parser.py',109),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',110),
  ('expr -> literal','expr',1,'p_expr','parser.py',116),
  ('expr -> arrayLiteral','expr',1,'p_expr','parser.py',117),
  ('expr -> reference','expr',1,'p_expr','parser.py',118),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',119),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',120),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_paren_expr','parser.py',126),
  ('expr -> expr PLUS expr','expr',3,'p_boolExpr','parser.py',135),
  ('expr -> expr MINUS expr','expr',3,'p_boolExpr','parser.py',136),
  ('expr -> expr TIMES expr','expr',3,'p_boolExpr','parser.py',137),
  ('expr -> expr DIVIDE expr','expr',3,'p_boolExpr','parser.py',138),
  ('expr -> expr MOD expr','expr',3,'p_boolExpr','parser.py',139),
  ('expr -> expr POW expr','expr',3,'p_boolExpr','parser.py',140),
  ('expr -> expr LT expr','expr',3,'p_boolExpr','parser.py',141),
  ('expr -> expr GT expr','expr',3,'p_boolExpr','parser.py',142),
  ('expr -> expr LEQ expr','expr',3,'p_boolExpr','parser.py',143),
  ('expr -> expr GEQ expr','expr',3,'p_boolExpr','parser.py',144),
  ('expr -> expr EQOP expr','expr',3,'p_equality_op','parser.py',204),
  ('expr -> expr NEQ expr','expr',3,'p_equality_op','parser.py',205),
  ('expr -> expr AND expr','expr',3,'p_boolExpr_op','parser.py',223),
  ('expr -> expr OR expr','expr',3,'p_boolExpr_op','parser.py',224),
  ('expr -> NOT expr','expr',2,'p_boolExprNeg','parser.py',244),
  ('expr -> MINUS expr','expr',2,'p_numExpr_uminus','parser.py',254),
  ('ternaryOp -> expr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',264),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',281),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',282),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',283),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',284),
  ('binOpAssign -> ID PEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',290),
  ('binOpAssign -> ID MEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',291),
  ('binOpAssign -> ID TEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',292),
  ('binOpAssign -> ID DEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',293),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',294),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',295),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',326),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',327),
  ('if -> NANI LPAREN expr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',333),
  ('if -> NANI LPAREN expr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',334),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',342),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',343),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',349),
  ('functionDeclaration -> fnHeader LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',6,'p_functionDeclaration','parser.py',368),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',378),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',379),
  ('fnHeader -> fnType SQUIGGLY honorific ID','fnHeader',4,'p_functionHeader','parser.py',385),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',400),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',408),
  ('returnStatement -> empty DESU','returnStatement',2,'p_returnStatement','parser.py',409),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',426),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',434),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',435),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',436),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',437),
  ('arrayAssign -> arrayReference EQ expr','arrayAssign',3,'p_arrayAssign','parser.py',443),
  ('standAloneFuncCall -> ID LPAREN exprLst RPAREN','standAloneFuncCall',4,'p_standAloneFuncCall','parser.py',464),
  ('standAloneFuncCall -> ID LPAREN RPAREN','standAloneFuncCall',3,'p_standAloneFuncCall','parser.py',465),
  ('functionCall -> printCall','functionCall',1,'p_printCall','parser.py',491),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',496),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',497),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',525),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',526),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',549),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',550),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',559),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',560),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',566),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',582),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',598),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',599),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',606),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',607),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',608),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',620),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',621),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',630),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',640),
  ('whileLoop -> WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',648),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',658),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',659),
  ('forTrio -> forAssign SEMICOL expr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',665),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',673),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',674),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',675),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',676),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',682),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',683),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',684),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',690),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',691),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',698),
  ('reference -> letReference','reference',1,'p_reference','parser.py',706),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',707),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',713),
  ('arrayReference -> expr LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',732),
  ('arrayReference -> ID LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',733),
  ('literal -> NUMBER','literal',1,'p_numExpr_number','parser.py',783),
  ('literal -> STRING','literal',1,'p_strExpr','parser.py',789),
  ('literal -> OWO','literal',1,'p_bool','parser.py',795),
  ('literal -> UWU','literal',1,'p_bool','parser.py',796),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',806),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',807),
  ('fnType -> type HAREM','fnType',2,'p_fnType','parser.py',808),
  ('type -> WAIFU','type',1,'p_type','parser.py',817),
  ('type -> HUSBANDO','type',1,'p_type','parser.py',818),
  ('type -> CATBOY','type',1,'p_type','parser.py',819),
  ('type -> CATGIRL','type',1,'p_type','parser.py',820),
  ('type -> SENPAI','type',1,'p_type','parser.py',821),
  ('type -> KOUHAI','type',1,'p_type','parser.py',822),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',828),
]
