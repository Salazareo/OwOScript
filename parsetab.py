
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND CATGIRL CHAN COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM ID ISTUDIED KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MULTID NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS PP RBRACE RBRACK REAL RPAREN SAN SEMICOL SHI SQUIGGLY TEQ TIMES UWU WAIFU WHILEU YOKAIline : statement\n            | line statement\n    statement : expr SEMICOL\n                 | assign SEMICOL\n                 | declaration SEMICOL\n    statement : WHILEU LPAREN boolExpr RPAREN ISTUDIED LBRACE line RBRACEassign : declaration EQ expr \n              | ID EQ expr\n    declaration : type ID\n                   | array ID\n                   | REAL declaration\n    expr : numExpr\n            | boolExpr\n            | reference\n     boolExpr : boolExpr NEQ boolExpr\n                 | numExpr NEQ numExpr\n                 | numExpr LEQ numExpr\n                 | numExpr GEQ numExpr\n                 | numExpr LT numExpr\n                 | numExpr GT numExpr\n                 | numExpr EQOP numExpr\n                 | boolExpr EQOP boolExpr\n                 | boolExpr AND boolExpr\n                 | boolExpr OR boolExpr\n    reference : ID\n                 | ID LBRACK numExpr RBRACK \n    boolExpr : referencenumExpr : referenceboolExpr : NOT boolExprboolExpr : LPAREN boolExpr RPAREN\n    numExpr : numExpr PLUS numExpr\n               | numExpr TIMES numExpr\n               | numExpr MINUS numExpr\n               | numExpr DIVIDE numExpr\n\n    numExpr : ID PEQ numExpr\n                | ID MEQ numExpr\n                | ID DEQ numExpr\n                | ID TEQ numExpr\n                | ID PP\n                | ID MM\n    numExpr : MINUS numExpr %prec UMINUSnumExpr : LPAREN numExpr RPARENnumExpr : NUMBERarray : type HAREMboolExpr : OWO\n                | UWU\n    prim : type\n            | YOKAI\n    type : WAIFU\n            | CATGIRL\n    '
    
_lr_action_items = {'WHILEU':([0,1,2,22,23,24,25,94,95,96,],[6,6,-1,-2,-3,-4,-5,6,6,-6,]),'ID':([0,1,2,7,12,13,15,17,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,55,60,64,94,95,96,],[11,11,-1,31,54,56,31,31,-49,-50,-2,-3,-4,-5,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-44,31,31,11,11,-6,]),'REAL':([0,1,2,14,22,23,24,25,94,95,96,],[14,14,-1,14,-2,-3,-4,-5,14,14,-6,]),'MINUS':([0,1,2,7,9,10,11,15,16,17,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,59,60,62,63,64,67,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,92,94,95,96,],[15,15,-1,15,38,-28,-25,15,-43,15,-2,-3,-4,-5,15,15,38,-28,-25,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-39,-40,15,-41,-28,15,38,-28,15,-42,-31,-32,-33,-34,38,38,38,38,38,38,38,38,38,38,38,38,38,-26,15,15,-6,]),'LPAREN':([0,1,2,6,7,15,17,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,60,64,94,95,96,],[7,7,-1,27,7,60,64,-2,-3,-4,-5,7,64,64,64,64,64,60,60,60,60,60,60,60,60,60,60,7,60,60,60,60,60,60,64,7,7,-6,]),'NUMBER':([0,1,2,7,15,17,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,60,64,94,95,96,],[16,16,-1,16,16,16,-2,-3,-4,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-6,]),'NOT':([0,1,2,7,17,22,23,24,25,26,27,32,33,34,35,46,64,94,95,96,],[17,17,-1,17,17,-2,-3,-4,-5,17,17,17,17,17,17,17,17,17,17,-6,]),'OWO':([0,1,2,7,17,22,23,24,25,26,27,32,33,34,35,46,64,94,95,96,],[18,18,-1,18,18,-2,-3,-4,-5,18,18,18,18,18,18,18,18,18,18,-6,]),'UWU':([0,1,2,7,17,22,23,24,25,26,27,32,33,34,35,46,64,94,95,96,],[19,19,-1,19,19,-2,-3,-4,-5,19,19,19,19,19,19,19,19,19,19,-6,]),'WAIFU':([0,1,2,14,22,23,24,25,94,95,96,],[20,20,-1,20,-2,-3,-4,-5,20,20,-6,]),'CATGIRL':([0,1,2,14,22,23,24,25,94,95,96,],[21,21,-1,21,-2,-3,-4,-5,21,21,-6,]),'$end':([1,2,22,23,24,25,96,],[0,-1,-2,-3,-4,-5,-6,]),'RBRACE':([2,22,23,24,25,95,96,],[-1,-2,-3,-4,-5,96,-6,]),'SEMICOL':([3,4,5,8,9,10,11,16,18,19,31,51,52,54,56,57,58,59,61,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,],[23,24,25,-13,-12,-14,-25,-43,-45,-46,-25,-39,-40,-9,-10,-11,-41,-28,-29,-27,-7,-42,-30,-15,-22,-23,-24,-31,-32,-33,-34,-16,-17,-18,-19,-20,-21,-8,-35,-36,-37,-38,-26,]),'EQ':([5,11,54,56,57,],[26,46,-9,-10,-11,]),'NEQ':([8,9,10,11,16,18,19,28,29,30,31,51,52,58,59,61,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,90,92,],[32,40,-27,-25,-43,-45,-46,40,32,-27,-25,-39,-40,-41,-28,32,40,-27,32,-42,-30,32,32,32,32,-31,-32,-33,-34,-16,-17,-18,-19,-20,-21,-35,-36,-37,-38,40,-26,]),'EQOP':([8,9,10,11,16,18,19,28,29,30,31,51,52,58,59,61,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,90,92,],[33,45,-27,-25,-43,-45,-46,45,33,-27,-25,-39,-40,-41,-28,33,45,-27,33,-42,-30,33,33,33,33,-31,-32,-33,-34,-16,-17,-18,-19,-20,-21,-35,-36,-37,-38,45,-26,]),'AND':([8,10,11,16,18,19,29,30,31,51,52,58,59,61,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,92,],[34,-27,-25,-43,-45,-46,34,-27,-25,-39,-40,-41,-28,34,-27,34,-42,-30,34,34,34,34,-31,-32,-33,-34,-16,-17,-18,-19,-20,-21,-35,-36,-37,-38,-26,]),'OR':([8,10,11,16,18,19,29,30,31,51,52,58,59,61,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,92,],[35,-27,-25,-43,-45,-46,35,-27,-25,-39,-40,-41,-28,35,-27,35,-42,-30,35,35,35,35,-31,-32,-33,-34,-16,-17,-18,-19,-20,-21,-35,-36,-37,-38,-26,]),'PLUS':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,92,],[36,-28,-25,-43,36,-28,-25,-39,-40,-41,-28,36,-28,-42,-31,-32,-33,-34,36,36,36,36,36,36,36,36,36,36,36,36,36,-26,]),'TIMES':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,92,],[37,-28,-25,-43,37,-28,-25,-39,-40,-41,-28,37,-28,-42,37,-32,37,-34,37,37,37,37,37,37,37,37,37,37,37,37,37,-26,]),'DIVIDE':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,92,],[39,-28,-25,-43,39,-28,-25,-39,-40,-41,-28,39,-28,-42,39,-32,39,-34,39,39,39,39,39,39,39,39,39,39,39,39,39,-26,]),'LEQ':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,84,85,86,87,90,92,],[41,-28,-25,-43,41,-28,-25,-39,-40,-41,-28,41,-28,-42,-31,-32,-33,-34,-35,-36,-37,-38,41,-26,]),'GEQ':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,84,85,86,87,90,92,],[42,-28,-25,-43,42,-28,-25,-39,-40,-41,-28,42,-28,-42,-31,-32,-33,-34,-35,-36,-37,-38,42,-26,]),'LT':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,84,85,86,87,90,92,],[43,-28,-25,-43,43,-28,-25,-39,-40,-41,-28,43,-28,-42,-31,-32,-33,-34,-35,-36,-37,-38,43,-26,]),'GT':([9,10,11,16,28,30,31,51,52,58,59,62,63,67,73,74,75,76,84,85,86,87,90,92,],[44,-28,-25,-43,44,-28,-25,-39,-40,-41,-28,44,-28,-42,-31,-32,-33,-34,-35,-36,-37,-38,44,-26,]),'PEQ':([11,31,],[47,47,]),'MEQ':([11,31,],[48,48,]),'DEQ':([11,31,],[49,49,]),'TEQ':([11,31,],[50,50,]),'PP':([11,31,],[51,51,]),'MM':([11,31,],[52,52,]),'LBRACK':([11,31,],[53,53,]),'HAREM':([12,20,21,],[55,-49,-50,]),'RPAREN':([16,18,19,28,29,30,31,51,52,58,59,61,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,89,90,92,],[-43,-45,-46,67,68,-27,-25,-39,-40,-41,-28,-29,-27,91,-42,-30,-15,-22,-23,-24,-31,-32,-33,-34,-16,-17,-18,-19,-20,-21,-35,-36,-37,-38,67,67,-26,]),'RBRACK':([16,31,51,52,58,59,67,73,74,75,76,84,85,86,87,88,92,],[-43,-25,-39,-40,-41,-28,-42,-31,-32,-33,-34,-35,-36,-37,-38,92,-26,]),'ISTUDIED':([91,],[93,]),'LBRACE':([93,],[94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line':([0,94,],[1,95,]),'statement':([0,1,94,95,],[2,22,2,22,]),'expr':([0,1,26,46,94,95,],[3,3,65,83,3,3,]),'assign':([0,1,94,95,],[4,4,4,4,]),'declaration':([0,1,14,94,95,],[5,5,57,5,5,]),'boolExpr':([0,1,7,17,26,27,32,33,34,35,46,64,94,95,],[8,8,29,61,8,66,69,70,71,72,8,29,8,8,]),'numExpr':([0,1,7,15,17,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,60,64,94,95,],[9,9,28,58,62,9,62,62,62,62,62,73,74,75,76,77,78,79,80,81,82,9,84,85,86,87,88,89,90,9,9,]),'reference':([0,1,7,15,17,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,60,64,94,95,],[10,10,30,59,63,10,63,63,63,63,63,59,59,59,59,59,59,59,59,59,59,10,59,59,59,59,59,59,63,10,10,]),'type':([0,1,14,94,95,],[12,12,12,12,12,]),'array':([0,1,14,94,95,],[13,13,13,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line","S'",1,None,None,None),
  ('line -> statement','line',1,'p_multiline_expr','parser.py',22),
  ('line -> line statement','line',2,'p_multiline_expr','parser.py',23),
  ('statement -> expr SEMICOL','statement',2,'p_statement_expr','parser.py',28),
  ('statement -> assign SEMICOL','statement',2,'p_statement_expr','parser.py',29),
  ('statement -> declaration SEMICOL','statement',2,'p_statement_expr','parser.py',30),
  ('statement -> WHILEU LPAREN boolExpr RPAREN ISTUDIED LBRACE line RBRACE','statement',8,'p_whileloop_statement','parser.py',35),
  ('assign -> declaration EQ expr','assign',3,'p_assign','parser.py',44),
  ('assign -> ID EQ expr','assign',3,'p_assign','parser.py',45),
  ('declaration -> type ID','declaration',2,'p_declaration','parser.py',54),
  ('declaration -> array ID','declaration',2,'p_declaration','parser.py',55),
  ('declaration -> REAL declaration','declaration',2,'p_declaration','parser.py',56),
  ('expr -> numExpr','expr',1,'p_expr','parser.py',66),
  ('expr -> boolExpr','expr',1,'p_expr','parser.py',67),
  ('expr -> reference','expr',1,'p_expr','parser.py',68),
  ('boolExpr -> boolExpr NEQ boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',73),
  ('boolExpr -> numExpr NEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',74),
  ('boolExpr -> numExpr LEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',75),
  ('boolExpr -> numExpr GEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',76),
  ('boolExpr -> numExpr LT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',77),
  ('boolExpr -> numExpr GT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',78),
  ('boolExpr -> numExpr EQOP numExpr','boolExpr',3,'p_boolExpr_op','parser.py',79),
  ('boolExpr -> boolExpr EQOP boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',80),
  ('boolExpr -> boolExpr AND boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',81),
  ('boolExpr -> boolExpr OR boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',82),
  ('reference -> ID','reference',1,'p_reference','parser.py',97),
  ('reference -> ID LBRACK numExpr RBRACK','reference',4,'p_reference','parser.py',98),
  ('boolExpr -> reference','boolExpr',1,'p_boolExpr_reference','parser.py',108),
  ('numExpr -> reference','numExpr',1,'p_numExpr_reference','parser.py',112),
  ('boolExpr -> NOT boolExpr','boolExpr',2,'p_boolExpr_not','parser.py',116),
  ('boolExpr -> LPAREN boolExpr RPAREN','boolExpr',3,'p_boolExpr_group','parser.py',120),
  ('numExpr -> numExpr PLUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',125),
  ('numExpr -> numExpr TIMES numExpr','numExpr',3,'p_numExpr_binop','parser.py',126),
  ('numExpr -> numExpr MINUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',127),
  ('numExpr -> numExpr DIVIDE numExpr','numExpr',3,'p_numExpr_binop','parser.py',128),
  ('numExpr -> ID PEQ numExpr','numExpr',3,'p_numExpr_shortBinOp','parser.py',142),
  ('numExpr -> ID MEQ numExpr','numExpr',3,'p_numExpr_shortBinOp','parser.py',143),
  ('numExpr -> ID DEQ numExpr','numExpr',3,'p_numExpr_shortBinOp','parser.py',144),
  ('numExpr -> ID TEQ numExpr','numExpr',3,'p_numExpr_shortBinOp','parser.py',145),
  ('numExpr -> ID PP','numExpr',2,'p_numExpr_shortBinOp','parser.py',146),
  ('numExpr -> ID MM','numExpr',2,'p_numExpr_shortBinOp','parser.py',147),
  ('numExpr -> MINUS numExpr','numExpr',2,'p_numExpr_uminus','parser.py',170),
  ('numExpr -> LPAREN numExpr RPAREN','numExpr',3,'p_numExpr_group','parser.py',176),
  ('numExpr -> NUMBER','numExpr',1,'p_number','parser.py',180),
  ('array -> type HAREM','array',2,'p_arrays','parser.py',184),
  ('boolExpr -> OWO','boolExpr',1,'p_bool','parser.py',188),
  ('boolExpr -> UWU','boolExpr',1,'p_bool','parser.py',189),
  ('prim -> type','prim',1,'p_prim','parser.py',194),
  ('prim -> YOKAI','prim',1,'p_prim','parser.py',195),
  ('type -> WAIFU','type',1,'p_type','parser.py',200),
  ('type -> CATGIRL','type',1,'p_type','parser.py',201),
]
