
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND BAKA CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM ID ISTUDIED KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MULTID NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SHI SQUIGGLY TEQ TIMES UWU WAIFU WHILEU YOKAI program : statements statements : singleStatement\n                   | statements statements\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : ternaryOp\n             | numExpr\n             | boolExpr\n             | functionCall\n             | arrayExpr\n             | reference\n     ternaryOp : boolExpr QMARK expr COL expr\n    arrayExpr : arrayLiteral\n                 | letReference\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     conditional : if else\n                    | if\n     if : NANI LPAREN boolExpr RPAREN newScope enclosure popScope\n           | NANI LPAREN boolExpr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    newFn : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : ID LBRACK numExpr RBRACK EQ expr\n     functionCall : printCall\n                     | ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n     binOpAssign : ID PEQ numExpr\n                    | ID MEQ numExpr\n                    | ID TEQ numExpr\n                    | ID DEQ numExpr\n                    | ID PP\n                    | ID MM\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL boolExpr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN boolExpr : boolExpr AND boolExpr\n                 | boolExpr OR boolExpr\n                 | expr NEQ expr\n                 | numExpr LEQ numExpr\n                 | numExpr GEQ numExpr\n                 | numExpr LT numExpr\n                 | numExpr GT numExpr\n                 | expr EQOP expr\n    numExpr : numExpr PLUS numExpr\n               | numExpr MINUS numExpr\n               | numExpr TIMES numExpr\n               | numExpr DIVIDE numExprnumExpr : referenceboolExpr : referencereference : letReference\n                 | arrayReference\n    letReference : ID  arrayReference : ID LBRACK numExpr RBRACK boolExpr : NOT boolExprboolExpr : LPAREN boolExpr RPAREN\n     boolExpr : OWO\n                 | UWU\n    numExpr : MINUS numExpr %prec UMINUSnumExpr : LPAREN numExpr RPARENnumExpr : NUMBER fnType : YOKAI\n               | type\n    type : WAIFU\n            | CATGIRL\n    '
    
_lr_action_items = {'WHILEU':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[26,26,-2,-7,-8,-9,-10,-26,26,-4,-5,-6,-11,-25,-36,26,-38,-38,26,-36,-29,-30,-33,26,26,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'SHI':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[27,27,-2,-7,-8,-9,-10,-26,27,-4,-5,-6,-11,-25,-36,27,-38,-38,27,-36,-29,-30,-33,27,27,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'MINUS':([0,2,3,7,8,9,10,13,17,25,28,29,30,31,35,37,38,41,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,74,76,77,78,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,107,108,109,116,117,118,119,120,121,122,123,128,130,133,134,135,136,140,141,142,143,144,146,156,159,171,172,173,175,178,183,187,189,191,192,193,194,195,196,197,200,201,204,206,208,209,210,211,212,213,216,217,218,],[29,29,-2,-7,-8,-9,-10,61,-96,29,-26,29,-108,29,-100,-98,-99,29,29,-4,29,29,-5,-6,29,-11,29,29,29,29,29,29,29,29,29,29,29,61,-96,-98,-100,29,-25,-36,-106,-96,29,-98,-100,61,-96,29,-100,29,29,29,29,29,29,29,29,29,29,-92,-93,-94,-95,61,61,61,61,-107,29,29,61,61,-96,61,61,61,61,61,29,29,61,-38,-38,29,-101,-36,-101,29,29,-29,-30,-33,29,29,29,-38,-38,-38,61,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'LPAREN':([0,2,3,7,8,9,10,24,25,26,27,28,29,31,35,41,44,45,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,77,78,79,80,81,84,90,91,92,93,94,95,96,97,98,107,108,109,130,133,146,156,171,172,173,177,178,187,189,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[25,25,-2,-7,-8,-9,-10,-36,25,78,-36,-26,84,90,92,25,107,108,25,-4,25,25,-5,-6,25,-11,84,84,84,84,84,84,84,84,25,90,90,127,92,90,132,-25,-36,84,90,92,25,25,84,84,84,84,84,90,25,25,84,25,25,25,-38,-38,25,-35,-36,90,84,-29,-30,-33,25,25,25,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'NUMBER':([0,2,3,7,8,9,10,25,28,29,31,41,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,171,172,173,178,187,189,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[30,30,-2,-7,-8,-9,-10,30,-26,30,30,30,30,-4,30,30,-5,-6,30,-11,30,30,30,30,30,30,30,30,30,30,30,30,-25,-36,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-38,-38,30,-36,30,30,-29,-30,-33,30,30,30,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'NOT':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[31,31,-2,-7,-8,-9,-10,31,-26,31,31,31,-4,31,31,-5,-6,31,-11,31,31,31,31,-25,-36,31,31,31,31,31,31,31,31,31,-38,-38,31,-36,31,-29,-30,-33,31,31,31,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'OWO':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[32,32,-2,-7,-8,-9,-10,32,-26,32,32,32,-4,32,32,-5,-6,32,-11,32,32,32,32,-25,-36,32,32,32,32,32,32,32,32,32,-38,-38,32,-36,32,-29,-30,-33,32,32,32,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'UWU':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[33,33,-2,-7,-8,-9,-10,33,-26,33,33,33,-4,33,33,-5,-6,33,-11,33,33,33,33,-25,-36,33,33,33,33,33,33,33,33,33,-38,-38,33,-36,33,-29,-30,-33,33,33,33,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'ID':([0,2,3,7,8,9,10,25,28,29,31,41,42,47,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,80,81,84,90,92,93,94,95,96,97,98,104,107,108,109,112,130,132,133,146,148,149,150,151,152,156,171,172,173,178,187,188,189,190,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,214,216,217,218,],[35,35,-2,-7,-8,-9,-10,77,-26,86,91,91,105,-111,-112,35,-4,91,91,-5,-6,91,-11,86,86,86,86,86,86,86,86,91,91,91,91,-25,-36,86,91,91,91,86,86,86,86,86,147,91,91,91,105,86,165,35,91,177,-39,-40,-41,-42,91,-38,-38,35,-36,91,203,86,205,-29,-30,-33,35,91,35,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,165,-27,-28,-70,]),'NANI':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[44,44,-2,-7,-8,-9,-10,-26,44,-4,-5,-6,-11,-25,-36,44,-38,-38,44,-36,-29,-30,-33,44,44,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'BAKA':([0,2,3,7,8,9,10,25,28,31,41,51,52,54,55,56,57,58,59,68,69,70,78,80,81,90,92,93,107,108,109,133,146,156,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[45,45,-2,-7,-8,-9,-10,45,-26,45,45,45,-4,45,45,-5,-6,45,-11,45,45,45,45,-25,-36,45,45,45,45,45,45,45,45,45,-38,-38,45,-36,45,-29,-30,-33,45,45,45,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'LBRACK':([0,2,3,7,8,9,10,25,28,31,35,41,51,52,54,55,56,57,58,59,68,69,70,77,78,80,81,86,90,91,92,93,107,108,109,133,146,156,165,171,172,173,178,187,191,192,193,194,195,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[41,41,-2,-7,-8,-9,-10,41,-26,41,94,41,41,-4,41,41,-5,-6,41,-11,41,41,41,130,41,-25,-36,130,41,130,41,41,41,41,41,41,41,41,189,-38,-38,41,-36,41,-29,-30,-33,41,41,41,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'WAIFU':([0,2,3,7,8,9,10,28,50,51,52,56,57,59,80,81,127,132,133,171,172,173,178,182,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[47,47,-2,-7,-8,-9,-10,-26,47,47,-4,-5,-6,-11,-25,-36,47,47,47,-38,-38,47,-36,47,-29,-30,-33,47,47,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'CATGIRL':([0,2,3,7,8,9,10,28,50,51,52,56,57,59,80,81,127,132,133,171,172,173,178,182,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[48,48,-2,-7,-8,-9,-10,-26,48,48,-4,-5,-6,-11,-25,-36,48,48,48,-38,-38,48,-36,48,-29,-30,-33,48,48,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'YOKAI':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[49,49,-2,-7,-8,-9,-10,-26,49,-4,-5,-6,-11,-25,-36,49,-38,-38,49,-36,-29,-30,-33,49,49,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'REAL':([0,2,3,7,8,9,10,28,51,52,56,57,59,80,81,132,133,171,172,173,178,191,192,193,194,196,197,200,201,206,208,209,210,211,212,213,216,217,218,],[50,50,-2,-7,-8,-9,-10,-26,50,-4,-5,-6,-11,-25,-36,50,50,-38,-38,50,-36,-29,-30,-33,50,50,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'$end':([1,2,3,7,8,9,10,28,51,52,56,57,59,80,171,172,191,192,193,197,200,201,206,208,209,210,211,212,213,216,217,218,],[0,-1,-2,-7,-8,-9,-10,-26,-3,-4,-5,-6,-11,-25,-38,-38,-29,-30,-33,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'RBRACE':([3,7,8,9,10,28,51,52,56,57,59,80,171,172,173,191,192,193,194,197,200,201,206,208,209,210,211,212,213,216,217,218,],[-2,-7,-8,-9,-10,-26,-3,-4,-5,-6,-11,-25,-38,-38,193,-29,-30,-33,206,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'SEMICOL':([4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,30,32,33,34,35,36,37,38,39,40,53,76,82,83,85,86,87,89,91,99,100,101,105,113,114,115,116,117,118,119,120,121,122,123,125,126,128,129,138,139,141,142,143,144,145,147,155,163,167,168,169,170,174,175,179,180,183,202,207,],[52,56,57,59,-12,-13,-14,-15,-16,-17,-21,-22,-23,-24,-55,-56,-108,-104,-105,-44,-100,-19,-20,-99,-51,-52,-37,-98,-106,-96,-98,-100,-102,-97,-100,-61,-62,-47,-69,-86,-91,-53,-92,-93,-94,-95,-87,-88,-89,-90,-84,-85,-107,-103,-46,-31,-57,-58,-59,-60,-48,-68,-54,187,-74,-75,-76,-77,-45,-101,-83,-18,-101,214,-43,]),'DESU':([4,12,13,14,15,16,17,30,32,33,34,35,36,37,38,76,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,125,126,128,129,138,145,174,175,179,180,183,],[53,-12,-13,-14,-15,-16,-17,-108,-104,-105,-44,-100,-19,-20,-99,-98,-106,-96,-98,-100,-102,-97,-100,-47,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,-84,-85,-107,-103,-46,-48,-45,-101,-83,-18,-101,]),'NEQ':([4,12,13,14,15,16,17,30,32,33,34,35,36,37,38,72,73,74,75,76,77,82,83,85,86,87,88,89,91,101,103,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,135,136,138,139,145,153,155,174,175,179,180,183,202,207,],[54,-12,-13,-14,-15,-16,-17,-108,-104,-105,-44,-100,-19,-20,-99,-13,-14,-17,54,-20,-100,-106,-96,-98,-100,-14,-13,-17,-100,-47,54,54,54,54,-92,-93,-94,-95,-87,-88,-89,-90,54,-14,-14,-107,-103,-14,-13,-17,-46,54,-48,-14,54,-45,-101,-83,54,-101,-14,54,]),'EQOP':([4,12,13,14,15,16,17,30,32,33,34,35,36,37,38,72,73,74,75,76,77,82,83,85,86,87,88,89,91,101,103,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,135,136,138,139,145,153,155,174,175,179,180,183,202,207,],[55,-12,-13,-14,-15,-16,-17,-108,-104,-105,-44,-100,-19,-20,-99,-13,-14,-17,55,-20,-100,-106,-96,-98,-100,-14,-13,-17,-100,-47,55,55,55,55,-92,-93,-94,-95,-87,-88,-89,-90,55,-14,-14,-107,-103,-14,-13,-17,-46,55,-48,-14,55,-45,-101,-83,55,-101,-14,55,]),'EQ':([6,22,23,35,46,105,110,111,147,164,165,175,215,],[58,-55,-56,93,109,-69,-66,-67,-68,58,93,195,195,]),'NOU':([7,8,9,10,28,52,56,57,59,80,171,172,191,192,193,197,200,201,206,208,209,210,211,212,213,216,217,218,],[-7,-8,-9,-10,81,-4,-5,-6,-11,-25,-38,-38,-29,-30,-33,-38,-38,-38,-34,-38,-38,-32,-38,-71,-72,-27,-28,-70,]),'COMMA':([12,13,14,15,16,17,22,23,30,32,33,34,36,37,38,76,82,83,85,86,87,89,91,101,103,105,113,114,116,117,118,119,120,121,122,123,125,126,128,129,138,145,147,158,174,179,180,183,],[-12,-13,-14,-15,-16,-17,-55,-56,-108,-104,-105,-44,-19,-20,-99,-98,-106,-96,-98,-100,-102,-97,-100,-47,146,-69,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,-84,-85,-107,-103,-46,-48,-68,182,-45,-83,-18,-101,]),'RBRACK':([12,13,14,15,16,17,30,32,33,34,36,37,38,41,76,82,83,85,86,87,89,91,101,102,103,113,114,116,117,118,119,120,121,122,123,125,126,128,129,138,140,145,159,174,176,179,180,183,204,],[-12,-13,-14,-15,-16,-17,-108,-104,-105,-44,-19,-20,-99,101,-98,-106,-96,-98,-100,-102,-97,-100,-47,145,-49,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,-84,-85,-107,-103,-46,175,-48,183,-45,-50,-83,-18,-101,215,]),'QMARK':([12,13,14,15,16,17,30,32,33,34,35,36,37,38,73,74,76,77,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,125,126,128,129,131,136,138,145,153,174,175,179,180,183,202,],[-12,-13,68,-15,-16,-17,-108,-104,-105,-44,-100,-19,-20,-99,68,-97,-98,-100,-106,-96,-98,-100,68,-97,-100,-47,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,68,68,-107,-103,68,-97,-46,-48,68,-45,-101,-83,-18,-101,68,]),'AND':([12,13,14,15,16,17,30,32,33,34,35,36,37,38,73,74,76,77,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,125,126,128,129,131,136,138,145,153,174,175,179,180,183,202,],[-12,-13,69,-15,-16,-17,-108,-104,-105,-44,-100,-19,-20,-99,69,-97,-98,-100,-106,-96,-98,-100,69,-97,-100,-47,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,69,69,-107,-103,69,-97,-46,-48,69,-45,-101,-83,-18,-101,69,]),'OR':([12,13,14,15,16,17,30,32,33,34,35,36,37,38,73,74,76,77,82,83,85,86,87,89,91,101,113,114,116,117,118,119,120,121,122,123,125,126,128,129,131,136,138,145,153,174,175,179,180,183,202,],[-12,-13,70,-15,-16,-17,-108,-104,-105,-44,-100,-19,-20,-99,70,-97,-98,-100,-106,-96,-98,-100,70,-97,-100,-47,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,70,70,-107,-103,70,-97,-46,-48,70,-45,-101,-83,-18,-101,70,]),'RPAREN':([12,13,14,15,16,17,22,23,30,32,33,34,36,37,38,72,73,74,76,77,82,83,85,86,87,89,91,92,99,100,101,103,105,113,114,116,117,118,119,120,121,122,123,125,126,127,128,129,131,134,135,136,137,138,139,141,142,143,144,145,147,153,154,157,158,161,162,174,176,179,180,182,183,198,203,205,207,219,220,221,222,],[-12,-13,-14,-15,-16,-17,-55,-56,-108,-104,-105,-44,-19,-20,-99,128,129,-96,-98,-100,-106,-96,-98,-100,-102,-97,-100,138,-61,-62,-47,-49,-69,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,-84,-85,-65,-107,-103,160,128,128,-96,174,-46,-31,-57,-58,-59,-60,-48,-68,178,179,181,-63,185,186,-45,-50,-83,-18,-65,-101,-64,-81,-82,-43,-73,-78,-79,-80,]),'COL':([12,13,14,15,16,17,22,23,30,32,33,34,36,37,38,76,82,83,85,86,87,89,91,101,105,110,111,113,114,116,117,118,119,120,121,122,123,124,125,126,128,129,138,145,147,164,166,174,179,180,183,],[-12,-13,-14,-15,-16,-17,-55,-56,-108,-104,-105,-44,-19,-20,-99,-98,-106,-96,-98,-100,-102,-97,-100,-47,-69,-66,-67,-86,-91,-92,-93,-94,-95,-87,-88,-89,-90,156,-84,-85,-107,-103,-46,-48,-68,188,190,-45,-83,-18,-101,]),'PLUS':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,120,121,122,123,128,134,135,136,140,141,142,143,144,159,175,183,204,],[60,-96,-108,-100,-98,-99,60,-96,-98,-100,-106,-96,-98,-100,60,-96,-100,-92,-93,-94,-95,60,60,60,60,-107,60,60,-96,60,60,60,60,60,60,-101,-101,60,]),'TIMES':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,120,121,122,123,128,134,135,136,140,141,142,143,144,159,175,183,204,],[62,-96,-108,-100,-98,-99,62,-96,-98,-100,-106,-96,-98,-100,62,-96,-100,62,62,-94,-95,62,62,62,62,-107,62,62,-96,62,62,62,62,62,62,-101,-101,62,]),'DIVIDE':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,120,121,122,123,128,134,135,136,140,141,142,143,144,159,175,183,204,],[63,-96,-108,-100,-98,-99,63,-96,-98,-100,-106,-96,-98,-100,63,-96,-100,63,63,-94,-95,63,63,63,63,-107,63,63,-96,63,63,63,63,63,63,-101,-101,63,]),'LEQ':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[64,-96,-108,-100,-98,-99,64,-96,-98,-100,-106,-96,-98,-100,64,-96,-100,-92,-93,-94,-95,-107,64,-96,-101,-101,]),'GEQ':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[65,-96,-108,-100,-98,-99,65,-96,-98,-100,-106,-96,-98,-100,65,-96,-100,-92,-93,-94,-95,-107,65,-96,-101,-101,]),'LT':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[66,-96,-108,-100,-98,-99,66,-96,-98,-100,-106,-96,-98,-100,66,-96,-100,-92,-93,-94,-95,-107,66,-96,-101,-101,]),'GT':([13,17,30,35,37,38,72,74,76,77,82,83,85,86,88,89,91,116,117,118,119,128,135,136,175,183,],[67,-96,-108,-100,-98,-99,67,-96,-98,-100,-106,-96,-98,-100,67,-96,-100,-92,-93,-94,-95,-107,67,-96,-101,-101,]),'PEQ':([35,165,],[95,95,]),'MEQ':([35,165,],[96,96,]),'TEQ':([35,165,],[97,97,]),'DEQ':([35,165,],[98,98,]),'PP':([35,165,],[99,99,]),'MM':([35,165,],[100,100,]),'HAREM':([42,47,48,112,],[104,-111,-112,104,]),'SQUIGGLY':([42,43,47,48,49,],[-110,106,-111,-112,-109,]),'LBRACE':([81,133,178,181,184,185,186,196,199,],[-36,173,-36,173,-36,173,173,173,173,]),'CHAN':([106,],[149,]),'KUN':([106,],[150,]),'SAN':([106,],[151,]),'SAMA':([106,],[152,]),'ISTUDIED':([160,],[184,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,2,51,173,194,],[2,51,51,194,51,]),'singleStatement':([0,2,51,133,173,194,196,],[3,3,3,172,3,3,209,]),'expr':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[4,4,75,75,103,4,113,114,115,124,75,75,75,75,103,139,75,103,155,4,103,180,4,75,4,207,4,]),'assignment':([0,2,51,133,173,194,196,],[5,5,5,5,5,5,5,]),'declaration':([0,2,51,127,132,133,173,182,194,196,],[6,6,6,158,164,6,6,158,6,6,]),'functionDeclaration':([0,2,51,133,173,194,196,],[7,7,7,7,7,7,7,]),'whileLoop':([0,2,51,133,173,194,196,],[8,8,8,8,8,8,8,]),'forLoop':([0,2,51,133,173,194,196,],[9,9,9,9,9,9,9,]),'conditional':([0,2,51,133,173,194,196,],[10,10,10,10,10,10,10,]),'returnStatement':([0,2,51,133,173,194,196,],[11,11,11,11,11,11,11,]),'ternaryOp':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'numExpr':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[13,13,72,82,88,13,13,13,13,13,116,117,118,119,120,121,122,123,13,88,88,88,134,135,13,13,140,141,142,143,144,88,13,13,159,13,13,13,13,88,204,13,13,13,]),'boolExpr':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[14,14,73,87,14,14,14,14,14,14,125,126,131,73,14,14,153,14,14,14,14,14,14,202,14,14,14,]),'functionCall':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'arrayExpr':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'reference':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[17,17,74,83,89,17,17,17,17,17,83,83,83,83,83,83,83,83,17,89,89,89,83,136,17,17,83,83,83,83,83,89,17,17,83,17,17,17,17,89,83,17,17,17,]),'reassign':([0,2,51,132,133,173,194,196,214,],[18,18,18,167,18,18,18,18,220,]),'initialize':([0,2,51,133,173,194,196,],[19,19,19,19,19,19,19,]),'arrayAssign':([0,2,51,132,133,173,194,196,214,],[20,20,20,169,20,20,20,20,221,]),'binOpAssign':([0,2,51,132,133,173,194,196,214,],[21,21,21,170,21,21,21,21,222,]),'arrayDeclaration':([0,2,50,51,127,132,133,173,182,194,196,],[22,22,110,22,22,22,22,22,22,22,22,]),'letDeclaration':([0,2,50,51,127,132,133,173,182,194,196,],[23,23,111,23,23,23,23,23,23,23,23,]),'newFn':([0,2,51,133,173,194,196,],[24,24,24,24,24,24,24,]),'if':([0,2,51,133,173,194,196,],[28,28,28,28,28,28,28,]),'printCall':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'arrayLiteral':([0,2,25,31,41,51,54,55,58,68,69,70,78,90,92,93,107,108,109,133,146,156,173,187,194,195,196,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'letReference':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[37,37,76,85,76,37,37,37,37,37,85,85,85,85,85,85,85,85,37,76,76,76,85,76,37,37,85,85,85,85,85,76,37,37,85,37,37,37,37,76,85,37,37,37,]),'arrayReference':([0,2,25,29,31,41,51,54,55,58,60,61,62,63,64,65,66,67,68,69,70,78,84,90,92,93,94,95,96,97,98,107,108,109,130,133,146,156,173,187,189,194,195,196,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'letInitialize':([0,2,51,132,133,173,194,196,],[39,39,39,168,39,39,39,39,]),'constInitialize':([0,2,51,133,173,194,196,],[40,40,40,40,40,40,40,]),'type':([0,2,50,51,127,132,133,173,182,194,196,],[42,42,112,42,112,112,42,42,112,42,42,]),'fnType':([0,2,51,133,173,194,196,],[43,43,43,43,43,43,43,]),'constDeclaration':([0,2,51,132,133,173,194,196,],[46,46,46,166,46,46,46,46,]),'newScope':([24,27,81,178,184,],[71,79,133,196,199,]),'else':([28,],[80,]),'exprLst':([41,92,108,146,],[102,137,154,176,]),'honorific':([106,],[148,]),'argumentDeclaration':([127,182,],[157,198,]),'forTrio':([132,],[161,]),'forElement':([132,],[162,]),'forAssign':([132,],[163,]),'enclosure':([133,181,185,186,196,199,],[171,197,200,201,208,211,]),'popScope':([171,172,197,200,201,208,209,211,],[191,192,210,212,213,216,217,218,]),'forReassign':([214,],[219,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',94),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',99),
  ('statements -> statements statements','statements',2,'p_statements','parser.py',100),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',106),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',107),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',108),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',109),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',110),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',111),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',112),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',113),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',119),
  ('expr -> numExpr','expr',1,'p_expr','parser.py',120),
  ('expr -> boolExpr','expr',1,'p_expr','parser.py',121),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',122),
  ('expr -> arrayExpr','expr',1,'p_expr','parser.py',123),
  ('expr -> reference','expr',1,'p_expr','parser.py',124),
  ('ternaryOp -> boolExpr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',130),
  ('arrayExpr -> arrayLiteral','arrayExpr',1,'p_arrayExpr','parser.py',139),
  ('arrayExpr -> letReference','arrayExpr',1,'p_arrayExpr','parser.py',140),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',146),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',147),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',148),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',149),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',155),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',156),
  ('if -> NANI LPAREN boolExpr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',162),
  ('if -> NANI LPAREN boolExpr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',163),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',169),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',170),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',176),
  ('functionDeclaration -> newFn newScope LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',7,'p_functionDeclaration','parser.py',195),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',205),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',206),
  ('newFn -> fnType SQUIGGLY honorific ID','newFn',4,'p_newFn','parser.py',212),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',219),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',227),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',234),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',242),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',243),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',244),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',245),
  ('arrayAssign -> ID LBRACK numExpr RBRACK EQ expr','arrayAssign',6,'p_arrayAssign','parser.py',251),
  ('functionCall -> printCall','functionCall',1,'p_functionCall','parser.py',266),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',267),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',268),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',287),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',288),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',299),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',300),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',309),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',310),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',317),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',330),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',342),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',343),
  ('binOpAssign -> ID PEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',350),
  ('binOpAssign -> ID MEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',351),
  ('binOpAssign -> ID TEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',352),
  ('binOpAssign -> ID DEQ numExpr','binOpAssign',3,'p_binOpAssign','parser.py',353),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',354),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',355),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',388),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',389),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',390),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',402),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',403),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',411),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',420),
  ('whileLoop -> WHILEU LPAREN boolExpr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',427),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',434),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',435),
  ('forTrio -> forAssign SEMICOL boolExpr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',441),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',447),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',448),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',449),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',450),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',456),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',457),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',458),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',464),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',465),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',472),
  ('boolExpr -> boolExpr AND boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',479),
  ('boolExpr -> boolExpr OR boolExpr','boolExpr',3,'p_boolExpr_op','parser.py',480),
  ('boolExpr -> expr NEQ expr','boolExpr',3,'p_boolExpr_op','parser.py',481),
  ('boolExpr -> numExpr LEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',482),
  ('boolExpr -> numExpr GEQ numExpr','boolExpr',3,'p_boolExpr_op','parser.py',483),
  ('boolExpr -> numExpr LT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',484),
  ('boolExpr -> numExpr GT numExpr','boolExpr',3,'p_boolExpr_op','parser.py',485),
  ('boolExpr -> expr EQOP expr','boolExpr',3,'p_boolExpr_op','parser.py',486),
  ('numExpr -> numExpr PLUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',507),
  ('numExpr -> numExpr MINUS numExpr','numExpr',3,'p_numExpr_binop','parser.py',508),
  ('numExpr -> numExpr TIMES numExpr','numExpr',3,'p_numExpr_binop','parser.py',509),
  ('numExpr -> numExpr DIVIDE numExpr','numExpr',3,'p_numExpr_binop','parser.py',510),
  ('numExpr -> reference','numExpr',1,'p_numExpr_reference','parser.py',527),
  ('boolExpr -> reference','boolExpr',1,'p_boolExpr_reference','parser.py',532),
  ('reference -> letReference','reference',1,'p_reference','parser.py',537),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',538),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',544),
  ('arrayReference -> ID LBRACK numExpr RBRACK','arrayReference',4,'p_arrayReference','parser.py',560),
  ('boolExpr -> NOT boolExpr','boolExpr',2,'p_boolExprNeg','parser.py',575),
  ('boolExpr -> LPAREN boolExpr RPAREN','boolExpr',3,'p_boolExpr_group','parser.py',583),
  ('boolExpr -> OWO','boolExpr',1,'p_bool','parser.py',589),
  ('boolExpr -> UWU','boolExpr',1,'p_bool','parser.py',590),
  ('numExpr -> MINUS numExpr','numExpr',2,'p_numExpr_uminus','parser.py',596),
  ('numExpr -> LPAREN numExpr RPAREN','numExpr',3,'p_numExpr_group','parser.py',601),
  ('numExpr -> NUMBER','numExpr',1,'p_numExpr_number','parser.py',606),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',611),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',612),
  ('type -> WAIFU','type',1,'p_type','parser.py',618),
  ('type -> CATGIRL','type',1,'p_type','parser.py',619),
]
