
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftQMARKCOLleftANDORleftNEQLEQGEQLTGTEQOPleftPLUSMINUSleftTIMESDIVIDEMODleftPOWrightUMINUSNOTleftLPARENRPARENleftIDLBRACKRBRACKAND BAKA CATBOY CATGIRL CHAN COL COMMA DEQ DESU DIVIDE EQ EQOP GEQ GT HAREM HUSBANDO ID ISTUDIED KOUHAI KUN LBRACE LBRACK LEQ LPAREN LT MEQ MINUS MM MOD NANI NEQ NOT NOU NUMBER OR OWO PEQ PERIOD PLUS POW PP QMARK RBRACE RBRACK REAL RPAREN SAMA SAN SEMICOL SENPAI SHI SQUIGGLY STRING TEQ TIMES UWU WAIFU WHILEU YOKAI program : stmts_or_empty stmts_or_empty : statements\n                       | empty\n     statements : statements singleStatement\n                   | singleStatement\n     singleStatement : expr SEMICOL\n                        | assignment SEMICOL\n                        | declaration SEMICOL\n                        | functionDeclaration\n                        | whileLoop\n                        | forLoop\n                        | conditional\n                        | returnStatement SEMICOL\n     expr : literal\n             | arrayLiteral\n             | reference\n             | functionCall\n             | ternaryOp\n     expr : LPAREN expr RPAREN\n     expr : expr PLUS expr\n             | expr MINUS expr\n             | expr TIMES expr\n             | expr DIVIDE expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LT expr\n             | expr GT expr\n             | expr LEQ expr\n             | expr GEQ expr\n     expr : expr EQOP expr\n             | expr NEQ expr\n     expr : expr AND expr\n             | expr OR expr\n    expr : NOT exprexpr : MINUS expr %prec UMINUS ternaryOp : expr QMARK expr COL expr\n    assignment : reassign\n                  | initialize\n                  | arrayAssign\n                  | binOpAssign\n     binOpAssign : ID PEQ expr\n                    | ID MEQ expr\n                    | ID TEQ expr\n                    | ID DEQ expr\n                    | ID PP\n                    | ID MM\n     conditional : if else\n                    | if\n     if : NANI LPAREN expr RPAREN newScope enclosure popScope\n           | NANI LPAREN expr RPAREN newScope singleStatement popScope\n     else : NOU newScope enclosure popScope\n             | NOU newScope singleStatement popScope\n     reassign : ID EQ expr\n     functionDeclaration : fnHeader LPAREN argumentDeclaration RPAREN enclosure popScope\n     enclosure : LBRACE RBRACE\n                  | LBRACE statements RBRACE\n    fnHeader : fnType SQUIGGLY honorific IDnewScope :  returnStatement : expr DESU\n                        | empty DESU\n    popScope :  honorific : CHAN\n                  | KUN\n                  | SAN\n                  | SAMA\n     arrayAssign : arrayReference EQ expr\n     functionCall : printCall  functionCall : ID LPAREN exprLst RPAREN\n                     | ID LPAREN RPAREN\n     arrayLiteral : LBRACK RBRACK\n                     | LBRACK exprLst RBRACK\n     exprLst : expr\n                | expr COMMA exprLst\n     initialize : letInitialize\n                   | constInitialize\n     letInitialize : declaration EQ expr\n     constInitialize : constDeclaration EQ expr\n     declaration : arrayDeclaration\n                    | letDeclaration\n    argumentDeclaration : declaration\n                           | declaration COMMA argumentDeclaration\n                           |\n    constDeclaration : REAL arrayDeclaration\n                        | REAL letDeclaration\n    arrayDeclaration : type HAREM IDletDeclaration : type IDwhileLoop : WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope\n    forLoop : SHI newScope LPAREN forTrio RPAREN enclosure popScope\n               | SHI newScope LPAREN forElement RPAREN enclosure popScope\n     forTrio : forAssign SEMICOL expr SEMICOL forReassign\n     forAssign : reassign\n                  | letInitialize\n                  | arrayAssign\n                  | binOpAssign\n     forReassign : reassign\n                    | arrayAssign    \n                    | binOpAssign\n     forElement : declaration COL ID\n                   | constDeclaration COL ID\n    printCall : BAKA LPAREN exprLst RPAREN reference : letReference\n                  | arrayReference\n     letReference : ID\n     arrayReference : expr LBRACK expr RBRACK \n                       | ID LBRACK expr RBRACK\n    literal : NUMBERliteral : STRING literal : OWO\n                | UWU\n     fnType : YOKAI\n               | type\n               | type HAREM\n     type : WAIFU\n             | HUSBANDO\n             | CATBOY\n             | CATGIRL\n             | SENPAI\n             | KOUHAI\n     empty : '
    
_lr_action_items = {'DESU':([0,3,4,5,6,9,10,11,12,14,15,16,17,18,31,32,33,34,35,37,38,39,40,56,57,59,77,78,80,82,83,84,85,89,90,91,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,135,136,140,158,174,175,176,178,179,181,182,183,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[-119,-119,58,-5,74,-9,-10,-11,-12,-14,-15,-16,-17,-18,-48,-106,-107,-108,-109,-101,-102,-67,-103,-4,58,-6,-7,-8,-13,-102,-103,-35,-34,-47,-58,-70,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,-119,-71,-69,-104,-61,-61,-119,-68,-105,-58,-100,-36,-61,-51,-52,-55,-119,-119,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'$end':([0,1,2,3,4,5,9,10,11,12,31,56,59,77,78,80,89,174,175,184,192,193,194,197,199,200,204,205,206,207,208,209,211,212,213,],[-119,0,-1,-2,-3,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-61,-61,-61,-51,-52,-55,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'LPAREN':([0,3,5,9,10,11,12,19,20,21,28,29,30,31,36,40,45,46,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,83,87,88,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,167,174,175,176,180,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[19,19,-5,-9,-10,-11,-12,19,19,19,86,87,-58,-48,19,95,107,108,-4,-6,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-7,-8,19,-13,95,19,134,-47,-58,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,95,-61,-61,19,-57,-58,-61,19,-51,-52,-55,19,19,-54,-61,-61,-56,-61,-61,-61,-88,-89,19,-49,-50,-87,]),'NOT':([0,3,5,9,10,11,12,19,20,21,31,36,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,174,175,176,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[21,21,-5,-9,-10,-11,-12,21,21,21,-48,21,-4,-6,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-7,-8,21,-13,21,-47,-58,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-61,-61,21,-58,-61,21,-51,-52,-55,21,21,-54,-61,-61,-56,-61,-61,-61,-88,-89,21,-49,-50,-87,]),'MINUS':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,20,21,31,32,33,34,35,36,37,38,39,40,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,87,89,90,91,93,94,95,96,97,98,99,100,103,107,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,140,141,142,143,144,145,146,153,155,157,158,165,167,173,174,175,176,178,179,181,182,183,184,189,192,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,],[20,20,-5,61,-9,-10,-11,-12,-14,-15,-16,-17,-18,20,20,20,-48,-106,-107,-108,-109,20,-101,-102,-67,-103,-4,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-7,-8,20,-13,61,-102,-103,-35,-34,20,-47,-58,-70,61,20,20,20,20,20,20,20,20,20,20,20,-20,-21,-22,-23,-24,-25,61,61,61,61,61,61,61,61,61,61,61,-19,61,20,20,-71,20,61,-69,61,61,61,61,61,61,61,61,20,-104,61,-103,-102,-61,-61,20,-68,-105,-58,-100,61,-61,20,-51,-52,-55,20,20,-54,-61,-61,61,-56,-61,-61,-61,-88,-89,20,-49,-50,-87,]),'WHILEU':([0,3,5,9,10,11,12,31,56,59,77,78,80,89,90,135,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[29,29,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,29,-61,-61,29,-58,-61,-51,-52,-55,29,29,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'SHI':([0,3,5,9,10,11,12,31,56,59,77,78,80,89,90,135,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[30,30,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,30,-61,-61,30,-58,-61,-51,-52,-55,30,30,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'NUMBER':([0,3,5,9,10,11,12,19,20,21,31,36,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,174,175,176,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[32,32,-5,-9,-10,-11,-12,32,32,32,-48,32,-4,-6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-7,-8,32,-13,32,-47,-58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-61,-61,32,-58,-61,32,-51,-52,-55,32,32,-54,-61,-61,-56,-61,-61,-61,-88,-89,32,-49,-50,-87,]),'STRING':([0,3,5,9,10,11,12,19,20,21,31,36,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,174,175,176,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[33,33,-5,-9,-10,-11,-12,33,33,33,-48,33,-4,-6,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-7,-8,33,-13,33,-47,-58,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-61,-61,33,-58,-61,33,-51,-52,-55,33,33,-54,-61,-61,-56,-61,-61,-61,-88,-89,33,-49,-50,-87,]),'OWO':([0,3,5,9,10,11,12,19,20,21,31,36,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,174,175,176,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[34,34,-5,-9,-10,-11,-12,34,34,34,-48,34,-4,-6,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-7,-8,34,-13,34,-47,-58,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-61,-61,34,-58,-61,34,-51,-52,-55,34,34,-54,-61,-61,-56,-61,-61,-61,-88,-89,34,-49,-50,-87,]),'UWU':([0,3,5,9,10,11,12,19,20,21,31,36,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,174,175,176,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[35,35,-5,-9,-10,-11,-12,35,35,35,-48,35,-4,-6,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-7,-8,35,-13,35,-47,-58,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-61,-61,35,-58,-61,35,-51,-52,-55,35,35,-54,-61,-61,-56,-61,-61,-61,-88,-89,35,-49,-50,-87,]),'LBRACK':([0,3,5,6,9,10,11,12,14,15,16,17,18,19,20,21,31,32,33,34,35,36,37,38,39,40,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,87,89,90,91,93,94,95,96,97,98,99,100,103,107,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,140,141,142,143,144,145,146,153,155,157,158,165,167,173,174,175,176,178,179,181,182,183,184,189,192,193,194,195,196,197,199,200,201,204,205,206,207,208,209,210,211,212,213,],[36,36,-5,76,-9,-10,-11,-12,-14,-15,-16,-17,-18,36,36,36,-48,-106,-107,-108,-109,36,-101,-102,-67,-103,-4,-6,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-7,-8,36,-13,76,-102,-103,76,76,36,-47,-58,-70,76,36,36,36,36,36,36,36,36,36,36,36,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-19,76,36,36,-71,36,76,-69,76,76,76,76,76,76,76,76,36,-104,76,-103,-102,-61,-61,36,-68,-105,-58,-100,76,-61,36,-51,-52,-55,36,36,-54,-61,-61,76,-56,-61,-61,-61,-88,-89,36,-49,-50,-87,]),'ID':([0,3,5,9,10,11,12,19,20,21,31,36,43,48,49,50,51,52,53,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,104,107,108,109,112,134,135,137,148,149,150,151,152,156,157,174,175,176,181,184,189,190,191,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[40,40,-5,-9,-10,-11,-12,83,83,83,-48,83,105,-113,-114,-115,-116,-117,-118,-4,-6,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-7,-8,83,-13,83,-47,-58,83,83,83,83,83,83,83,83,147,83,83,83,105,167,40,83,180,-62,-63,-64,-65,147,83,-61,-61,40,-58,-61,83,202,203,-51,-52,-55,40,40,-54,-61,-61,-56,-61,-61,-61,-88,-89,167,-49,-50,-87,]),'NANI':([0,3,5,9,10,11,12,31,56,59,77,78,80,89,90,135,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[45,45,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,45,-61,-61,45,-58,-61,-51,-52,-55,45,45,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'BAKA':([0,3,5,9,10,11,12,19,20,21,31,36,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,87,89,90,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,174,175,176,181,184,189,192,193,194,195,196,197,199,200,204,205,206,207,208,209,210,211,212,213,],[46,46,-5,-9,-10,-11,-12,46,46,46,-48,46,-4,-6,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-7,-8,46,-13,46,-47,-58,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-61,-61,46,-58,-61,46,-51,-52,-55,46,46,-54,-61,-61,-56,-61,-61,-61,-88,-89,46,-49,-50,-87,]),'WAIFU':([0,3,5,9,10,11,12,31,55,56,59,77,78,80,86,89,90,134,135,160,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[48,48,-5,-9,-10,-11,-12,-48,48,-4,-6,-7,-8,-13,48,-47,-58,48,48,48,-61,-61,48,-58,-61,-51,-52,-55,48,48,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'HUSBANDO':([0,3,5,9,10,11,12,31,55,56,59,77,78,80,86,89,90,134,135,160,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[49,49,-5,-9,-10,-11,-12,-48,49,-4,-6,-7,-8,-13,49,-47,-58,49,49,49,-61,-61,49,-58,-61,-51,-52,-55,49,49,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'CATBOY':([0,3,5,9,10,11,12,31,55,56,59,77,78,80,86,89,90,134,135,160,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[50,50,-5,-9,-10,-11,-12,-48,50,-4,-6,-7,-8,-13,50,-47,-58,50,50,50,-61,-61,50,-58,-61,-51,-52,-55,50,50,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'CATGIRL':([0,3,5,9,10,11,12,31,55,56,59,77,78,80,86,89,90,134,135,160,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[51,51,-5,-9,-10,-11,-12,-48,51,-4,-6,-7,-8,-13,51,-47,-58,51,51,51,-61,-61,51,-58,-61,-51,-52,-55,51,51,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'SENPAI':([0,3,5,9,10,11,12,31,55,56,59,77,78,80,86,89,90,134,135,160,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[52,52,-5,-9,-10,-11,-12,-48,52,-4,-6,-7,-8,-13,52,-47,-58,52,52,52,-61,-61,52,-58,-61,-51,-52,-55,52,52,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'KOUHAI':([0,3,5,9,10,11,12,31,55,56,59,77,78,80,86,89,90,134,135,160,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[53,53,-5,-9,-10,-11,-12,-48,53,-4,-6,-7,-8,-13,53,-47,-58,53,53,53,-61,-61,53,-58,-61,-51,-52,-55,53,53,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'YOKAI':([0,3,5,9,10,11,12,31,56,59,77,78,80,89,90,135,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[54,54,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,54,-61,-61,54,-58,-61,-51,-52,-55,54,54,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'REAL':([0,3,5,9,10,11,12,31,56,59,77,78,80,89,90,134,135,174,175,176,181,184,192,193,194,195,196,197,199,200,204,205,206,207,208,209,211,212,213,],[55,55,-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-58,55,55,-61,-61,55,-58,-61,-51,-52,-55,55,55,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'RBRACE':([5,9,10,11,12,31,56,59,77,78,80,89,174,175,176,184,192,193,194,195,197,199,200,204,205,206,207,208,209,211,212,213,],[-5,-9,-10,-11,-12,-48,-4,-6,-7,-8,-13,-47,-61,-61,194,-61,-51,-52,-55,204,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'SEMICOL':([6,7,8,13,14,15,16,17,18,22,23,24,25,26,27,32,33,34,35,37,38,39,40,41,42,58,74,82,83,84,85,91,101,102,105,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,136,138,140,141,142,143,144,145,147,155,158,164,169,170,171,172,178,179,182,183,201,],[59,77,78,80,-14,-15,-16,-17,-18,-37,-38,-39,-40,-78,-79,-106,-107,-108,-109,-101,-102,-67,-103,-74,-75,-60,-59,-102,-103,-35,-34,-70,-45,-46,-86,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-76,-19,-71,-66,-69,-53,-41,-42,-43,-44,-85,-77,-104,189,-91,-92,-93,-94,-68,-105,-100,-36,210,]),'PLUS':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[60,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,60,-102,-103,-35,-34,-70,60,-20,-21,-22,-23,-24,-25,60,60,60,60,60,60,60,60,60,60,60,-19,60,-71,60,-69,60,60,60,60,60,60,60,60,-104,60,-103,-102,-68,-105,-100,60,60,]),'TIMES':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[62,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,62,-102,-103,-35,-34,-70,62,62,62,-22,-23,-24,-25,62,62,62,62,62,62,62,62,62,62,62,-19,62,-71,62,-69,62,62,62,62,62,62,62,62,-104,62,-103,-102,-68,-105,-100,62,62,]),'DIVIDE':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[63,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,63,-102,-103,-35,-34,-70,63,63,63,-22,-23,-24,-25,63,63,63,63,63,63,63,63,63,63,63,-19,63,-71,63,-69,63,63,63,63,63,63,63,63,-104,63,-103,-102,-68,-105,-100,63,63,]),'MOD':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[64,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,64,-102,-103,-35,-34,-70,64,64,64,-22,-23,-24,-25,64,64,64,64,64,64,64,64,64,64,64,-19,64,-71,64,-69,64,64,64,64,64,64,64,64,-104,64,-103,-102,-68,-105,-100,64,64,]),'POW':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[65,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,65,-102,-103,-35,-34,-70,65,65,65,65,65,65,-25,65,65,65,65,65,65,65,65,65,65,65,-19,65,-71,65,-69,65,65,65,65,65,65,65,65,-104,65,-103,-102,-68,-105,-100,65,65,]),'LT':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[66,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,66,-102,-103,-35,-34,-70,66,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,66,66,66,66,66,-19,66,-71,66,-69,66,66,66,66,66,66,66,66,-104,66,-103,-102,-68,-105,-100,66,66,]),'GT':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[67,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,67,-102,-103,-35,-34,-70,67,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,67,67,67,67,67,-19,67,-71,67,-69,67,67,67,67,67,67,67,67,-104,67,-103,-102,-68,-105,-100,67,67,]),'LEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[68,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,68,-102,-103,-35,-34,-70,68,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,68,68,68,68,68,-19,68,-71,68,-69,68,68,68,68,68,68,68,68,-104,68,-103,-102,-68,-105,-100,68,68,]),'GEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[69,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,69,-102,-103,-35,-34,-70,69,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,69,69,69,69,69,-19,69,-71,69,-69,69,69,69,69,69,69,69,69,-104,69,-103,-102,-68,-105,-100,69,69,]),'EQOP':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[70,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,70,-102,-103,-35,-34,-70,70,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,70,70,70,70,70,-19,70,-71,70,-69,70,70,70,70,70,70,70,70,-104,70,-103,-102,-68,-105,-100,70,70,]),'NEQ':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[71,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,71,-102,-103,-35,-34,-70,71,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,71,71,71,71,71,-19,71,-71,71,-69,71,71,71,71,71,71,71,71,-104,71,-103,-102,-68,-105,-100,71,71,]),'AND':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[72,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,72,-102,-103,-35,-34,-70,72,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,72,72,72,-19,72,-71,72,-69,72,72,72,72,72,72,72,72,-104,72,-103,-102,-68,-105,-100,72,72,]),'OR':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[73,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,73,-102,-103,-35,-34,-70,73,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,73,73,73,-19,73,-71,73,-69,73,73,73,73,73,73,73,73,-104,73,-103,-102,-68,-105,-100,73,73,]),'QMARK':([6,14,15,16,17,18,32,33,34,35,37,38,39,40,81,82,83,84,85,91,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,136,138,140,141,142,143,144,145,146,153,155,158,165,167,173,178,179,182,183,201,],[75,-14,-15,-16,-17,-18,-106,-107,-108,-109,-101,-102,-67,-103,75,-102,-103,-35,-34,-70,75,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,75,75,75,-19,75,-71,75,-69,75,75,75,75,75,75,75,75,-104,75,-103,-102,-68,-105,-100,-36,75,]),'EQ':([8,26,27,38,40,47,105,110,111,147,158,166,167,173,179,],[79,-78,-79,94,96,109,-86,-83,-84,-85,-104,79,96,94,-105,]),'NOU':([9,10,11,12,31,59,77,78,80,89,174,175,184,192,193,194,197,199,200,204,205,206,207,208,209,211,212,213,],[-9,-10,-11,-12,90,-6,-7,-8,-13,-47,-61,-61,-61,-51,-52,-55,-54,-61,-61,-56,-61,-61,-61,-88,-89,-49,-50,-87,]),'RPAREN':([14,15,16,17,18,26,27,32,33,34,35,37,39,81,82,83,84,85,86,91,93,95,101,102,105,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,131,132,133,136,138,139,140,141,142,143,144,145,147,153,154,158,160,162,163,177,178,179,182,183,185,202,203,214,215,216,217,],[-14,-15,-16,-17,-18,-78,-79,-106,-107,-108,-109,-101,-67,130,-102,-103,-35,-34,-82,-70,-72,140,-45,-46,-86,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,159,-80,161,-71,-66,178,-69,-53,-41,-42,-43,-44,-85,181,182,-104,-82,187,188,-73,-68,-105,-100,-36,-81,-98,-99,-90,-95,-96,-97,]),'COMMA':([14,15,16,17,18,26,27,32,33,34,35,37,39,82,83,84,85,91,93,105,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,132,136,140,147,158,178,179,182,183,],[-14,-15,-16,-17,-18,-78,-79,-106,-107,-108,-109,-101,-67,-102,-103,-35,-34,-70,137,-86,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-19,160,-71,-69,-85,-104,-68,-105,-100,-36,]),'RBRACK':([14,15,16,17,18,32,33,34,35,36,37,39,82,83,84,85,91,92,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,130,136,140,146,158,177,178,179,182,183,],[-14,-15,-16,-17,-18,-106,-107,-108,-109,91,-101,-67,-102,-103,-35,-34,-70,136,-72,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,158,-19,-71,-69,179,-104,-73,-68,-105,-100,-36,]),'COL':([14,15,16,17,18,26,27,32,33,34,35,37,39,82,83,84,85,91,105,110,111,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,136,140,147,158,166,168,178,179,182,183,],[-14,-15,-16,-17,-18,-78,-79,-106,-107,-108,-109,-101,-67,-102,-103,-35,-34,-70,-86,-83,-84,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,157,-19,-71,-69,-85,-104,190,191,-68,-105,-100,-36,]),'PEQ':([40,167,],[97,97,]),'MEQ':([40,167,],[98,98,]),'TEQ':([40,167,],[99,99,]),'DEQ':([40,167,],[100,100,]),'PP':([40,167,],[101,101,]),'MM':([40,167,],[102,102,]),'HAREM':([43,48,49,50,51,52,53,112,],[104,-113,-114,-115,-116,-117,-118,156,]),'SQUIGGLY':([43,44,48,49,50,51,52,53,54,104,],[-111,106,-113,-114,-115,-116,-117,-118,-110,-112,]),'LBRACE':([90,135,159,181,186,187,188,196,198,],[-58,176,176,-58,-58,176,176,176,176,]),'CHAN':([106,],[149,]),'KUN':([106,],[150,]),'SAN':([106,],[151,]),'SAMA':([106,],[152,]),'ISTUDIED':([161,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts_or_empty':([0,],[2,]),'statements':([0,176,],[3,195,]),'empty':([0,3,135,176,195,196,],[4,57,57,57,57,57,]),'singleStatement':([0,3,135,176,195,196,],[5,56,175,5,56,206,]),'expr':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[6,6,81,84,85,93,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,133,138,93,141,142,143,144,145,146,153,93,155,165,6,93,183,6,201,6,6,165,]),'assignment':([0,3,135,176,195,196,],[7,7,7,7,7,7,]),'declaration':([0,3,86,134,135,160,176,195,196,],[8,8,132,166,8,132,8,8,8,]),'functionDeclaration':([0,3,135,176,195,196,],[9,9,9,9,9,9,]),'whileLoop':([0,3,135,176,195,196,],[10,10,10,10,10,10,]),'forLoop':([0,3,135,176,195,196,],[11,11,11,11,11,11,]),'conditional':([0,3,135,176,195,196,],[12,12,12,12,12,12,]),'returnStatement':([0,3,135,176,195,196,],[13,13,13,13,13,13,]),'literal':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'arrayLiteral':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'reference':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'functionCall':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ternaryOp':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'reassign':([0,3,134,135,176,195,196,210,],[22,22,169,22,22,22,22,215,]),'initialize':([0,3,135,176,195,196,],[23,23,23,23,23,23,]),'arrayAssign':([0,3,134,135,176,195,196,210,],[24,24,171,24,24,24,24,216,]),'binOpAssign':([0,3,134,135,176,195,196,210,],[25,25,172,25,25,25,25,217,]),'arrayDeclaration':([0,3,55,86,134,135,160,176,195,196,],[26,26,110,26,26,26,26,26,26,26,]),'letDeclaration':([0,3,55,86,134,135,160,176,195,196,],[27,27,111,27,27,27,27,27,27,27,]),'fnHeader':([0,3,135,176,195,196,],[28,28,28,28,28,28,]),'if':([0,3,135,176,195,196,],[31,31,31,31,31,31,]),'letReference':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'arrayReference':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[38,38,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,173,38,82,82,38,82,38,38,173,]),'printCall':([0,3,19,20,21,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,79,87,94,95,96,97,98,99,100,103,107,108,109,134,135,137,157,176,189,195,196,210,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'letInitialize':([0,3,134,135,176,195,196,],[41,41,170,41,41,41,41,]),'constInitialize':([0,3,135,176,195,196,],[42,42,42,42,42,42,]),'type':([0,3,55,86,134,135,160,176,195,196,],[43,43,112,112,112,43,112,43,43,43,]),'fnType':([0,3,135,176,195,196,],[44,44,44,44,44,44,]),'constDeclaration':([0,3,134,135,176,195,196,],[47,47,168,47,47,47,47,]),'newScope':([30,90,181,186,],[88,135,196,198,]),'else':([31,],[89,]),'exprLst':([36,95,108,137,],[92,139,154,177,]),'argumentDeclaration':([86,160,],[131,185,]),'honorific':([106,],[148,]),'forTrio':([134,],[162,]),'forElement':([134,],[163,]),'forAssign':([134,],[164,]),'enclosure':([135,159,187,188,196,198,],[174,184,199,200,205,207,]),'popScope':([174,175,184,199,200,205,206,207,],[192,193,197,208,209,211,212,213,]),'forReassign':([210,],[214,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmts_or_empty','program',1,'p_program','parser.py',83),
  ('stmts_or_empty -> statements','stmts_or_empty',1,'p_statements_or_empty','parser.py',88),
  ('stmts_or_empty -> empty','stmts_or_empty',1,'p_statements_or_empty','parser.py',89),
  ('statements -> statements singleStatement','statements',2,'p_statements','parser.py',95),
  ('statements -> singleStatement','statements',1,'p_statements','parser.py',96),
  ('singleStatement -> expr SEMICOL','singleStatement',2,'p_singleStatement','parser.py',102),
  ('singleStatement -> assignment SEMICOL','singleStatement',2,'p_singleStatement','parser.py',103),
  ('singleStatement -> declaration SEMICOL','singleStatement',2,'p_singleStatement','parser.py',104),
  ('singleStatement -> functionDeclaration','singleStatement',1,'p_singleStatement','parser.py',105),
  ('singleStatement -> whileLoop','singleStatement',1,'p_singleStatement','parser.py',106),
  ('singleStatement -> forLoop','singleStatement',1,'p_singleStatement','parser.py',107),
  ('singleStatement -> conditional','singleStatement',1,'p_singleStatement','parser.py',108),
  ('singleStatement -> returnStatement SEMICOL','singleStatement',2,'p_singleStatement','parser.py',109),
  ('expr -> literal','expr',1,'p_expr','parser.py',115),
  ('expr -> arrayLiteral','expr',1,'p_expr','parser.py',116),
  ('expr -> reference','expr',1,'p_expr','parser.py',117),
  ('expr -> functionCall','expr',1,'p_expr','parser.py',118),
  ('expr -> ternaryOp','expr',1,'p_expr','parser.py',119),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_paren_expr','parser.py',125),
  ('expr -> expr PLUS expr','expr',3,'p_boolExpr','parser.py',134),
  ('expr -> expr MINUS expr','expr',3,'p_boolExpr','parser.py',135),
  ('expr -> expr TIMES expr','expr',3,'p_boolExpr','parser.py',136),
  ('expr -> expr DIVIDE expr','expr',3,'p_boolExpr','parser.py',137),
  ('expr -> expr MOD expr','expr',3,'p_boolExpr','parser.py',138),
  ('expr -> expr POW expr','expr',3,'p_boolExpr','parser.py',139),
  ('expr -> expr LT expr','expr',3,'p_boolExpr','parser.py',140),
  ('expr -> expr GT expr','expr',3,'p_boolExpr','parser.py',141),
  ('expr -> expr LEQ expr','expr',3,'p_boolExpr','parser.py',142),
  ('expr -> expr GEQ expr','expr',3,'p_boolExpr','parser.py',143),
  ('expr -> expr EQOP expr','expr',3,'p_equality_op','parser.py',203),
  ('expr -> expr NEQ expr','expr',3,'p_equality_op','parser.py',204),
  ('expr -> expr AND expr','expr',3,'p_boolExpr_op','parser.py',222),
  ('expr -> expr OR expr','expr',3,'p_boolExpr_op','parser.py',223),
  ('expr -> NOT expr','expr',2,'p_boolExprNeg','parser.py',243),
  ('expr -> MINUS expr','expr',2,'p_numExpr_uminus','parser.py',253),
  ('ternaryOp -> expr QMARK expr COL expr','ternaryOp',5,'p_ternaryOp','parser.py',263),
  ('assignment -> reassign','assignment',1,'p_assignment','parser.py',280),
  ('assignment -> initialize','assignment',1,'p_assignment','parser.py',281),
  ('assignment -> arrayAssign','assignment',1,'p_assignment','parser.py',282),
  ('assignment -> binOpAssign','assignment',1,'p_assignment','parser.py',283),
  ('binOpAssign -> ID PEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',289),
  ('binOpAssign -> ID MEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',290),
  ('binOpAssign -> ID TEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',291),
  ('binOpAssign -> ID DEQ expr','binOpAssign',3,'p_binOpAssign','parser.py',292),
  ('binOpAssign -> ID PP','binOpAssign',2,'p_binOpAssign','parser.py',293),
  ('binOpAssign -> ID MM','binOpAssign',2,'p_binOpAssign','parser.py',294),
  ('conditional -> if else','conditional',2,'p_conditional','parser.py',325),
  ('conditional -> if','conditional',1,'p_conditional','parser.py',326),
  ('if -> NANI LPAREN expr RPAREN newScope enclosure popScope','if',7,'p_if','parser.py',332),
  ('if -> NANI LPAREN expr RPAREN newScope singleStatement popScope','if',7,'p_if','parser.py',333),
  ('else -> NOU newScope enclosure popScope','else',4,'p_else','parser.py',341),
  ('else -> NOU newScope singleStatement popScope','else',4,'p_else','parser.py',342),
  ('reassign -> ID EQ expr','reassign',3,'p_reassign','parser.py',348),
  ('functionDeclaration -> fnHeader LPAREN argumentDeclaration RPAREN enclosure popScope','functionDeclaration',6,'p_functionDeclaration','parser.py',367),
  ('enclosure -> LBRACE RBRACE','enclosure',2,'p_enclosure','parser.py',377),
  ('enclosure -> LBRACE statements RBRACE','enclosure',3,'p_enclosure','parser.py',378),
  ('fnHeader -> fnType SQUIGGLY honorific ID','fnHeader',4,'p_functionHeader','parser.py',384),
  ('newScope -> <empty>','newScope',0,'p_newScope','parser.py',399),
  ('returnStatement -> expr DESU','returnStatement',2,'p_returnStatement','parser.py',407),
  ('returnStatement -> empty DESU','returnStatement',2,'p_returnStatement','parser.py',408),
  ('popScope -> <empty>','popScope',0,'p_popScope','parser.py',425),
  ('honorific -> CHAN','honorific',1,'p_honorific','parser.py',433),
  ('honorific -> KUN','honorific',1,'p_honorific','parser.py',434),
  ('honorific -> SAN','honorific',1,'p_honorific','parser.py',435),
  ('honorific -> SAMA','honorific',1,'p_honorific','parser.py',436),
  ('arrayAssign -> arrayReference EQ expr','arrayAssign',3,'p_arrayAssign','parser.py',442),
  ('functionCall -> printCall','functionCall',1,'p_printCall','parser.py',464),
  ('functionCall -> ID LPAREN exprLst RPAREN','functionCall',4,'p_functionCall','parser.py',469),
  ('functionCall -> ID LPAREN RPAREN','functionCall',3,'p_functionCall','parser.py',470),
  ('arrayLiteral -> LBRACK RBRACK','arrayLiteral',2,'p_arrayLiteral','parser.py',498),
  ('arrayLiteral -> LBRACK exprLst RBRACK','arrayLiteral',3,'p_arrayLiteral','parser.py',499),
  ('exprLst -> expr','exprLst',1,'p_exprList','parser.py',522),
  ('exprLst -> expr COMMA exprLst','exprLst',3,'p_exprList','parser.py',523),
  ('initialize -> letInitialize','initialize',1,'p_initialize','parser.py',532),
  ('initialize -> constInitialize','initialize',1,'p_initialize','parser.py',533),
  ('letInitialize -> declaration EQ expr','letInitialize',3,'p_letInitialize','parser.py',539),
  ('constInitialize -> constDeclaration EQ expr','constInitialize',3,'p_constInitialize','parser.py',555),
  ('declaration -> arrayDeclaration','declaration',1,'p_declaration','parser.py',571),
  ('declaration -> letDeclaration','declaration',1,'p_declaration','parser.py',572),
  ('argumentDeclaration -> declaration','argumentDeclaration',1,'p_argumentDeclaration','parser.py',579),
  ('argumentDeclaration -> declaration COMMA argumentDeclaration','argumentDeclaration',3,'p_argumentDeclaration','parser.py',580),
  ('argumentDeclaration -> <empty>','argumentDeclaration',0,'p_argumentDeclaration','parser.py',581),
  ('constDeclaration -> REAL arrayDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',593),
  ('constDeclaration -> REAL letDeclaration','constDeclaration',2,'p_constDeclaration','parser.py',594),
  ('arrayDeclaration -> type HAREM ID','arrayDeclaration',3,'p_arrayDeclaration','parser.py',603),
  ('letDeclaration -> type ID','letDeclaration',2,'p_letDeclaration','parser.py',613),
  ('whileLoop -> WHILEU LPAREN expr RPAREN ISTUDIED newScope enclosure popScope','whileLoop',8,'p_whileLoop','parser.py',621),
  ('forLoop -> SHI newScope LPAREN forTrio RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',631),
  ('forLoop -> SHI newScope LPAREN forElement RPAREN enclosure popScope','forLoop',7,'p_forLoop','parser.py',632),
  ('forTrio -> forAssign SEMICOL expr SEMICOL forReassign','forTrio',5,'p_forTrio','parser.py',638),
  ('forAssign -> reassign','forAssign',1,'p_forAssign','parser.py',646),
  ('forAssign -> letInitialize','forAssign',1,'p_forAssign','parser.py',647),
  ('forAssign -> arrayAssign','forAssign',1,'p_forAssign','parser.py',648),
  ('forAssign -> binOpAssign','forAssign',1,'p_forAssign','parser.py',649),
  ('forReassign -> reassign','forReassign',1,'p_forReassign','parser.py',655),
  ('forReassign -> arrayAssign','forReassign',1,'p_forReassign','parser.py',656),
  ('forReassign -> binOpAssign','forReassign',1,'p_forReassign','parser.py',657),
  ('forElement -> declaration COL ID','forElement',3,'p_forElement','parser.py',663),
  ('forElement -> constDeclaration COL ID','forElement',3,'p_forElement','parser.py',664),
  ('printCall -> BAKA LPAREN exprLst RPAREN','printCall',4,'p_print','parser.py',671),
  ('reference -> letReference','reference',1,'p_reference','parser.py',679),
  ('reference -> arrayReference','reference',1,'p_reference','parser.py',680),
  ('letReference -> ID','letReference',1,'p_letReference','parser.py',686),
  ('arrayReference -> expr LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',705),
  ('arrayReference -> ID LBRACK expr RBRACK','arrayReference',4,'p_arrayReference','parser.py',706),
  ('literal -> NUMBER','literal',1,'p_numExpr_number','parser.py',756),
  ('literal -> STRING','literal',1,'p_strExpr','parser.py',762),
  ('literal -> OWO','literal',1,'p_bool','parser.py',768),
  ('literal -> UWU','literal',1,'p_bool','parser.py',769),
  ('fnType -> YOKAI','fnType',1,'p_fnType','parser.py',779),
  ('fnType -> type','fnType',1,'p_fnType','parser.py',780),
  ('fnType -> type HAREM','fnType',2,'p_fnType','parser.py',781),
  ('type -> WAIFU','type',1,'p_type','parser.py',790),
  ('type -> HUSBANDO','type',1,'p_type','parser.py',791),
  ('type -> CATBOY','type',1,'p_type','parser.py',792),
  ('type -> CATGIRL','type',1,'p_type','parser.py',793),
  ('type -> SENPAI','type',1,'p_type','parser.py',794),
  ('type -> KOUHAI','type',1,'p_type','parser.py',795),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',801),
]
